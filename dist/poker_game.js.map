{"version":3,"file":"poker_game.js","sources":["src/containers/UpdatableContainer.js","src/lib/BezierEasing.js","src/Card.js","src/CardCollection.js","src/CardsGenerator.js","src/Arrays.js","src/Numbers.js","src/CardComboList.js","src/gui/LinearLayout.js","src/Config.js","src/gui/debug/GUICombosList.js","src/lib/Keyboard.js","src/gui/GUICardSelector.js","src/lib/Timer.js","src/lib/TransformAnimation.js","src/lib/GUIText.js","src/Tracker.js","src/i18n.js","src/gui/GUIScoreLayout.js","src/gui/contextual-menu/ContextualBox.js","src/lib/Rect.js","src/gui/contextual-menu/ContextualDisplayer.js","src/gui/contextual-menu/GUICursor.js","src/gui/contextual-menu/ContextualMenu.js","src/gui/GUIContext.js","src/containers/AbsCardArea.js","src/containers/CardRiverArea.js","src/Game.js","src/poker_game.js"],"sourcesContent":["import PIXI from 'pixi.js';\n\nexport default class UpdatableContainer extends PIXI.Container {\n    update(game) {\n        this.updateChildren(game);\n    }\n\n    destroyChildren() {\n        this.children.forEach((d) => d.destroy());\n        this.removeChildren();\n    }\n\n    updateChildren(game) {\n        this.children.forEach(function (child) { \n            child.update(game); \n        });\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject}\n     */\n    findChildrenByType(Type) {\n        return this.children.find((d) => d instanceof Type);\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject[]}\n     */\n    findAllChildByType(Type) {\n        return this.children.filter((d) => d instanceof Type);\n    }\n}","\n/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n    return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX, currentT, i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        } else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\n\nexport default function bezier(mX1, mY1, mX2, mY2) {\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n        for (var i = 0; i < kSplineTableSize; ++i) {\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    function getTForX(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }--currentSample;\n\n        // Interpolate to provide an initial guess for t\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    return function BezierEasing(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}; ","import PIXI from 'pixi.js';\nimport CardsGenerator from './CardsGenerator';\nimport BezierEasing from './lib/BezierEasing';\n\nexport default class Card extends PIXI.Graphics {\n\n  constructor(options) {\n    super();\n    this.value = options.value;\n    this.suit  = options.suit;\n\n    const width = options.width;\n    const height = options.height;\n    this.originalWidth = options.width;\n    this.originalHeight = options.height;\n    this.drawBackground();\n    const valueText = new PIXI.Text(this.getValue(), {\n      fontSize: 26,\n      textColor: 0,\n      align: 'center',\n    });\n    const suitText = new PIXI.Text(this.getSuit(), {\n      fontSize: 14,\n      textColor: 0,\n      align: 'center'\n    });\n    this.isHighlighted = false;\n    valueText.x = width/2;\n    valueText.y = 30;\n    valueText.anchor.set(0.5,0.5);\n    suitText.x = width/2;\n    suitText.y = height/2;\n    suitText.anchor.set(0.5,0.5);\n    this.addChild(valueText);\n    this.addChild(suitText);\n  }\n\n  drawBackground() {\n    const shadowSteps = 10;\n    this.clear().lineStyle(1, 0x000000, 1)\n      .beginFill(this.suit === 1 || this.suit === 2 ? 0xFF0000 : 0, 0.5)\n      .drawRoundedRect(0, 0, this.originalWidth, this.originalHeight, this.originalWidth/10)\n      .endFill();\n    if (this.isHighlighted) {\n      for (let i = 1; i < shadowSteps; i++) {\n        this.lineStyle(1, 0xffff00, 0.8 - i / shadowSteps)\n          .drawRoundedRect(-i, -i, this.originalWidth+i*2, this.originalHeight+i*2, this.originalWidth/10);\n      }\n      \n    }\n  }\n\n  highlight() {\n    this.isHighlighted = true;\n    this.drawBackground();\n  }\n\n  isJoker() {\n    return this.value === CardsGenerator.JOKER_VALUE;\n  }\n\n  getSuit() {\n    if (this.suit === CardsGenerator.JOKER) return 'Joker';\n    return CardsGenerator.SUITS[this.suit];\n  }\n\n  getValue() {\n    if (this.value === CardsGenerator.JOKER_VALUE) return 'Joker';\n    return CardsGenerator.VALUE_LABELS[this.value];\n  }\n\n  toString() {\n    return `${this.getValue()} of ${this.getSuit()}`;\n  }\n\n}","import Card from './Card';\n\nexport default class CardCollection {\n\n    static from(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) return arrayOfCard;\n        if (Array.isArray(arrayOfCard)) return new CardCollection(arrayOfCard);\n        return new CardCollection();\n    }\n\n    constructor(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) {\n            this.cards = arrayOfCard.cards.slice(0);\n        } else if (Array.isArray(arrayOfCard)) {\n            this.cards = arrayOfCard;\n        } else {\n            this.cards = [];\n        }\n    }\n\n    destroy() {\n        this.cards.forEach((d) => d.destroy());\n    }\n\n    /**\n     * @param {Card[]} cards\n     */\n    addAll(cards) {\n        this.cards.push(...cards);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    add(card) {\n        this.cards.push(card);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    remove(card) {\n        let index;\n        if ((index = this.cards.indexOf(card)) > -1) {\n            return this.cards.splice(index, 1)[0];\n        }\n        return null;\n    }\n\n    /**\n     * @param {number} suit\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getBySuitAndValue(suit, value) {\n        return this.cards.find((c) => c.value === value && c.suit === suit);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getByValue(value) {\n        return this.cards.find((c) => c.value === value);\n    }\n\n    /**\n     * @param {number} suit\n     * @returns {Card} card\n     */\n    getBySuit(suit) {\n        return this.cards.find((c) => c.suit === suit);\n    }\n\n    /**\n     * @returns {Card} card\n     */\n    peek() {\n        return this.cards[0];\n    }\n\n    shuffle() {\n        const output = [];\n        const input = this.toArray();\n        while (input.length > 0) {\n            let index = Math.floor(Math.random() * input.length);\n            output.push(input.splice(index, 1)[0]);\n        }\n        this.cards = output;\n        return this;\n    }\n\n    /**\n     * @returns {Card[]}\n     */\n    toArray() {\n        return this.cards.slice(0);\n    }\n\n    /**\n     * @returns {String}\n     */\n    toString() {\n        return this.cards.toString();\n    }\n};","import CardCollection from './CardCollection';\nimport Card from './Card';\n\nconst CardsGenerator = {\n    CARD_WIDTH: 370 / 4,\n    CARD_HEIGHT: 522 / 4,\n    JOKER: 'Joker',\n    JOKER_VALUE: 13,\n    SUITS: [ 'Spades', 'Hearts', 'Diamonds', 'Clubs' ],\n    VALUE_LABELS: [ '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace' ],\n    generateCards() {\n        const output = [];\n        for (let suitIndex = 0; suitIndex < CardsGenerator.SUITS.length; suitIndex++) {\n            for (let valueIndex = 0; valueIndex < CardsGenerator.VALUE_LABELS.length; valueIndex++) {\n                output.push(new Card({\n                    width: CardsGenerator.CARD_WIDTH,\n                    height: CardsGenerator.CARD_HEIGHT,\n                    suit: suitIndex,\n                    value: valueIndex\n                }));\n            }\n        }\n        for (let index = 0; index < 2; index++) {\n            output.push(new Card({ \n                width: CardsGenerator.CARD_WIDTH,\n                height: CardsGenerator.CARD_HEIGHT,\n                suit: CardsGenerator.JOKER,\n                value: CardsGenerator.JOKER_VALUE\n            }));\n        }\n        return new CardCollection(output);\n    }\n};\n\nexport default CardsGenerator;\n","function _identity(d) {return d;}\nexport default {\n  uniq(array, predicate = _identity) {\n    var output = [];\n    var ids = [];\n    array.forEach(function (d) {\n      const id = predicate(d);\n      if (ids.indexOf(id) === -1) {\n        output.push(d);\n        ids.push(id);\n      }\n    });\n    return output;\n  }\n};","export default {\n    Compare: {\n        asc(a, b) {\n            if (a > b) return 1;\n            if (a < b) return -1;\n            return 0;\n        },\n        desc(a, b) {\n            if (a > b) return -1;\n            if (a < b) return 1;\n            return 0;\n        }\n    },\n    clamp(value, min, max) {\n        return Math.max(Math.min(value, max), min);\n    }\n};","import CardCollection from './CardCollection';\nimport Arrays from './Arrays';\nimport Numbers from './Numbers';\n\nexport var ComboType = {\n    HigherCard: 1,\n    Pair: 2,\n    TwoPair: 3,\n    ThreeOfAKind: 4,\n    Straight: 5,\n    Flush: 6,\n    FullHouse: 7,\n    FourOfAKind: 8,\n    StraightFlush: 9,\n    FiveOfAKind: 10\n};\n\nexport class CardComboList {\n    \n    /**\n     * @param {CardCollection} cardsCollection\n     */\n    constructor(cardsCollection) {\n        this.originalCollection = cardsCollection;\n        this.combos = [];\n        this._parse(cardsCollection);\n    }\n\n    addAll(objects) {\n        objects.forEach((d) => this.add(d));\n    }\n\n    add(object) {\n        let cardCombo;\n        if (!(object instanceof CardCombo)) {\n            cardCombo = new CardCombo(object);\n        } else cardCombo = object;\n        this.combos.push(cardCombo);\n        return this;\n    }\n\n    getHigherCombo() {\n        return this.combos.sort((a, b) => {\n            if (a.type > b.type) return -1;\n            if (a.type < b.type) return 1;\n            return 0;\n        })[0];\n    }\n\n    _parse() {\n        // 1- HigherCard\n        this.add({ type: ComboType.HigherCard, card: this._getHigherCard() });\n        // 2 - Pair\n        // 4 - ThreeOfAKind\n        // 8 - FourOfAKind\n        // 10 - FiveOfAKind\n        this.addAll(this._getXOfAKind());\n        // 3 - TwoPair\n        const twoPairsCombo = this._getTwoPairs();\n        if (twoPairsCombo) this.add(twoPairsCombo);\n        // 5 - Straight\n        const straightCombo = this._getStraight();\n        if (straightCombo) this.add(straightCombo);\n        // 6 - Flush\n        const flushCombo = this._getFlush();\n        if (flushCombo) this.add(flushCombo);\n        // 7 - FullHouse\n        const fullHouseCombo = this._getFullHouse();\n        if (fullHouseCombo) this.add(fullHouseCombo);\n        // 9 - StraightFlush\n        const straightFlushCombo = this._getStraightFlush();\n        if (straightFlushCombo) this.add(straightFlushCombo);\n        \n        this.combos.sort((a, b) => Numbers.Compare.desc(a.getScore(), b.getScore()));\n    }\n\n    _getHigherCard() {\n        const cards = this.originalCollection.toArray();\n        return cards.sort((a, b) => {\n            if (a.value > b.value) return -1;\n            if (a.value < b.value) return 1;\n            return 0;\n        })[0];\n    }\n\n    _getTwoPairs() {\n        const pairs = [];\n        this.combos.forEach(function (combo) {\n            if (combo.type === ComboType.Pair) pairs.push(combo);\n        });\n        if (pairs.length === 2 && this._isAllCardDifferents(pairs[0], pairs[1])) {\n\n            return new CardCombo({\n                type: ComboType.TwoPair,\n                cards: [].concat(...pairs.map((d) => d.cards.toArray()))\n            });\n        }\n    }\n\n    _getXOfAKind() {\n        const cards = this.originalCollection.toArray();\n        const combos = [];\n        const comboTypeMapper = {\n            2: ComboType.Pair,\n            3: ComboType.ThreeOfAKind,\n            4: ComboType.FourOfAKind,\n            5: ComboType.FiveOfAKind\n        };\n        cards.forEach((card, cardIndex, cards) => {\n            const localeCards = [ card ];\n            for (let index = 0; index < cards.length; index++) {\n                if (card !== cards[index] && (card.value === cards[index].value || cards[index].isJoker())) {\n                    localeCards.push(cards[index]);\n                }\n            }\n            if (localeCards.length > 1 && localeCards.length < 6) {\n                combos.push(new CardCombo({\n                    type: comboTypeMapper[localeCards.length],\n                    cards: localeCards\n                }));\n            }\n        });\n        return Arrays.uniq(combos, (d) => d.getId());\n    }\n\n    _getFullHouse() {\n        const pair = this.combos.find((d) => d.type === ComboType.Pair);\n        const threeOfAKind = this.combos.find((d) => d.type === ComboType.ThreeOfAKind);\n        if (pair && threeOfAKind && this._isAllCardDifferents(pair, threeOfAKind)) {\n            return new CardCombo({\n                type: ComboType.FullHouse,\n                cards: [].concat(pair.getCards(), threeOfAKind.getCards())\n            });\n        }\n    }\n\n    _getStraight() {\n        const cards = this.originalCollection.toArray();\n        const values = cards.map((d) => d.value).sort(Numbers.Compare.asc);\n        let jokers = cards.filter((d) => d.isJoker()).length;\n        for (let index = 1, value = values[0]; index < values.length; index++) {\n            const match = value + 1 === values[index];\n            if (!match && jokers === 0) return;\n            if (!match) jokers--;\n            value++;\n        }\n        return new CardCombo({\n            type: ComboType.Straight,\n            cards: cards\n        });\n    }\n\n    _getFlush() {\n        const cards = this.originalCollection.toArray();\n        let black = 0, red = 0;\n        for (let index = 0; index < cards.length; index++) {\n            if (cards[index].isJoker()) {\n                black++;\n                red++;\n            } else if (/Spades|Clubs/.test(cards[index].getSuit())) {\n                black++;\n            } else red++;\n        }\n        if (black === cards.length || red === cards.length) {\n            return new CardCombo({\n                type: ComboType.Flush,\n                cards: cards\n            });\n        } \n    }\n\n    _getStraightFlush() {\n        const flush = this.combos.find((d) => d.type === ComboType.Flush);\n        const straight = this.combos.find((d) => d.type === ComboType.Straight);\n        if (flush && straight) {\n            return new CardCombo({\n                type: ComboType.StraightFlush,\n                cards: flush.getCards()\n            });\n        }\n    }\n\n    /**\n     * @param {Combo} c1\n     * @param {Combo} c2\n     * @returns {boolean}\n     */\n    _isAllCardDifferents(c1, c2) {\n        const c1Cards = c1.getCards();\n        const c2Cards = c2.getCards();\n        for (let i1 = 0; i1 < c1Cards.length; i1++)\n            for (let i2 = 0; i2 < c2Cards.length; i2++)\n                if (c1Cards[i1] === c2Cards[i2]) return false;\n        return true;\n    }\n\n    toString() {\n        return this.combos.join('\\n');\n    }\n\n}\n// TODO: TEST K 4 4 K J\nexport class CardCombo {\n\n    constructor(object) {\n        this.type = object.type;\n        this.cards = new CardCollection();\n        if (object.cards) this.cards.addAll(object.cards);\n        else if (object.card) this.cards.add(object.card);\n        this.getCards().sort((a, b) => Numbers.Compare.asc(a.value, b.value));\n    }\n\n    getCard() { return this.cards.peek(); }\n    getCards() { return this.cards.cards; }\n\n    _sortCards() {\n        this.getCards().sort((a, b) => { return Numbers.Compare.asc(a.suit, b.suit); });\n    }\n    \n    getId() {\n        this._sortCards();\n        return this.getCards().map((d) => `${d.value}&${d.suit}`).join('/');\n    }\n\n    getScore() {\n        const cards = this.getCards();\n        let out = 0;\n        for (let index = 0; index < cards.length; index++) out += cards[index].value;\n        return out + this.type * 10;\n    }\n\n    getTypeName() {\n        const keys = Object.keys(ComboType);\n        return keys.find((key) => ComboType[key] === this.type);\n    }\n\n    toString() {\n        return `${this.getTypeName()} { ${this.getCards().join(', ')} }`;\n    }\n\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\n\nexport default class LinearLayout extends UpdatableContainer {\n\n    /**\n     * @param {Object} [options]\n     * @property {number} x\n     * @property {number} y\n     * @property {number} childMargin\n     */\n    constructor(options = {}) {\n        super();\n        this.childMargin = 0;\n        if ('x' in options) this.x = options.x;\n        if ('y' in options) this.y = options.y;\n        if ('childMargin' in options) this.childMargin = options.childMargin;\n        this.setOrientation(options.orientation || LinearLayout.ORIENTATION_VERTICAL);\n    }\n\n    setOrientation(orientation) {\n        this._orientation = orientation;\n        if (orientation === LinearLayout.ORIENTATION_VERTICAL) {\n            this._posPropertyName = 'y';\n            this._sizePropertyName = 'height';\n        } else if (orientation === LinearLayout.ORIENTATION_HORIZONTAL) {\n            this._posPropertyName = 'x';\n            this._sizePropertyName = 'width';\n        }\n    }\n\n    /**\n     * @param {number} childIndex\n     * @returns {PIXI.Point}\n     */\n    getChildPositionAt(childIndex) {\n        return this.getChildPosition(this.getChildAt(childIndex));\n    }\n\n    /**\n     * @param {PIXI.DisplayObject} child\n     * @returns {PIXI.Point}\n     */\n    getChildPosition(child) {\n        return new PIXI.Point(this.x - this.pivot.x + child.x - child.pivot.x, this.y - this.pivot.y + child.y - child.pivot.y);\n    }\n\n    update(game) {\n        super.update(game);\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.children.length; index++) {\n            this.children[index][this._posPropertyName] = pos;\n            pos += this.children[index][this._sizePropertyName] + this.childMargin;\n        }\n    }\n}\n\nLinearLayout.ORIENTATION_VERTICAL = 1;\nLinearLayout.ORIENTATION_HORIZONTAL = 2;","export var Debug = {\n    textConfig: {\n        fontSize: 14,\n        fontFamily: 'Consolas',\n        fill: 0\n    }\n};\n\nexport var BigText = {\n    textConfig: {\n        fontSize: 72,\n        fontFamily: 'Verdana',\n        fill: 0xffff00,\n        stroke: 0xef0000,\n        strokeThickness: 8,\n        fontVariant: 'small-caps',\n        fontWeight: 900\n    }\n};","import PIXI from 'pixi.js';\nimport {Debug} from '../../Config';\n\nexport default class GUICombosList extends PIXI.Text {\n    \n    constructor() {\n        super('', Debug.textConfig);\n    }\n\n    update(game) {\n        this.text = game.getCardComboList().toString();\n    }\n}","let keyboardState = new Map();\nlet lastKeyboardState = new Map();\nconst keyboardEventHandlers = new Map();\nconst Keyboard = {\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPS_LOCK: 20,\n  ESCAPE: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n  INSERT: 45,\n  DELETE: 46,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n  LEFT_WINDOW_KEY: 91,\n  RIGHT_WINDOW_KEY: 92,\n  SELECT_KEY: 93,\n  NUMPAD_0: 96,\n  NUMPAD_1: 97,\n  NUMPAD_2: 98,\n  NUMPAD_3: 99,\n  NUMPAD_4: 100,\n  NUMPAD_5: 101,\n  NUMPAD_6: 102,\n  NUMPAD_7: 103,\n  NUMPAD_8: 104,\n  NUMPAD_9: 105,\n  MULTIPLY: 106,\n  ADD: 107,\n  SUBTRACT: 109,\n  DECIMAL_POINT: 110,\n  DIVIDE: 111,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  NUM_LOCK: 144,\n  SCROLL_LOCK: 145,\n  SEMI_COLON: 186,\n  EQUAL_SIGN: 187,\n  COMMA: 188,\n  DASH: 189,\n  PERIOD: 190,\n  FORWARD_SLASH: 191,\n  GRAVE_ACCENT: 192,\n  OPEN_BRACKET: 219,\n  BACK_SLASH: 220,\n  CLOSE_BRAKET: 221,\n  SINGLE_QUOTE: 222,\n  isKeyDown(keyCode) {\n    return !!keyboardState.get(keyCode);\n  },\n  isKeyUp(keyCode) {\n    return !keyboardState.get(keyCode);\n  },\n  isKeyReleased(keyCode) {\n    return Keyboard.isKeyUp(keyCode) && lastKeyboardState.get(keyCode);\n  },\n  isKeyPushed(keyCode) {\n    return Keyboard.isKeyDown(keyCode) && !lastKeyboardState.get(keyCode);\n  },\n  update() {\n    lastKeyboardState = keyboardState;\n    keyboardState = new Map(lastKeyboardState);\n  }\n};\n// Keep state of all action\nwindow.addEventListener('keyup', function (event) {\n    keyboardState.set(event.keyCode, false);\n});\nwindow.addEventListener('keydown', function (event) {\n    keyboardState.set(event.keyCode, true);\n});\n\nexport default Keyboard;","import PIXI from 'pixi.js';\nimport Keyboard from '../lib/Keyboard';\nimport Game from '../Game';\n\nimport CardsGenerator from '../CardsGenerator';\n\nexport default class GUICardSelector extends PIXI.Graphics {\n    constructor(x, y) {\n        super();\n        const WIDTH = 20;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(3, 0, 1)\n            .moveTo(WIDTH/2,0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT)\n            .lineTo(0, HEIGHT)\n            .lineTo(WIDTH/2,0)\n            .endFill();\n        this.pivot.set(WIDTH / 2, 0);\n        this.originalY = y;\n        if (x) this.x = x;\n        if (y) this.y = y;\n        this.setCursorCardIndex(game, 0);\n    }\n\n    setCursorCardIndex(game, index) {\n        const river = game.river;\n        if (index < 0) index = 4;\n        if (index > river.cardSlots - 1) index = 0;\n        this.index = index;\n        const p = game.river.getCardPositionAt(index);\n        this.x = p.x + CardsGenerator.CARD_WIDTH / 2;\n        this.y = p.y + CardsGenerator.CARD_HEIGHT + 20;\n    }\n\n    /**\n     * @param {Game} game\n     */\n    update(game) {\n        this.y += Math.cos(game._frame / 10);\n        \n        if (Keyboard.isKeyPushed(Keyboard.LEFT_ARROW)) {\n            this.setCursorCardIndex(game, this.index - 1);\n        } else if (Keyboard.isKeyPushed(Keyboard.RIGHT_ARROW)) {\n            this.setCursorCardIndex(game, this.index + 1);    \n        } else if (Keyboard.isKeyPushed(Keyboard.UP_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, true);\n            } else {\n                game.river.setSelectedCardIndex(this.index, true);\n            }\n        } else if (Keyboard.isKeyPushed(Keyboard.DOWN_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, false);\n            } else {\n                game.river.setSelectedCardIndex(this.index, false);\n            }\n            \n        } else if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n            this.destroy();\n        }\n    }\n}","import PIXI from 'pixi.js';\n\nexport default class Timer {\n    constructor(targetedTime, ticker = PIXI.ticker.shared) {\n        this.target = targetedTime;\n        this.time = 0;\n        this.ticker = ticker;\n        this.isStarted = false;\n    }\n\n    destroy() {\n        this.stop();\n        this.ticker = null;\n    }\n\n    set(targetedTime) {\n        this.target = targetedTime || 0;\n        this.time = 0;\n    }\n\n    reset() {\n        this.time = 0;\n    }\n\n    start() {\n        if (!this.isStarted) {\n            this.ticker.add(this.tick, this);\n            this.isStarted = true;\n        }\n    }\n\n    stop() {\n        if (this.isStarted) {\n            this.ticker.remove(this.tick, this)\n            this.isStarted = false;\n        }\n    }\n\n    tick() {\n        this.time += this.ticker.elapsedMS;\n    }\n\n    delta() {\n        return this.target - this.time;\n    }\n\n}\n","import BezierEasing from './BezierEasing';\nimport Timer from '../lib/Timer';\n\nexport default class TransformAnimation {\n    /**\n     * @param {Object} options\n     * @param {PIXI.Point} options.posFrom\n     * @param {PIXI.Point} options.posTo\n     * @param {PIXI.Point} options.pivot\n     * @param {number} options.scaleFrom\n     * @param {number} options.scaleTo\n     * @param {number} options.rotationFrom\n     * @param {number} options.rotationTo\n     * @param {number} options.timeFrom\n     * @param {number} options.duration\n     * @param {Function} options.callback\n    */\n    constructor(options) {\n        this.posFrom = options.posFrom || null;\n        this.posTo = options.posTo || null;\n        this.scaleFrom = !isNaN(options.scaleFrom) ? +options.scaleFrom : 1;\n        this.scaleTo = !isNaN(options.scaleTo) ? +options.scaleTo : 1;\n        this.rotationFrom = !isNaN(options.rotationFrom) ? +options.rotationFrom : 0;\n        this.rotationTo = !isNaN(options.rotationTo) ? +options.rotationTo : 0;\n        this.alphaFrom = !isNaN(options.alphaFrom) ? +options.alphaFrom : 1;\n        this.alphaTo = !isNaN(options.alphaTo) ? +options.alphaTo : 1;\n        this.pivot = options.pivot || new PIXI.Point(0,0);\n\n        this.timer = new Timer(options.duration);\n        this.duration = options.duration;\n        this.callback = options.callback || function () {};\n        this.interpolator = options.interpolator || BezierEasing(0,0,1,1);\n    }\n\n    /**\n     * Destroy all references presents in the animation\n     */\n    destroy() {\n        this.timer.stop();\n        this.timer = null;\n        this.posFrom = this.posTo = this.pivot = null;\n        this.callback = null;\n        this.interpolator = null;\n    }\n\n    /**\n     * Update object position relative to \n     */\n    update(sprite) {\n        if (!this.timer.isStarted) this.timer.start();\n        const rawRatio = Math.min(this.duration, this.timer.time) / this.duration;\n\n        const ratio = Math.max(0, Math.min(1, this.interpolator(rawRatio)));\n        sprite.setTransform(\n            this.posFrom && this.posTo ? this.posFrom.x + (this.posTo.x - this.posFrom.x) * ratio : sprite.x,\n            this.posFrom && this.posTo ? this.posFrom.y + (this.posTo.y - this.posFrom.y) * ratio : sprite.y,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.rotationFrom + (this.rotationTo - this.rotationFrom) * ratio,\n            0,\n            0, \n            this.pivot.x,\n            this.pivot.y\n        );\n        sprite.alpha = this.alphaFrom + (this.alphaTo - this.alphaFrom) * ratio; \n\n        if (rawRatio == 1) {\n            this.callback(sprite);\n        }\n    }\n}","import PIXI from 'pixi.js';\nimport TransformAnimation from './TransformAnimation';\n\nexport default class GUIText extends PIXI.Text {\n    constructor(text, textStyle) {\n        super(text, textStyle);\n        this.tags = [ 'gui' ];\n        this.animation = null;\n    }\n\n    destroy() {\n        this.setAnimation(null);\n        super.destroy();\n    }\n\n    /**\n     * @param {TransformAnimation} animation\n     */\n    setAnimation(animation) {\n        if (this.animation) this.animation.destroy();\n        this.animation = animation;\n    }\n    update() {\n        if (this.animation) this.animation.update(this);\n    }\n}","const isMe = !!localStorage.getItem('isMe');\nconst stopTracking = !!localStorage.getItem('StopTracking') || /localhost\\:8080/.test(location.toString()) || typeof mixpanel === 'undefined';\n\nif (stopTracking) console.log('stop-tracking');\n\nif (isMe) {\n    mixpanel.identify('1');\n}\n\nexport default {\n    /**\n     * @param {String} eventName\n     * @param {Object} properties\n     * @param {Function} callback\n     */\n    track(eventName, properties, callback) {\n        if (stopTracking) return;\n        mixpanel.track(eventName, properties, callback);\n    }\n};\n\n","import {ComboType} from './CardComboList';\nconst translations = {\n    [ComboType.Pair]: 'Paire',\n    [ComboType.ThreeOfAKind]: 'Brelan',\n    [ComboType.FourOfAKind]: 'Carré',\n    [ComboType.FiveOfAKind]: 'Quinte',\n    [ComboType.Flush]: 'Flush',\n    [ComboType.FullHouse]: 'Full',\n    [ComboType.HigherCard]: 'Higher Card',\n    [ComboType.TwoPair]: 'Deux paires'\n};\n\n\nexport default {\n    combo(name, defaultValue) {\n        return translations[name] || defaultValue;\n    }    \n};","import PIXI from 'pixi.js';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport GUIText from '../lib/GUIText';\nimport {CardCombo, ComboType} from '../CardComboList';\nimport i18n from '../i18n';\n\nconst TRANSITION_DURATION = 150;\nconst TRANSITION_DELAY = 1000;\n\nexport default class GUIScoreLayout extends UpdatableContainer {\n    \n    /**\n     * @param {Object} options\n     * @param {Game} options.game\n     * @param {CardCombo} options.playerCombo\n     * @param {CardCombo} options.iaCombo\n     */\n    constructor(options) {\n        super();\n        /** @type {CardCombo} */\n        this.playerCombo = options.playerCombo;\n        /** @type {CardCombo} */\n        this.iaCombo = options.iaCombo || new CardCombo(ComboType.Pair);\n        \n        this.spawnSuitName();\n        this.spawnComparison();\n\n        /** @type {number} */\n        this.rendererWidth = options.game.renderer.width;\n        /** @type {number} */\n        this.rendererHeight = options.game.renderer.height;\n        for (let index = 0; index < this.children.length; index++) {\n            const child = this.children[index];\n            child.x = this.rendererWidth*3/4 + child.width / 2 + 1;\n            child.y = this.rendererHeight / 3;\n            child.alpha = 0;\n        }\n        /** @type {number} */\n        this._lastScoreState = 0;\n        /** @type {number} */\n        this.scoreState = GUIScoreLayout.STATE_TRANSITION_IDLE;\n        /** @type {boolean} */\n        this.isDestroyed = false;\n    }\n    \n    destroy() {\n        super.destroy();\n        this.isDestroyed = true;\n    }\n\n    spawnSuitName() {\n        this.addChild(new GUIText(i18n.combo(this.playerCombo.type, this.playerCombo.getTypeName()), BigText.textConfig));\n    }\n\n    spawnComparison() {\n        //const iaScore = this.iaCombo.getScore();\n        const iaScore = ComboType.Pair;\n        const playerScore = this.playerCombo.type;\n        console.log('playerScore: %s, iaScore: %s', playerScore, iaScore);\n        let comparisonLabel = 'Défaite';\n        if (playerScore > iaScore) {\n            comparisonLabel = 'Victoire';\n        } else if (playerScore === iaScore) {\n            comparisonLabel = 'Égalité';\n        }\n        this.addChild(new GUIText(comparisonLabel, BigText.textConfig));\n    }\n\n    getSuitText() {\n        return this.getChildAt(0);\n    }\n\n    getComparisonText() {\n        return this.getChildAt(1);\n    }\n\n    changeState(state) {\n        this._lastScoreState = this.scoreState;\n        this.scoreState = state;\n    }\n\n    update(game) {\n        super.update(game);\n        switch (this.scoreState) {\n            case GUIScoreLayout.STATE_TRANSITION_IDLE:\n                this.getSuitText().setAnimation(this.getInAnimation(this.getSuitText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(GUIScoreLayout.STATE_TRANSITION_COMPARISON);\n                    }, TRANSITION_DELAY);\n                }));\n                this.changeState(GUIScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case GUIScoreLayout.STATE_TRANSITION_COMPARISON:\n                this.getComparisonText().setAnimation(this.getInAnimation(this.getComparisonText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(GUIScoreLayout.STATE_TRANSITION_COMPARISON_ENDING);\n                    }, TRANSITION_DELAY);\n                }));\n                this.getSuitText().setAnimation(this.getOutAnimation(this.getSuitText()));\n                this.changeState(GUIScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case GUIScoreLayout.STATE_TRANSITION_COMPARISON_ENDING:\n                this.getComparisonText().setAnimation(this.getOutAnimation(this.getComparisonText(), () => {\n                    this.changeState(GUIScoreLayout.STATE_TRANSITION_TERMINATED);\n                }));\n                this.changeState(GUIScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n        }\n    }\n\n    getInAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth/2-sprite.width/2, sprite.y),\n            alphaFrom: 0,\n            alphaTo: 1,\n            duration: TRANSITION_DURATION,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n\n    getOutAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth*1/6-sprite.width/2, sprite.y),\n            alphaFrom: 1,\n            alphaTo: 0,\n            duration: TRANSITION_DURATION,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n}\n\nGUIScoreLayout.STATE_TRANSITION_IDLE = 0;\nGUIScoreLayout.STATE_TRANSITION_SUIT = 1;\nGUIScoreLayout.STATE_TRANSITION_COMPARISON = 2;\nGUIScoreLayout.STATE_TRANSITION_COMPARISON_ENDING = 4;\nGUIScoreLayout.STATE_TRANSITION_TERMINATED = 8;\n","import PIXI from 'pixi.js';\n\nexport default class ContextualBox extends PIXI.Graphics {\n\n    constructor() {\n        super();\n        this._isValid = false;\n    }\n\n    clear() {\n        this.removeChildren();\n    }\n\n    update(game) {\n        if (!this._isValid) {\n            this.drawBox(game);\n            this._isValid=true;\n        }\n    }\n\n    drawBox(game) {}\n\n    invalidate(){\n        this._isValid=false;\n    }\n\n    _drawBox(graphics, rect) {\n        graphics.moveTo(rect.left, rect.top)\n            .lineStyle(1, 0, 1)\n            .beginFill(0x675C53, 1)\n            .lineTo(rect.right, rect.top)\n            .lineTo(rect.right, rect.bottom)\n            .lineTo(rect.left, rect.bottom)\n            .lineTo(rect.left, rect.top)\n            .endFill();\n    }\n}","export default class Rect {\n    constructor(top, right, bottom, left) {\n        this.set(top || 0, right || 0, bottom || 0, left || 0);\n    }\n    \n    set(top, right, bottom, left) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n\n    scale(x, y) {\n        return new Rect(this.top*y,this.right*x,this.bottom*y,this.left*x);\n    }\n}","import ContextualBox from './ContextualBox';\nimport Rect from '../../lib/Rect';\nimport LinearLayout from '../LinearLayout';\nimport {CardCombo} from '../../CardComboList';\nimport i18n from '../../i18n';\n\nexport default class ContextualDisplayer extends ContextualBox {\n\n    constructor() {\n        super();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        const rect = new Rect(0, this.parent.getWidth() * 4/5 - 10, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayControls() {\n        this.removeChildren();\n        const col1 = new LinearLayout({ childMargin: 15 });\n        const col2 = new LinearLayout({ childMargin: 15 });\n        const rows = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: 12,\n            x: 30\n        });\n\n        const textStyle = {\n            fontSize: 16,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 3\n        };\n\n        col1.addChild(new PIXI.Text('\\u25C0 \\u25B6 Déplacer le curseur', textStyle));\n        col1.addChild(new PIXI.Text('\\u2B06 / \\u2B07 Sélectionner une carte', textStyle));\n        col1.updateChildrenPosition();\n\n        col2.addChild(new PIXI.Text('Shift + \\u2B06 / \\u2B07 Sélectionner toutes les cartes', textStyle));\n        col2.addChild(new PIXI.Text('Entrée Changer de carte', textStyle));\n        col1.updateChildrenPosition();\n        col2.updateChildrenPosition();\n        \n        rows.addChild(col1);\n        rows.addChild(col2);\n        rows.updateChildrenPosition();\n\n\n        const label = new PIXI.Text('Sélectionnez les cartes que vous souhaitez échanger.', textStyle);\n        label.x = 30;\n        label.y = 10;\n        this.addChild(label);\n        rows.y = label.y + label.height + 15;\n        this.addChild(rows);\n    }\n\n    /**\n     * @param {CardCombo}\n     */\n    displayCombo(combo) {\n        this.removeChildren();\n        const row = new LinearLayout();\n        row.x = 30;\n\n        const textStyle = {\n            fill: 0xffa172,\n            stroke: 0,\n            strokeThickness: 3,\n            fontSize: 18\n        };\n        \n        row.addChild(new PIXI.Text(`\"${i18n.combo(combo.type, combo.getTypeName())}\"`, textStyle));\n\n        row.updateChildrenPosition();\n        row.y = row.height / 2;\n        this.addChild(row);\n    }\n\n    displayChooseBet() {\n        this.removeChildren();\n        const texts = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL\n        });\n        texts.x = 30;\n\n        const textStyleWhite = {\n            fontSize: 18,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 4\n        };\n        const textStyleOrange = {\n            fontSize: 18,\n            fill: 0xff9763,\n            stroke: 0,\n            strokeThickness: 4\n        };\n\n        texts.addChild(new PIXI.Text('Voulez-vous', textStyleWhite));\n        texts.addChild(new PIXI.Text('doubler', textStyleOrange));\n        texts.addChild(new PIXI.Text('votre mise ?', textStyleWhite));\n\n        texts.updateChildrenPosition();\n        texts.y = texts.height / 2;\n        this.addChild(texts);\n    }\n\n}","import PIXI from 'pixi.js';\n\nexport default class GUICursor extends PIXI.Graphics {\n    \n    constructor() {\n        super();\n        const WIDTH = 15;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(2, 0, 1)\n            .moveTo(0, 0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT/2)\n            .lineTo(0, HEIGHT)\n            .lineTo(0,0)\n            .endFill();\n        this.pivot.set(WIDTH, -HEIGHT/2);\n    }\n\n    update(game) {\n        this.x += Math.cos(game._frame / 10) / 6;\n    }\n\n}","import ContextualBox from './ContextualBox';\nimport Rect from '../../lib/Rect';\nimport GUICursor from './GUICursor';\nimport LinearLayout from '../LinearLayout';\nimport Keyboard from '../../lib/Keyboard';\n\nconst MENU_ITEM_FONT_SIZE = {\n    2: 22\n};\n\nexport default class ContextualMenu extends ContextualBox {\n\n    constructor() {\n        super();\n        /** @type {GUICursor} */\n        this.currentCursor = null;\n        this.currentCursorIndex = 0;\n    }\n\n    removeChildren() {\n        this.currentCursorIndex = 0;\n        if (this.currentCursor) this.currentCursor = null;\n        super.removeChildren();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth()*4/5;\n        const rect = new Rect(0, this.parent.getWidth()*1/5, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayMenu(menuItems) {\n        this.removeChildren();\n        const layout = new LinearLayout();\n        for (let index = 0; index < menuItems.length; index++) {\n            const menuDesc = menuItems[index];\n            const menuitem = new PIXI.Text(menuDesc.label, {\n                fontSize: MENU_ITEM_FONT_SIZE[menuItems.length],\n                fill: 0xffffff,\n                stroke: 0,\n                strokeThickness: 3\n            });\n            menuitem.menuItemIndex = index;\n            menuitem.menuItemCallback = menuDesc.callback;\n            layout.addChild(menuitem);\n        }\n        \n        layout.updateChildrenPosition();\n        layout.x = this.width / 2- layout.width / 2;\n        layout.y = layout.height / 2;\n        this.addChild(layout);\n        this.currentCursor = new GUICursor();\n        this.addChild(this.currentCursor);\n        this.setCursorIndex(0);\n    }\n\n    setCursorIndex(index) {\n        const menuItems = this.getChildAt(0).children;\n        if (index < 0) index = menuItems.length - 1;\n        if (index >= menuItems.length) index = 0;\n        const position = this.getChildAt(0).getChildPositionAt(index);\n        this.currentCursor.y = position.y;\n        this.currentCursor.x = position.x - 15;\n        this.currentCursorIndex = index;\n    }\n    \n    hasCursor() {\n        return this.currentCursor !== null;\n    }\n\n    update(game) {\n        super.update(game);\n        if (this.hasCursor()) {\n            this.currentCursor.update(game);\n            if (Keyboard.isKeyReleased(Keyboard.UP_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex - 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.DOWN_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex + 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.ENTER)) {\n                let item = this.getChildAt(0).getChildAt(this.currentCursorIndex);\n                if (item && item.menuItemCallback) item.menuItemCallback();\n            }\n        }\n    }\n\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport ContextualDisplayer from './contextual-menu/ContextualDisplayer';\nimport ContextualMenu from './contextual-menu/ContextualMenu';\nimport Game from '../Game';\n\nconst MARGIN_HONRIZONTAL = 10;\nconst MARGIN_VERTICAL = 15;\n\nexport default class GUIContext extends UpdatableContainer {\n\n    constructor(x, y, game) {\n        super();\n        /** @type {Game} */\n        this.game = game;\n        this.x = x + MARGIN_HONRIZONTAL;\n        this.y = y - MARGIN_VERTICAL;\n        this.addChild(new ContextualDisplayer());\n        this.addChild(new ContextualMenu());\n    }\n\n    update(game) {\n        this._width = game.renderer.width - MARGIN_HONRIZONTAL * 2;\n        this._height = game.renderer.height - this.y - MARGIN_VERTICAL; \n        super.update(game);\n    }\n\n    getWidth() {\n        return this._width;\n    }\n\n    getHeight() {\n        return this._height;\n    }\n\n    displayControls() {\n        this.getChildAt(0).displayControls();\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayCombo(combo) {\n        this.getChildAt(0).displayCombo(combo);\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayChooseBet() {\n        this.getChildAt(0).displayChooseBet();\n        this.getChildAt(1).displayMenu([\n            {\n                label: 'Yes',\n                callback: () => this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_UP_OR_DOWN)\n            },\n            {\n                label: 'No',\n                callback: () => this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS)\n            }\n        ]);\n    }\n\n    displayMenu() {\n\n    }\n\n}","import PIXI from 'pixi.js';\nimport LinearLayout from '../gui/LinearLayout';\nimport CardsGenerator from '../CardsGenerator';\nimport CardCollection from '../CardCollection';\nimport Card from '../Card';\n\nexport default class AbsCardArea extends LinearLayout {\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} cardSlots\n     */\n    constructor(x, y, cardSlots) {\n        super({ \n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: CardsGenerator.CARD_WIDTH / 10\n        });\n        this.x = x;\n        this.y = y;\n        /** @type {number} */\n        this.cardSlots = cardSlots;\n        /** @type {Card[]} */\n        this.slots = new Array(this.cardSlots);\n        this.updateLayoutPivot();\n    }\n\n    destroyChildren() {\n        this.slots = new Array(this.cardSlots);\n        return super.destroyChildren();\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    removeCardAt(index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        const card = this.slots[index];\n        if (card) {\n            this.removeChild(card);\n            this.slots[index] = null;\n        }\n        return card;\n    }\n\n    /**\n     * @param {Card} card\n     * @returns {Card}\n     */\n    removeCard(card) {\n        return this.removeCardAt(this.slots.indexOf(card));\n    }\n\n    /**\n     * @returns {CardCollection}\n     */\n    getCards() {\n        return new CardCollection(this.slots.slice(0))\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    getCardAt(index) {\n        return this.slots[index];\n    }\n\n    /**\n     * @param {number} index\n     * @returns {PIXI.Point}\n     */\n    getCardPositionAt(index) {\n        return this.getChildPosition(this.getCardAt(index));\n    }\n\n    /**\n     * Find the first empty card slot index\n     * @returns {number}\n     */\n    findFirstEmptySlot() {\n        for (let index = 0; index < this.cardSlots; index++) {\n            if (!this.slots[index]) return index;\n        }\n        return -1;\n    }\n\n    /**\n     * Add a child to the first empty card slot\n     * @param {Card} card\n     */\n    addCard(card) {\n        return this.addCardAt(card, this.findFirstEmptySlot());\n    }\n\n    /**\n     * Add a child to a slot\n     * @param {Card} card\n     * @param {number} index\n     */\n    addCardAt(card, index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        if (this.slots[index]) {\n            this.removeChild(this.slots[index]);\n        }\n        this.slots[index] = card;\n        this.updateChildrenPosition();\n        return super.addChild(card);\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.cardSlots; index++) {\n            const card = this.getCardAt(index);\n            if (card) card[this._posPropertyName] = pos;\n            pos += CardsGenerator.CARD_WIDTH + this.childMargin;\n        }\n    }\n\n    updateLayoutPivot() {\n        const width = this.cardSlots * CardsGenerator.CARD_WIDTH + (this.cardSlots-1) * this.childMargin;\n        this.pivot.set(width / 2, 0);\n    }\n\n    update(game) {}\n\n}","import AbsCardArea from './AbsCardArea';\n\nexport default class CardRiverArea extends AbsCardArea {\n\n    constructor(x, y) {\n        super(x, y, 5);\n        this.selectedCardsToBeChanged = [];\n    }\n\n    setSelectedCardIndex(index, swt) {\n        const card = this.getCardAt(index);\n        const indexOfCard = this.selectedCardsToBeChanged.indexOf(card);\n        const isSelected = indexOfCard > -1;\n        if (isSelected && swt || !isSelected && !swt) return; \n        if (swt) this.selectedCardsToBeChanged.push(card);\n        else this.selectedCardsToBeChanged.splice(indexOfCard, 1);\n        card.y += swt ? -20 : 20;\n    }\n\n}","import UpdatableContainer from './containers/UpdatableContainer';\nimport CardsGenerator from './CardsGenerator';\nimport {CardComboList} from './CardComboList';\nimport LinearLayout from './gui/LinearLayout';\nimport GUICombosList from './gui/debug/GUICombosList';\nimport GUICardSelector from './gui/GUICardSelector';\nimport Keyboard from './lib/Keyboard';\nimport GUIText from './lib/GUIText';\nimport Tracker from './Tracker';\n\nimport GUIScoreLayout from './gui/GUIScoreLayout';\nimport GUIContext from './gui/GUIContext';\n\nimport CardCollection from './CardCollection';\n\nimport AbsCardArea from './containers/AbsCardArea';\nimport CardRiverArea from './containers/CardRiverArea';\n\nconst ticker = PIXI.ticker.shared;//new PIXI.ticker.Ticker();\n\nexport default class Game {\n\n    constructor(options) {\n        this._frame = 0;\n        /** @type {CardCollection} */\n        this.cards = null;\n        /** @type {AbsCardArea} */\n        this.river = null;\n\n        this.gameState = Game.GAME_IDLE;\n        this.playingGameState = Game.STATE_PLAYING_CHOOSE_BET;\n\n        this.fg = new UpdatableContainer();\n        this.gui = new UpdatableContainer();\n        this.renderingContainer = new PIXI.Container();\n        this.renderingContainer.addChild(this.fg);\n        this.renderingContainer.addChild(this.gui);\n        // create renderer\n        const rendererOptions = {\n            transparent: options.transparent || false,\n            autoResize: options.autoResize || false,\n            antialias: options.antialias || false,\n            resolution: options.resolution || 1,\n            clearBeforeRender: true,\n            backgroundColor: options.backgroundColor,\n            roundPixels: options.roundPixels || true\n        }; \n        this.renderer = PIXI.autoDetectRenderer(options.width || 800, options.height || 600, rendererOptions, false);\n        /** @type {HTMLElement} */\n        this.container = null;\n        if (options.container) {\n            this.container = options.container;\n            this.container.appendChild(this.renderer.view);\n        }\n        this.setSize(this.renderer.width, this.renderer.height);\n    }\n\n    destroy() {\n        this.clearGame();\n        this.fg.destroy();\n        this.gui.destroy();\n        this.renderer.destroy();\n        this.fg = null;\n        this.gui = null;\n        this.renderer = null;\n    }\n\n    clearGame() {\n        this.stop();\n        if (this.cards) this.cards.destroy();\n        this.cards = null;\n        this.player = null;\n        this.fg.destroyChildren();\n        this.gui.destroyChildren();\n    }\n\n    newGame() {\n        this.gameState = Game.STATE_IDLE;\n\n        const stageWidth = this.renderer.width;\n        const stageHeight = this.renderer.height;\n        this.river = new CardRiverArea(stageWidth/2, stageHeight/4*2);\n        this.fg.addChild(this.river);\n        const contextualBox = new GUIContext(0, stageHeight * 5/6, this);\n        this.fg.addChild(contextualBox);\n        contextualBox.update(this);\n        this.clearBoard();\n        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n          \n    }\n\n    clearBoard() {\n        this.river.destroyChildren();\n        if (this.cards) this.cards.destroy();\n        this.cards = CardsGenerator.generateCards().shuffle();\n    }\n\n    distribute(count) {\n        \n        // const forcedCards = 0;\n        // [ 3, 2, 1, 0, CardsGenerator.JOKER_VALUE ].forEach(function (value) {\n        //     const card = this.cards.getByValue(value);\n        //     this.river.addChild(card);\n        //     this.cards.remove(card);\n        // }, this);\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(2);\n        // //     if (i > 3) card = this.cards.getByValue(4);\n        // //     this.river.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(i + 1);\n        // //     this.river.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n\n        for (let index = 0; index < count; index++) {\n            let card = this.cards.peek();\n            this.river.addCard(card);\n            this.cards.remove(card);\n        }\n    }\n\n    displayCardCursorSelection() {\n        const p = this.river.getCardAt(0);\n        this.gui.addChild(new GUICardSelector(p.x + CardsGenerator.CARD_WIDTH / 2, p.y + CardsGenerator.CARD_HEIGHT + 25));\n    }\n\n    setState(state) {\n        this.gameState = state;\n    }\n\n    setPlayingState(state) {\n        this.playingGameState = state;\n        switch (state) {\n            case Game.STATE_PLAYING_CHOOSE_CARDS:\n                Tracker.track('game:new');\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayControls();\n                this.clearBoard();\n                this.distribute(5);\n                this.displayCardCursorSelection();\n                break;\n            case Game.STATE_PLAYING_DISPLAY_RIVER_SCORE:\n                this.commitChanges();\n                const combo = this.getCardComboList().getHigherCombo();\n                combo.getCards().forEach(function (d) {\n                    d.highlight();\n                });\n                Tracker.track('combo', {\n                    type: combo.getTypeName(),\n                    cards: combo.getCards().map(String)\n                });\n                this.fg.findChildrenByType(GUIContext).displayCombo(combo);\n                this.gui.addChild(new GUIScoreLayout({\n                    playerCombo: combo,\n                    game: this\n                }));\n                \n                break;\n            case Game.STATE_PLAYING_CHOOSE_RISK:\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayChooseBet();\n                break;\n            \n        }\n    }\n\n    getFPS() {\n        return ticker.FPS;\n    }\n\n    isRunning() {\n        return ticker.started;\n    }\n\n    isPlaying() {\n        return this.gameState === Game.GAME_PLAYING;\n    }\n\n    getSize() {\n        return { width: this.renderer.width, height: this.renderer.height };\n    }\n\n    setSize(w, h) {\n        if (this.container) {\n            this.container.style.width = `${w}px`;\n            this.container.style.height = `${h}px`;\n        }\n        if (this.renderer.width !== w || this.renderer.height !== h) {\n            this.renderer.resize(w, h);\n        }\n    }\n\n    start() {\n        if (!this.isRunning()) {\n            if (this.gameState === Game.GAME_IDLE) {\n                this.setState(Game.STATE_PLAYING);\n            }\n            ticker.add(this.loop, this);\n            ticker.start();\n        }\n    }\n\n    stop() {\n        if (this.isRunning()) {\n            ticker.stop();\n            ticker.remove(this.loop, this);\n        }\n    }\n\n    loop(time) {\n        this._frame += 1;\n\n        this.fg.update(this);\n        this.gui.update(this);\n        if (this.gameState === Game.STATE_PLAYING) {\n            if (this.playingGameState === Game.STATE_PLAYING_CHOOSE_CARDS) {\n                if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    this.setPlayingState(Game.STATE_PLAYING_DISPLAY_RIVER_SCORE);\n                }\n            } else if (this.playingGameState === Game.STATE_PLAYING_DISPLAY_RIVER_SCORE) {\n                let scoreLayout = this.gui.findChildrenByType(GUIScoreLayout);  \n                if (scoreLayout.scoreState === GUIScoreLayout.STATE_TRANSITION_TERMINATED || Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    if (scoreLayout.playerCombo.type > 2) {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_RISK);\n                    } else {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n                    }\n                }\n            }\n        }\n\n        if (this.gameState === Game.STATE_IDLE) {\n            this.gameState = Game.STATE_PLAYING;\n            this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n        }\n\n        this.renderer.render(this.renderingContainer);\n        Keyboard.update();\n    }\n\n    getCardComboList() {\n        return new CardComboList(this.river.getCards());\n    }\n\n    commitChanges() {\n        const cards = this.river.selectedCardsToBeChanged.splice(0, this.river.selectedCardsToBeChanged.length);\n        const cardsLen = cards.length;\n        for (let index = 0; index < cardsLen; index++) {\n            this.river.removeCard(cards[index]);\n            cards[index].destroy(); \n        }\n        this.distribute(cardsLen);\n    }\n\n\n    /**\n     * \n     * @param {Function} GuiClass - The GuiClass to instantiate\n     * @param {boolean=} swt - true will create an instance if it doesnt exists, false will destroy it\n     */\n    toggleGuiElementPresence(GuiClass, swt) {\n        let instance = this.gui.children.find((d) => d instanceof GuiClass);\n        if (typeof swt === 'undefined') swt = !instance;\n        if (!instance && swt) {\n            instance = new GuiClass();\n            this.gui.addChild(instance);\n        } else if (instance && !swt) {\n            instance.destroy();\n        }\n    }\n\n};\n\nGame.STATE_IDLE = 0;\nGame.STATE_INTRO = 1;\nGame.STATE_PLAYING = 2;\nGame.STATE_GAMEOVER = 4;\n\nGame.STATE_PLAYING_CHOOSE_BET = 1;\nGame.STATE_PLAYING_CHOOSE_CARDS = 2;\nGame.STATE_PLAYING_EXCHANGE_CARD_TRANSITION = 4;\nGame.STATE_PLAYING_DISPLAY_RIVER_SCORE = 8;\nGame.STATE_PLAYING_CHOOSE_RISK = 16;\nGame.STATE_PLAYING_CHOOSE_UP_OR_DOWN = 32;\nGame.STATE_PLAYING_UP_OR_DOWN_SCORE = 64;\n\n","import Game from './Game';\nimport Card from './Card';\nimport Tracker from './Tracker';\nimport {version} from '../package.json';\n\nGame.VERSION = version;\nGame.BUILD_TIME = '{BUILD_TIME}';\n\nTracker.track('pageview');\n\nexport default {\n    Game\n};"],"names":["UpdatableContainer","game","updateChildren","children","forEach","d","destroy","removeChildren","child","update","Type","find","filter","PIXI","Container","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","Card","options","value","suit","width","height","originalWidth","originalHeight","drawBackground","valueText","Text","getValue","suitText","getSuit","isHighlighted","y","anchor","set","addChild","shadowSteps","clear","lineStyle","beginFill","drawRoundedRect","endFill","CardsGenerator","JOKER_VALUE","JOKER","SUITS","VALUE_LABELS","Graphics","CardCollection","arrayOfCard","isArray","cards","slice","push","card","index","indexOf","splice","c","output","input","toArray","length","floor","random","toString","suitIndex","valueIndex","CARD_WIDTH","CARD_HEIGHT","_identity","array","predicate","ids","id","a","b","min","max","ComboType","CardComboList","cardsCollection","originalCollection","combos","_parse","objects","add","object","cardCombo","CardCombo","sort","type","HigherCard","_getHigherCard","addAll","_getXOfAKind","twoPairsCombo","_getTwoPairs","straightCombo","_getStraight","flushCombo","_getFlush","fullHouseCombo","_getFullHouse","straightFlushCombo","_getStraightFlush","Numbers","Compare","desc","getScore","pairs","combo","Pair","_isAllCardDifferents","TwoPair","concat","map","comboTypeMapper","ThreeOfAKind","FourOfAKind","FiveOfAKind","cardIndex","localeCards","isJoker","Arrays","uniq","getId","pair","threeOfAKind","FullHouse","getCards","values","asc","jokers","match","Straight","black","red","test","Flush","flush","straight","StraightFlush","c1","c2","c1Cards","c2Cards","i1","i2","join","peek","_sortCards","out","keys","Object","key","getTypeName","LinearLayout","childMargin","setOrientation","orientation","ORIENTATION_VERTICAL","_orientation","_posPropertyName","_sizePropertyName","ORIENTATION_HORIZONTAL","childIndex","getChildPosition","getChildAt","Point","pivot","updateChildrenPosition","pos","Debug","BigText","GUICombosList","textConfig","text","getCardComboList","keyboardState","Map","lastKeyboardState","Keyboard","keyCode","get","isKeyUp","isKeyDown","window","addEventListener","event","GUICardSelector","WIDTH","HEIGHT","moveTo","lineTo","originalY","setCursorCardIndex","river","cardSlots","p","getCardPositionAt","cos","_frame","isKeyPushed","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","SHIFT","setSelectedCardIndex","DOWN_ARROW","ENTER","Timer","targetedTime","ticker","shared","target","time","isStarted","stop","tick","remove","elapsedMS","TransformAnimation","posFrom","posTo","scaleFrom","isNaN","scaleTo","rotationFrom","rotationTo","alphaFrom","alphaTo","timer","duration","callback","interpolator","sprite","start","rawRatio","ratio","setTransform","alpha","GUIText","textStyle","tags","animation","setAnimation","isMe","localStorage","getItem","stopTracking","location","mixpanel","console","log","identify","eventName","properties","track","translations","name","defaultValue","TRANSITION_DURATION","TRANSITION_DELAY","GUIScoreLayout","playerCombo","iaCombo","spawnSuitName","spawnComparison","rendererWidth","renderer","rendererHeight","_lastScoreState","scoreState","STATE_TRANSITION_IDLE","isDestroyed","i18n","iaScore","playerScore","comparisonLabel","state","getSuitText","getInAnimation","changeState","STATE_TRANSITION_COMPARISON","STATE_TRANSITION_SUIT","getComparisonText","STATE_TRANSITION_COMPARISON_ENDING","getOutAnimation","STATE_TRANSITION_TERMINATED","ContextualBox","_isValid","drawBox","graphics","rect","left","top","right","bottom","Rect","ContextualDisplayer","parent","getWidth","getHeight","_drawBox","col1","col2","rows","label","row","texts","textStyleWhite","textStyleOrange","GUICursor","MENU_ITEM_FONT_SIZE","ContextualMenu","currentCursor","currentCursorIndex","menuItems","layout","menuDesc","menuitem","menuItemIndex","menuItemCallback","setCursorIndex","position","getChildPositionAt","hasCursor","isKeyReleased","item","MARGIN_HONRIZONTAL","MARGIN_VERTICAL","GUIContext","_width","_height","displayControls","displayCombo","displayChooseBet","displayMenu","setPlayingState","Game","STATE_PLAYING_CHOOSE_UP_OR_DOWN","STATE_PLAYING_CHOOSE_CARDS","AbsCardArea","slots","updateLayoutPivot","removeChild","removeCardAt","getCardAt","addCardAt","findFirstEmptySlot","CardRiverArea","selectedCardsToBeChanged","swt","indexOfCard","isSelected","gameState","GAME_IDLE","playingGameState","STATE_PLAYING_CHOOSE_BET","fg","gui","renderingContainer","rendererOptions","transparent","autoResize","antialias","resolution","backgroundColor","roundPixels","autoDetectRenderer","container","appendChild","view","setSize","clearGame","player","destroyChildren","STATE_IDLE","stageWidth","stageHeight","contextualBox","clearBoard","generateCards","shuffle","count","addCard","findChildrenByType","distribute","displayCardCursorSelection","STATE_PLAYING_DISPLAY_RIVER_SCORE","commitChanges","getHigherCombo","highlight","String","STATE_PLAYING_CHOOSE_RISK","FPS","started","GAME_PLAYING","w","h","style","resize","isRunning","setState","STATE_PLAYING","loop","scoreLayout","render","cardsLen","removeCard","GuiClass","instance","STATE_INTRO","STATE_GAMEOVER","STATE_PLAYING_EXCHANGE_CARD_TRANSITION","STATE_PLAYING_UP_OR_DOWN_SCORE","VERSION","version","BUILD_TIME","Tracker"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}