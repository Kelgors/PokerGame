{"version":3,"file":"poker_game.js","sources":["src/containers/UpdatableContainer.js","src/lib/BezierEasing.js","src/Card.js","src/CardCollection.js","src/CardsGenerator.js","src/gui/LinearLayout.js","src/PlayerArea.js","src/Arrays.js","src/Numbers.js","src/CardComboList.js","src/Config.js","src/gui/debug/GUICombosList.js","src/lib/Keyboard.js","src/gui/GUICardSelector.js","src/lib/GUIText.js","src/Tracker.js","src/Game.js","src/poker_game.js"],"sourcesContent":["export default class UpdatableContainer extends PIXI.Container {\n    update(game) {\n        this.updateChildren(game);\n    }\n\n    updateChildren(game) {\n        this.children.forEach(function (child) { \n            child.update(game); \n        });\n    }\n}","\n/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n    return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX, currentT, i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        } else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\n\nexport default function bezier(mX1, mY1, mX2, mY2) {\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n        for (var i = 0; i < kSplineTableSize; ++i) {\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    function getTForX(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }--currentSample;\n\n        // Interpolate to provide an initial guess for t\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    return function BezierEasing(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}; ","import PIXI from 'pixi.js';\nimport CardsGenerator from './CardsGenerator';\nimport BezierEasing from './lib/BezierEasing';\n\nexport default class Card extends PIXI.Graphics {\n\n  constructor(options) {\n    super();\n    this.value = options.value;\n    this.suit  = options.suit;\n\n    const width = options.width;\n    const height = options.height;\n    this.originalWidth = options.width;\n    this.originalHeight = options.height;\n    this.drawBackground();\n    const valueText = new PIXI.Text(this.getValue(), {\n      fontSize: 26,\n      textColor: 0,\n      align: 'center',\n    });\n    const suitText = new PIXI.Text(this.getSuit(), {\n      fontSize: 14,\n      textColor: 0,\n      align: 'center'\n    });\n    this.isHighlighted = false;\n    valueText.x = width/2;\n    valueText.y = 30;\n    valueText.anchor.set(0.5,0.5);\n    suitText.x = width/2;\n    suitText.y = height/2;\n    suitText.anchor.set(0.5,0.5);\n    this.addChild(valueText);\n    this.addChild(suitText);\n  }\n\n  drawBackground() {\n    const shadowSteps = 10;\n    this.clear().lineStyle(1, 0x000000, 1)\n      .beginFill(this.suit === 1 || this.suit === 2 ? 0xFF0000 : 0, 0.5)\n      .drawRoundedRect(0, 0, this.originalWidth, this.originalHeight, this.originalWidth/10)\n      .endFill();\n    if (this.isHighlighted) {\n      for (let i = 1; i < shadowSteps; i++) {\n        this.lineStyle(1, 0xffff00, 0.8 - i / shadowSteps)\n          .drawRoundedRect(-i, -i, this.originalWidth+i*2, this.originalHeight+i*2, this.originalWidth/10);\n      }\n      \n    }\n  }\n\n  highlight() {\n    this.isHighlighted = true;\n    this.drawBackground();\n  }\n\n  isJoker() {\n    return this.value === CardsGenerator.JOKER_VALUE;\n  }\n\n  getSuit() {\n    if (this.suit === CardsGenerator.JOKER) return 'Joker';\n    return CardsGenerator.SUITS[this.suit];\n  }\n\n  getValue() {\n    if (this.value === CardsGenerator.JOKER_VALUE) return 'Joker';\n    return CardsGenerator.VALUE_LABELS[this.value];\n  }\n\n  toString() {\n    return `${this.getValue()} of ${this.getSuit()}`;\n  }\n\n}","import Card from './Card';\n\nexport default class CardCollection {\n\n    static from(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) return arrayOfCard;\n        if (Array.isArray(arrayOfCard)) return new CardCollection(arrayOfCard);\n        return new CardCollection();\n    }\n\n    constructor(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) {\n            this.cards = arrayOfCard.cards.slice(0);\n        } else if (Array.isArray(arrayOfCard)) {\n            this.cards = arrayOfCard;\n        } else {\n            this.cards = [];\n        }\n    }\n\n    /**\n     * @param {Card[]} cards\n     */\n    addAll(cards) {\n        this.cards.push(...cards);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    add(card) {\n        this.cards.push(card);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    remove(card) {\n        let index;\n        if ((index = this.cards.indexOf(card)) > -1) {\n            return this.cards.splice(index, 1)[0];\n        }\n        return null;\n    }\n\n    /**\n     * @param {number} suit\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getBySuitAndValue(suit, value) {\n        return this.cards.find((c) => c.value === value && c.suit === suit);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getByValue(value) {\n        return this.cards.find((c) => c.value === value);\n    }\n\n    /**\n     * @param {number} suit\n     * @returns {Card} card\n     */\n    getBySuit(suit) {\n        return this.cards.find((c) => c.suit === suit);\n    }\n\n    /**\n     * @returns {Card} card\n     */\n    peek() {\n        return this.cards[0];\n    }\n\n    shuffle() {\n        const output = [];\n        const input = this.toArray();\n        while (input.length > 0) {\n            let index = Math.floor(Math.random() * input.length);\n            output.push(input.splice(index, 1)[0]);\n        }\n        this.cards = output;\n        return this;\n    }\n\n    /**\n     * @returns {Card[]}\n     */\n    toArray() {\n        return this.cards.slice(0);\n    }\n\n    /**\n     * @returns {String}\n     */\n    toString() {\n        return this.cards.toString();\n    }\n};","import CardCollection from './CardCollection';\nimport Card from './Card';\n\nconst CardsGenerator = {\n    CARD_WIDTH: 370 / 4,\n    CARD_HEIGHT: 522 / 4,\n    JOKER: 'Joker',\n    JOKER_VALUE: 13,\n    SUITS: [ 'Spades', 'Hearts', 'Diamonds', 'Clubs' ],\n    VALUE_LABELS: [ '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace' ],\n    generateCards() {\n        const output = [];\n        for (let suitIndex = 0; suitIndex < CardsGenerator.SUITS.length; suitIndex++) {\n            for (let valueIndex = 0; valueIndex < CardsGenerator.VALUE_LABELS.length; valueIndex++) {\n                output.push(new Card({\n                    width: CardsGenerator.CARD_WIDTH,\n                    height: CardsGenerator.CARD_HEIGHT,\n                    suit: suitIndex,\n                    value: valueIndex\n                }));\n            }\n        }\n        for (let index = 0; index < 2; index++) {\n            output.push(new Card({ \n                width: CardsGenerator.CARD_WIDTH,\n                height: CardsGenerator.CARD_HEIGHT,\n                suit: CardsGenerator.JOKER,\n                value: CardsGenerator.JOKER_VALUE\n            }));\n        }\n        return new CardCollection(output);\n    }\n};\n\nexport default CardsGenerator;\n","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\n\nexport default class LinearLayout extends UpdatableContainer {\n    constructor(options = {}) {\n        super();\n        this.childMargin = 0;\n        if ('x' in options) this.x = options.x;\n        if ('y' in options) this.y = options.y;\n        if ('childMargin' in options) this.childMargin = options.childMargin;\n        this.setOrientation(options.orientation || LinearLayout.ORIENTATION_VERTICAL);\n    }\n\n    setOrientation(orientation) {\n        this._orientation = orientation;\n        if (orientation === LinearLayout.ORIENTATION_VERTICAL) {\n            this._posPropertyName = 'y';\n            this._sizePropertyName = 'height';\n        } else if (orientation === LinearLayout.ORIENTATION_HORIZONTAL) {\n            this._posPropertyName = 'x';\n            this._sizePropertyName = 'width';\n        }\n    }\n\n    getChildPosition(childIndex) {\n        const child = this.getChildAt(childIndex);\n        return new PIXI.Point(this.x - this.pivot.x + child.x - child.pivot.x, this.y - this.pivot.y + child.y - child.pivot.y);\n    }\n\n    update(game) {\n        super.update(game);\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.children.length; index++) {\n            this.children[index][this._posPropertyName] = pos;\n            pos += this.children[index][this._sizePropertyName] + this.childMargin;\n        }\n    }\n}\n\nLinearLayout.ORIENTATION_VERTICAL = 1;\nLinearLayout.ORIENTATION_HORIZONTAL = 2;","import CardsGenerator from './CardsGenerator';\nimport CardCollection from './CardCollection';\nimport LinearLayout from './gui/LinearLayout';\n\nexport default class PlayerArea extends LinearLayout {\n    constructor(x, y) {\n        super({ \n            x, y, \n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: 17\n        });\n\n        this.selectedCardsToBeChanged = [];\n    }\n\n    addChild(...card) {\n        const out = super.addChild(...card);\n        this.updateChildrenPosition();\n        this.pivot.set(this.width/2, this.height/2);\n        return out;\n    }\n\n    update(game) {}\n\n    getCards() {\n        return new CardCollection(this.children.slice(0));\n    }\n\n    setSelectedCardIndex(index, swt) {\n        const card = this.getChildAt(index);\n        const indexOfCard = this.selectedCardsToBeChanged.indexOf(card)\n        const isSelected = indexOfCard > -1;\n        if (isSelected && swt || !isSelected && !swt) return; \n        if (swt) this.selectedCardsToBeChanged.push(card);\n        else this.selectedCardsToBeChanged.splice(indexOfCard, 1);\n        card.y += swt ? -20 : 20;\n    }\n    \n}","function _identity(d) {return d;}\nexport default {\n  uniq(array, predicate = _identity) {\n    var output = [];\n    var ids = [];\n    array.forEach(function (d) {\n      const id = predicate(d);\n      if (ids.indexOf(id) === -1) {\n        output.push(d);\n        ids.push(id);\n      }\n    });\n    return output;\n  }\n};","export default {\n    Compare: {\n        asc(a, b) {\n            if (a > b) return 1;\n            if (a < b) return -1;\n            return 0;\n        },\n        desc(a, b) {\n            if (a > b) return -1;\n            if (a < b) return 1;\n            return 0;\n        }\n    },\n    clamp(value, min, max) {\n        return Math.max(Math.min(value, max), min);\n    }\n};","import CardCollection from './CardCollection';\nimport Arrays from './Arrays';\nimport Numbers from './Numbers';\n\nexport var ComboType = {\n    HigherCard: 1,\n    Pair: 2,\n    TwoPair: 3,\n    ThreeOfAKind: 4,\n    Straight: 5,\n    Flush: 6,\n    FullHouse: 7,\n    FourOfAKind: 8,\n    StraightFlush: 9,\n    FiveOfAKind: 10\n};\n\nexport class CardComboList {\n    \n    /**\n     * @param {CardCollection} cardsCollection\n     */\n    constructor(cardsCollection) {\n        this.originalCollection = cardsCollection;\n        this.combos = [];\n        this._parse(cardsCollection);\n    }\n\n    addAll(objects) {\n        objects.forEach((d) => this.add(d));\n    }\n\n    add(object) {\n        let cardCombo;\n        if (!(object instanceof CardCombo)) {\n            cardCombo = new CardCombo(object);\n        } else cardCombo = object;\n        this.combos.push(cardCombo);\n        return this;\n    }\n\n    getHigherCombo() {\n        return this.combos.sort((a, b) => {\n            if (a.type > b.type) return -1;\n            if (a.type < b.type) return 1;\n            return 0;\n        })[0];\n    }\n\n    _parse() {\n        // 1- HigherCard\n        this.add({ type: ComboType.HigherCard, card: this._getHigherCard() });\n        // 2 - Pair\n        // 4 - ThreeOfAKind\n        // 8 - FourOfAKind\n        // 10 - FiveOfAKind\n        this.addAll(this._getXOfAKind());\n        // 3 - TwoPair\n        const twoPairsCombo = this._getTwoPairs();\n        if (twoPairsCombo) this.add(twoPairsCombo);\n        // 5 - Straight\n        const straightCombo = this._getStraight();\n        if (straightCombo) this.add(straightCombo);\n        // 6 - Flush\n        const flushCombo = this._getFlush();\n        if (flushCombo) this.add(flushCombo);\n        // 7 - FullHouse\n        const fullHouseCombo = this._getFullHouse();\n        if (fullHouseCombo) this.add(fullHouseCombo);\n        // 9 - StraightFlush\n        const straightFlushCombo = this._getStraightFlush();\n        if (straightFlushCombo) this.add(straightFlushCombo);\n        \n        this.combos.sort((a, b) => Numbers.Compare.desc(a.getScore(), b.getScore()));\n    }\n\n    _getHigherCard() {\n        const cards = this.originalCollection.toArray();\n        return cards.sort((a, b) => {\n            if (a.value > b.value) return -1;\n            if (a.value < b.value) return 1;\n            return 0;\n        })[0];\n    }\n\n    _getTwoPairs() {\n        const pairs = [];\n        this.combos.forEach(function (combo) {\n            if (combo.type === ComboType.Pair) pairs.push(combo);\n        });\n        if (pairs.length === 2 && this._isAllCardDifferents(pairs[0], pairs[1])) {\n\n            return new CardCombo({\n                type: ComboType.TwoPair,\n                cards: [].concat(...pairs.map((d) => d.cards.toArray()))\n            });\n        }\n    }\n\n    _getXOfAKind() {\n        const cards = this.originalCollection.toArray();\n        const combos = [];\n        const comboTypeMapper = {\n            2: ComboType.Pair,\n            3: ComboType.ThreeOfAKind,\n            4: ComboType.FourOfAKind,\n            5: ComboType.FiveOfAKind\n        };\n        cards.forEach((card, cardIndex, cards) => {\n            const localeCards = [ card ];\n            for (let index = 0; index < cards.length; index++) {\n                if (card !== cards[index] && (card.value === cards[index].value || cards[index].isJoker())) {\n                    localeCards.push(cards[index]);\n                }\n            }\n            if (localeCards.length > 1 && localeCards.length < 6) {\n                combos.push(new CardCombo({\n                    type: comboTypeMapper[localeCards.length],\n                    cards: localeCards\n                }));\n            }\n        });\n        return Arrays.uniq(combos, (d) => d.getId());\n    }\n\n    _getFullHouse() {\n        const pair = this.combos.find((d) => d.type === ComboType.Pair);\n        const threeOfAKind = this.combos.find((d) => d.type === ComboType.ThreeOfAKind);\n        if (pair && threeOfAKind && this._isAllCardDifferents(pair, threeOfAKind)) {\n            return new CardCombo({\n                type: ComboType.FullHouse,\n                cards: [].concat(pair.getCards(), threeOfAKind.getCards())\n            });\n        }\n    }\n\n    _getStraight() {\n        const cards = this.originalCollection.toArray();\n        const values = cards.map((d) => d.value).sort(Numbers.Compare.asc);\n        let jokers = cards.filter((d) => d.isJoker()).length;\n        for (let index = 1, value = values[0]; index < values.length; index++) {\n            const match = value + 1 === values[index];\n            if (!match && jokers === 0) return;\n            if (!match) jokers--;\n            value++;\n        }\n        return new CardCombo({\n            type: ComboType.Straight,\n            cards: cards\n        });\n    }\n\n    _getFlush() {\n        const cards = this.originalCollection.toArray();\n        let black = 0, red = 0;\n        for (let index = 0; index < cards.length; index++) {\n            if (cards[index].isJoker()) {\n                black++;\n                red++;\n            } else if (/Spades|Clubs/.test(cards[index].getSuit())) {\n                black++;\n            } else red++;\n        }\n        if (black === cards.length || red === cards.length) {\n            return new CardCombo({\n                type: ComboType.Flush,\n                cards: cards\n            });\n        } \n    }\n\n    _getStraightFlush() {\n        const flush = this.combos.find((d) => d.type === ComboType.Flush);\n        const straight = this.combos.find((d) => d.type === ComboType.Straight);\n        if (flush && straight) {\n            return new CardCombo({\n                type: ComboType.StraightFlush,\n                cards: flush.getCards()\n            });\n        }\n    }\n\n    /**\n     * @param {Combo} c1\n     * @param {Combo} c2\n     * @returns {boolean}\n     */\n    _isAllCardDifferents(c1, c2) {\n        const c1Cards = c1.getCards();\n        const c2Cards = c2.getCards();\n        for (let i1 = 0; i1 < c1Cards.length; i1++)\n            for (let i2 = 0; i2 < c2Cards.length; i2++)\n                if (c1Cards[i1] === c2Cards[i2]) return false;\n        return true;\n    }\n\n    toString() {\n        return this.combos.join('\\n');\n    }\n\n}\n// TODO: TEST K 4 4 K J\nexport class CardCombo {\n\n    constructor(object) {\n        this.type = object.type;\n        this.cards = new CardCollection();\n        if (object.cards) this.cards.addAll(object.cards);\n        else if (object.card) this.cards.add(object.card);\n        this.getCards().sort((a, b) => Numbers.Compare.asc(a.value, b.value));\n    }\n\n    getCard() { return this.cards.peek(); }\n    getCards() { return this.cards.cards; }\n\n    _sortCards() {\n        this.getCards().sort((a, b) => { return Numbers.Compare.asc(a.suit, b.suit); });\n    }\n    \n    getId() {\n        this._sortCards();\n        return this.getCards().map((d) => `${d.value}&${d.suit}`).join('/');\n    }\n\n    getScore() {\n        const cards = this.getCards();\n        let out = 0;\n        for (let index = 0; index < cards.length; index++) out += cards[index].value;\n        return out + this.type * 10;\n    }\n\n    getTypeName() {\n        const keys = Object.keys(ComboType);\n        return keys.find((key) => ComboType[key] === this.type);\n    }\n\n    toString() {\n        return `${this.getTypeName()} { ${this.getCards().join(', ')} }`;\n    }\n\n}","export var Debug = {\n    textConfig: {\n        fontSize: 14,\n        fontFamily: 'Consolas',\n        fill: 0\n    }\n};","import PIXI from 'pixi.js';\nimport {Debug} from '../../Config';\n\nexport default class GUICombosList extends PIXI.Text {\n    \n    constructor() {\n        super('', Debug.textConfig);\n    }\n\n    update(game) {\n        this.text = game.getCardComboList().toString();\n    }\n}","let keyboardState = new Map();\nlet lastKeyboardState = new Map();\nconst keyboardEventHandlers = new Map();\nconst Keyboard = {\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPS_LOCK: 20,\n  ESCAPE: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n  INSERT: 45,\n  DELETE: 46,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n  LEFT_WINDOW_KEY: 91,\n  RIGHT_WINDOW_KEY: 92,\n  SELECT_KEY: 93,\n  NUMPAD_0: 96,\n  NUMPAD_1: 97,\n  NUMPAD_2: 98,\n  NUMPAD_3: 99,\n  NUMPAD_4: 100,\n  NUMPAD_5: 101,\n  NUMPAD_6: 102,\n  NUMPAD_7: 103,\n  NUMPAD_8: 104,\n  NUMPAD_9: 105,\n  MULTIPLY: 106,\n  ADD: 107,\n  SUBTRACT: 109,\n  DECIMAL_POINT: 110,\n  DIVIDE: 111,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  NUM_LOCK: 144,\n  SCROLL_LOCK: 145,\n  SEMI_COLON: 186,\n  EQUAL_SIGN: 187,\n  COMMA: 188,\n  DASH: 189,\n  PERIOD: 190,\n  FORWARD_SLASH: 191,\n  GRAVE_ACCENT: 192,\n  OPEN_BRACKET: 219,\n  BACK_SLASH: 220,\n  CLOSE_BRAKET: 221,\n  SINGLE_QUOTE: 222,\n  isKeyDown(keyCode) {\n    return !!keyboardState.get(keyCode);\n  },\n  isKeyUp(keyCode) {\n    return !keyboardState.get(keyCode);\n  },\n  isKeyReleased(keyCode) {\n    return Keyboard.isKeyUp(keyCode) && lastKeyboardState.get(keyCode);\n  },\n  isKeyPushed(keyCode) {\n    return Keyboard.isKeyDown(keyCode) && !lastKeyboardState.get(keyCode);\n  },\n  update() {\n    lastKeyboardState = keyboardState;\n    keyboardState = new Map(lastKeyboardState);\n  }\n};\n// Keep state of all action\nwindow.addEventListener('keyup', function (event) {\n    keyboardState.set(event.keyCode, false);\n});\nwindow.addEventListener('keydown', function (event) {\n    keyboardState.set(event.keyCode, true);\n});\n\nexport default Keyboard;","import PIXI from 'pixi.js';\nimport Keyboard from '../lib/Keyboard';\nimport Game from '../Game';\n\nimport CardsGenerator from '../CardsGenerator';\n\nexport default class GUICardSelector extends PIXI.Graphics {\n    constructor(x, y) {\n        super();\n        const WIDTH = 20;\n        const HEIGHT = WIDTH * 2;\n        this.clear()\n            .lineStyle(3, 0, 1)\n            .moveTo(WIDTH/2,0)\n            .lineTo(WIDTH, HEIGHT)\n            .lineTo(0, HEIGHT)\n            .lineTo(WIDTH/2,0);\n        this.pivot.set(WIDTH / 2, 0);\n        this.originalY = y;\n        if (x) this.x = x;\n        if (y) this.y = y;\n        this.setCursorCardIndex(game, 0);\n    }\n\n    setCursorCardIndex(game, index) {\n        if (index < 0 || index > 4) return;\n        this.index = index;\n        const p = game.player.getChildPosition(index);\n        this.x = p.x + CardsGenerator.CARD_WIDTH / 2;\n    }\n\n    /**\n     * @param {Game} game\n     */\n    update(game) {\n        this.y += Math.cos(game._frame / 10);\n        \n        if (Keyboard.isKeyPushed(Keyboard.LEFT_ARROW)) {\n            this.setCursorCardIndex(game, this.index - 1);\n        } else if (Keyboard.isKeyPushed(Keyboard.RIGHT_ARROW)) {\n            this.setCursorCardIndex(game, this.index + 1);\n        } else if (Keyboard.isKeyPushed(Keyboard.UP_ARROW)) {\n            game.player.setSelectedCardIndex(this.index, true);\n        } else if (Keyboard.isKeyPushed(Keyboard.DOWN_ARROW)) {\n            game.player.setSelectedCardIndex(this.index, false);\n        } else if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n            this.destroy();\n        }\n    }\n}","import PIXI from 'pixi.js';\n\nexport default class GUIText extends PIXI.Text {\n    constructor(text, textStyle) {\n        super(text, textStyle);\n        this.tags = [ 'gui' ];\n    }\n    update() {}\n}","const isMe = !!localStorage.getItem('isMe');\nconst stopTracking = !!localStorage.getItem('StopTracking') || /localhost\\:8080/.test(location.toString()) || typeof mixpanel === 'undefined';\n\nif (stopTracking) console.log('stop-tracking');\n\nif (isMe) {\n    mixpanel.identify('1');\n}\n\nexport default {\n    /**\n     * @param {String} eventName\n     * @param {Object} properties\n     * @param {Function} callback\n     */\n    track(eventName, properties, callback) {\n        if (stopTracking) return;\n        mixpanel.track(eventName, properties, callback);\n    }\n};\n\n","import UpdatableContainer from './containers/UpdatableContainer';\nimport CardsGenerator from './CardsGenerator';\nimport PlayerArea from './PlayerArea';\nimport {CardComboList} from './CardComboList';\nimport LinearLayout from './gui/LinearLayout';\nimport GUICombosList from './gui/debug/GUICombosList';\nimport GUICardSelector from './gui/GUICardSelector';\nimport Keyboard from './lib/Keyboard';\nimport GUIText from './lib/GUIText';\nimport Tracker from './Tracker';\n\nconst ticker = PIXI.ticker.shared;//new PIXI.ticker.Ticker();\n\nexport default class Game {\n\n    constructor(options) {\n        this._frame = 0;\n        this.cards = null;\n        this.player = null;\n\n        this.gameState = Game.GAME_IDLE;\n        this.playingGameState = Game.STATE_PLAYING_CHOOSE_BET;\n\n        this.fg = new UpdatableContainer();\n        this.gui = new UpdatableContainer();\n        this.renderingContainer = new PIXI.Container();\n        this.renderingContainer.addChild(this.fg);\n        this.renderingContainer.addChild(this.gui);\n        // create renderer\n        const rendererOptions = {\n            transparent: options.transparent || false,\n            autoResize: options.autoResize || false,\n            antialias: options.antialias || false,\n            resolution: options.resolution || 1,\n            clearBeforeRender: true,\n            backgroundColor: options.backgroundColor,\n            roundPixels: options.roundPixels || true\n        }; \n        this.renderer = PIXI.autoDetectRenderer(options.width || 800, options.height || 600, rendererOptions, false);\n        this.container = null;\n        if (options.container) {\n            this.container = options.container;\n            this.container.appendChild(this.renderer.view);\n        }\n        this.setSize(this.renderer.width, this.renderer.height);\n    }\n\n    destroy() {\n        this.clearGame();\n        this.fg.destroy();\n        this.gui.destroy();\n        this.renderer.destroy();\n        this.fg = null;\n        this.gui = null;\n        this.renderer = null;\n    }\n\n    clearGame() {\n        this.stop();\n        this.cards = null;\n        this.player = null;\n        this.fg.removeChildren();\n        this.gui.removeChildren();\n    }\n\n    newGame() {\n        this.gameState = Game.GAME_IDLE;\n        this.playingGameState = Game.STATE_PLAYING_CHOOSE_BET;\n\n        const stageWidth = this.renderer.width;\n        const stageHeight = this.renderer.height;\n        this.player = new PlayerArea(stageWidth/2, stageHeight/3*2);\n\n        this.fg.addChild(this.player);\n        //this.gui.addChild(new GUICombosList()); \n        this.clearBoard();\n        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n          \n    }\n\n    clearBoard() {\n        this.player.removeChildren();\n        this.cards = CardsGenerator.generateCards().shuffle();\n    }\n\n    distribute(count) {\n        \n        // const forcedCards = 0;\n        // [ 3, 2, 1, 0, CardsGenerator.JOKER_VALUE ].forEach(function (value) {\n        //     const card = this.cards.getByValue(value);\n        //     this.player.addChild(card);\n        //     this.cards.remove(card);\n        // }, this);\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(2);\n        // //     if (i > 3) card = this.cards.getByValue(4);\n        // //     this.player.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(i + 1);\n        // //     this.player.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n\n        for (let index = 0; index < count; index++) {\n            let card = this.cards.peek();\n            this.player.addChild(card);\n            this.cards.remove(card);\n        }\n    }\n\n    displayCardCursorSelection() {\n        const p = this.player.getChildPosition(0);\n        this.gui.addChild(new GUICardSelector(p.x + CardsGenerator.CARD_WIDTH / 2, p.y + CardsGenerator.CARD_HEIGHT + 10));\n    }\n\n    setState(state) {\n        this.gameState = state;\n    }\n\n    setPlayingState(state) {\n        this.playingGameState = state;\n        switch (state) {\n            case Game.STATE_PLAYING_CHOOSE_CARDS:\n                Tracker.track('game:new');\n                this.gui.removeChildren();\n                this.clearBoard();\n                this.distribute(5);\n                this.displayCardCursorSelection();\n                break;\n            case Game.STATE_PLAYING_DISPLAY_RIVER_SCORE:\n                this.commitChanges();\n                const combo = this.getCardComboList().getHigherCombo();\n                combo.cards.toArray().forEach(function (d) {\n                    d.highlight();\n                });\n                Tracker.track('combo', {\n                    type: combo.getTypeName(),\n                    cards: combo.getCards().map(String)\n                });\n                const score = new GUIText(combo.getTypeName(), { fontSize: 36 });\n                this.gui.addChild(score);\n                \n                break;\n            case Game.STATE_PLAYING_CHOOSE_RISK:\n                break;\n            \n        }\n    }\n\n    getFPS() {\n        return ticker.FPS;\n    }\n\n    isRunning() {\n        return ticker.started;\n    }\n\n    isPlaying() {\n        return this.gameState === Game.GAME_PLAYING;\n    }\n\n    getSize() {\n        return { width: this.renderer.width, height: this.renderer.height };\n    }\n\n    setSize(w, h) {\n        if (this.container) {\n            this.container.style.width = `${w}px`;\n            this.container.style.height = `${h}px`;\n        }\n        if (this.renderer.width !== w || this.renderer.height !== h) {\n            this.renderer.resize(w, h);\n        }\n    }\n\n    start() {\n        if (!this.isRunning()) {\n            if (this.gameState === Game.GAME_IDLE) {\n                this.setState(Game.STATE_PLAYING);\n            }\n            ticker.add(this.loop, this);\n            ticker.start();\n        }\n    }\n\n    stop() {\n        if (this.isRunning()) {\n            ticker.stop();\n            ticker.remove(this.loop, this);\n        }\n    }\n\n    loop(time) {\n        this._frame += 1;\n\n        this.gui.update(this);\n\n        if (this.playingGameState === Game.STATE_PLAYING_CHOOSE_CARDS) {\n            if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                this.setPlayingState(Game.STATE_PLAYING_DISPLAY_RIVER_SCORE);\n            }\n        } else if (this.playingGameState === Game.STATE_PLAYING_DISPLAY_RIVER_SCORE) {\n            if (Keyboard.isKeyPushed(Keyboard.SPACE) || Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n            }\n        }\n\n        this.renderer.render(this.renderingContainer);\n        Keyboard.update();\n    }\n\n    getCardComboList() {\n        return new CardComboList(this.player.getCards());\n    }\n\n    commitChanges() {\n        const cards = game.player.selectedCardsToBeChanged.splice(0, game.player.selectedCardsToBeChanged.length);\n        const cardsLen = cards.length;\n        cards.forEach(function (c) { c.destroy(); });\n        this.distribute(cardsLen);\n    }\n\n\n    /**\n     * \n     * @param {Function} GuiClass - The GuiClass to instantiate\n     * @param {boolean=} swt - true will create an instance if it doesnt exists, false will destroy it\n     */\n    toggleGuiElementPresence(GuiClass, swt) {\n        let instance = this.gui.children.find((d) => d instanceof GuiClass);\n        if (typeof swt === 'undefined') swt = !instance;\n        if (!instance && swt) {\n            instance = new GuiClass();\n            this.gui.addChild(instance);\n        } else if (instance && !swt) {\n            instance.destroy();\n        }\n    }\n\n};\nGame.STATE_INTRO = 1;\nGame.STATE_PLAYING = 2;\nGame.STATE_GAMEOVER = 4;\n\nGame.STATE_PLAYING_CHOOSE_BET = 1;\nGame.STATE_PLAYING_CHOOSE_CARDS = 2;\nGame.STATE_PLAYING_EXCHANGE_CARD_TRANSITION = 4;\nGame.STATE_PLAYING_DISPLAY_RIVER_SCORE = 8;\nGame.STATE_PLAYING_CHOOSE_RISK = 16;\nGame.STATE_PLAYING_CHOOSE_UP_OR_DOWN = 32;\nGame.STATE_PLAYING_UP_OR_DOWN_SCORE = 64;\n\n","import Game from './Game';\nimport Card from './Card';\nimport Tracker from './Tracker';\n\nTracker.track('pageview');\n\nexport default {\n    Card, Game\n};"],"names":["UpdatableContainer","game","updateChildren","children","forEach","child","update","PIXI","Container","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","Card","options","value","suit","width","height","originalWidth","originalHeight","drawBackground","valueText","Text","getValue","suitText","getSuit","isHighlighted","x","y","anchor","set","addChild","shadowSteps","clear","lineStyle","beginFill","drawRoundedRect","endFill","CardsGenerator","JOKER_VALUE","JOKER","SUITS","VALUE_LABELS","Graphics","CardCollection","arrayOfCard","Array","isArray","cards","slice","push","card","index","indexOf","splice","find","c","output","input","toArray","length","floor","random","toString","suitIndex","valueIndex","CARD_WIDTH","CARD_HEIGHT","LinearLayout","childMargin","setOrientation","orientation","ORIENTATION_VERTICAL","_orientation","_posPropertyName","_sizePropertyName","ORIENTATION_HORIZONTAL","childIndex","getChildAt","Point","pivot","updateChildrenPosition","pos","PlayerArea","selectedCardsToBeChanged","out","swt","indexOfCard","isSelected","_identity","d","array","predicate","ids","id","a","b","min","max","ComboType","CardComboList","cardsCollection","originalCollection","combos","_parse","objects","add","object","cardCombo","CardCombo","sort","type","HigherCard","_getHigherCard","addAll","_getXOfAKind","twoPairsCombo","_getTwoPairs","straightCombo","_getStraight","flushCombo","_getFlush","fullHouseCombo","_getFullHouse","straightFlushCombo","_getStraightFlush","Numbers","Compare","desc","getScore","pairs","combo","Pair","_isAllCardDifferents","TwoPair","concat","map","comboTypeMapper","ThreeOfAKind","FourOfAKind","FiveOfAKind","cardIndex","localeCards","isJoker","Arrays","uniq","getId","pair","threeOfAKind","FullHouse","getCards","values","asc","jokers","filter","match","Straight","black","red","test","Flush","flush","straight","StraightFlush","c1","c2","c1Cards","c2Cards","i1","i2","join","peek","_sortCards","keys","Object","key","getTypeName","Debug","GUICombosList","textConfig","text","getCardComboList","keyboardState","Map","lastKeyboardState","Keyboard","keyCode","get","isKeyUp","isKeyDown","window","addEventListener","event","GUICardSelector","WIDTH","HEIGHT","moveTo","lineTo","originalY","setCursorCardIndex","p","player","getChildPosition","cos","_frame","isKeyPushed","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","setSelectedCardIndex","DOWN_ARROW","ENTER","destroy","GUIText","textStyle","tags","isMe","localStorage","getItem","stopTracking","location","mixpanel","console","log","identify","eventName","properties","callback","track","ticker","shared","Game","gameState","GAME_IDLE","playingGameState","STATE_PLAYING_CHOOSE_BET","fg","gui","renderingContainer","rendererOptions","transparent","autoResize","antialias","resolution","backgroundColor","roundPixels","renderer","autoDetectRenderer","container","appendChild","view","setSize","clearGame","stop","removeChildren","stageWidth","stageHeight","clearBoard","setPlayingState","STATE_PLAYING_CHOOSE_CARDS","generateCards","shuffle","count","remove","state","distribute","displayCardCursorSelection","STATE_PLAYING_DISPLAY_RIVER_SCORE","commitChanges","getHigherCombo","highlight","String","score","fontSize","STATE_PLAYING_CHOOSE_RISK","FPS","started","GAME_PLAYING","w","h","style","resize","isRunning","setState","STATE_PLAYING","loop","start","time","SPACE","render","cardsLen","GuiClass","instance","STATE_INTRO","STATE_GAMEOVER","STATE_PLAYING_EXCHANGE_CARD_TRANSITION","STATE_PLAYING_CHOOSE_UP_OR_DOWN","STATE_PLAYING_UP_OR_DOWN_SCORE","Tracker"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}