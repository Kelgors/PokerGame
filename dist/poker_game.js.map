{"version":3,"file":"poker_game.js","sources":["src/containers/UpdatableContainer.js","src/lib/BezierEasing.js","src/Card.js","src/CardCollection.js","src/CardsGenerator.js","src/Arrays.js","src/Numbers.js","src/CardComboList.js","src/gui/LinearLayout.js","src/Config.js","src/gui/debug/GUICombosList.js","src/lib/Keyboard.js","src/gui/GUICardSelector.js","src/lib/Timer.js","src/lib/TransformAnimation.js","src/lib/GUIText.js","src/Tracker.js","src/i18n.js","src/gui/GUIScoreLayout.js","src/gui/ContextualBox.js","src/lib/Rect.js","src/gui/contextual-menu/ContextualDisplayer.js","src/gui/contextual-menu/GUICursor.js","src/gui/contextual-menu/ContextualMenu.js","src/gui/GUIContext.js","src/gui/top-menu/GUIComboTypeItem.js","src/gui/top-menu/GUIComboTypesList.js","src/gui/top-menu/GUIBetBox.js","src/gui/top-menu/GUITokenCount.js","src/gui/TopMenuLayout.js","src/containers/AbsCardArea.js","src/containers/CardRiverArea.js","src/Game.js","src/poker_game.js"],"sourcesContent":["import PIXI from 'pixi.js';\n\nexport default class UpdatableContainer extends PIXI.Container {\n    update(game) {\n        this.updateChildren(game);\n    }\n\n    destroyChildren() {\n        this.children.forEach((d) => d.destroy());\n        this.removeChildren();\n    }\n\n    updateChildren(game) {\n        this.children.forEach(function (child) { \n            child.update(game); \n        });\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject}\n     */\n    findChildrenByType(Type) {\n        return this.children.find((d) => d instanceof Type);\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject[]}\n     */\n    findAllChildByType(Type) {\n        return this.children.filter((d) => d instanceof Type);\n    }\n}","\n/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n    return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX, currentT, i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        } else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\n\nexport default function bezier(mX1, mY1, mX2, mY2) {\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n        for (var i = 0; i < kSplineTableSize; ++i) {\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    function getTForX(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }--currentSample;\n\n        // Interpolate to provide an initial guess for t\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    return function BezierEasing(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}; ","import PIXI from 'pixi.js';\nimport CardsGenerator from './CardsGenerator';\nimport BezierEasing from './lib/BezierEasing';\n\nexport default class Card extends PIXI.Graphics {\n\n  constructor(options) {\n    super();\n    this.value = options.value;\n    this.suit  = options.suit;\n\n    const width = options.width;\n    const height = options.height;\n    this.originalWidth = options.width;\n    this.originalHeight = options.height;\n    this.drawBackground();\n    const valueText = new PIXI.Text(this.getValue(), {\n      fontSize: 26,\n      textColor: 0,\n      align: 'center',\n    });\n    const suitText = new PIXI.Text(this.getSuit(), {\n      fontSize: 14,\n      textColor: 0,\n      align: 'center'\n    });\n    this.isHighlighted = false;\n    valueText.x = width/2;\n    valueText.y = 30;\n    valueText.anchor.set(0.5,0.5);\n    suitText.x = width/2;\n    suitText.y = height/2;\n    suitText.anchor.set(0.5,0.5);\n    this.addChild(valueText);\n    this.addChild(suitText);\n  }\n\n  drawBackground() {\n    const shadowSteps = 10;\n    this.clear().lineStyle(1, 0x000000, 1)\n      .beginFill(this.suit === 1 || this.suit === 2 ? 0xFF0000 : 0, 0.5)\n      .drawRoundedRect(0, 0, this.originalWidth, this.originalHeight, this.originalWidth/10)\n      .endFill();\n    if (this.isHighlighted) {\n      for (let i = 1; i < shadowSteps; i++) {\n        this.lineStyle(1, 0xffff00, 0.8 - i / shadowSteps)\n          .drawRoundedRect(-i, -i, this.originalWidth+i*2, this.originalHeight+i*2, this.originalWidth/10);\n      }\n      \n    }\n  }\n\n  highlight() {\n    this.isHighlighted = true;\n    this.drawBackground();\n  }\n\n  isJoker() {\n    return this.value === CardsGenerator.JOKER_VALUE;\n  }\n\n  getSuit() {\n    if (this.suit === CardsGenerator.JOKER) return 'Joker';\n    return CardsGenerator.SUITS[this.suit];\n  }\n\n  getValue() {\n    if (this.value === CardsGenerator.JOKER_VALUE) return 'Joker';\n    return CardsGenerator.VALUE_LABELS[this.value];\n  }\n\n  toString() {\n    return `${this.getValue()} of ${this.getSuit()}`;\n  }\n\n}","import Card from './Card';\n\nexport default class CardCollection {\n\n    static from(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) return arrayOfCard;\n        if (Array.isArray(arrayOfCard)) return new CardCollection(arrayOfCard);\n        return new CardCollection();\n    }\n\n    constructor(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) {\n            this.cards = arrayOfCard.cards.slice(0);\n        } else if (Array.isArray(arrayOfCard)) {\n            this.cards = arrayOfCard;\n        } else {\n            this.cards = [];\n        }\n    }\n\n    destroy() {\n        this.cards.forEach((d) => d.destroy());\n    }\n\n    /**\n     * @param {Card[]} cards\n     */\n    addAll(cards) {\n        this.cards.push(...cards);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    add(card) {\n        this.cards.push(card);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    remove(card) {\n        let index;\n        if ((index = this.cards.indexOf(card)) > -1) {\n            return this.cards.splice(index, 1)[0];\n        }\n        return null;\n    }\n\n    /**\n     * @param {number} suit\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getBySuitAndValue(suit, value) {\n        return this.cards.find((c) => c.value === value && c.suit === suit);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getByValue(value) {\n        return this.cards.find((c) => c.value === value);\n    }\n\n    /**\n     * @param {number} suit\n     * @returns {Card} card\n     */\n    getBySuit(suit) {\n        return this.cards.find((c) => c.suit === suit);\n    }\n\n    /**\n     * @returns {Card} card\n     */\n    peek() {\n        return this.cards[0];\n    }\n\n    shuffle() {\n        const output = [];\n        const input = this.toArray();\n        while (input.length > 0) {\n            let index = Math.floor(Math.random() * input.length);\n            output.push(input.splice(index, 1)[0]);\n        }\n        this.cards = output;\n        return this;\n    }\n\n    /**\n     * @returns {Card[]}\n     */\n    toArray() {\n        return this.cards.slice(0);\n    }\n\n    /**\n     * @returns {String}\n     */\n    toString() {\n        return this.cards.toString();\n    }\n};","import CardCollection from './CardCollection';\nimport Card from './Card';\n\nconst CardsGenerator = {\n    CARD_WIDTH: 370 / 4,\n    CARD_HEIGHT: 522 / 4,\n    JOKER: 'Joker',\n    JOKER_VALUE: 13,\n    SUITS: [ 'Spades', 'Hearts', 'Diamonds', 'Clubs' ],\n    VALUE_LABELS: [ '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace' ],\n    generateCards() {\n        const output = [];\n        for (let suitIndex = 0; suitIndex < CardsGenerator.SUITS.length; suitIndex++) {\n            for (let valueIndex = 0; valueIndex < CardsGenerator.VALUE_LABELS.length; valueIndex++) {\n                output.push(new Card({\n                    width: CardsGenerator.CARD_WIDTH,\n                    height: CardsGenerator.CARD_HEIGHT,\n                    suit: suitIndex,\n                    value: valueIndex\n                }));\n            }\n        }\n        for (let index = 0; index < 2; index++) {\n            output.push(new Card({ \n                width: CardsGenerator.CARD_WIDTH,\n                height: CardsGenerator.CARD_HEIGHT,\n                suit: CardsGenerator.JOKER,\n                value: CardsGenerator.JOKER_VALUE\n            }));\n        }\n        return new CardCollection(output);\n    }\n};\n\nexport default CardsGenerator;\n","function _identity(d) {return d;}\nexport default {\n  uniq(array, predicate = _identity) {\n    var output = [];\n    var ids = [];\n    array.forEach(function (d) {\n      const id = predicate(d);\n      if (ids.indexOf(id) === -1) {\n        output.push(d);\n        ids.push(id);\n      }\n    });\n    return output;\n  }\n};","export default {\n    Compare: {\n        asc(a, b) {\n            if (a > b) return 1;\n            if (a < b) return -1;\n            return 0;\n        },\n        desc(a, b) {\n            if (a > b) return -1;\n            if (a < b) return 1;\n            return 0;\n        }\n    },\n    clamp(value, min, max) {\n        return Math.max(Math.min(value, max), min);\n    }\n};","import CardCollection from './CardCollection';\nimport Arrays from './Arrays';\nimport Numbers from './Numbers';\n\nexport var ComboType = {\n    Pair: 1,\n    TwoPair: 2,\n    ThreeOfAKind: 3,\n    Straight: 5,\n    Flush: 7,\n    FullHouse: 8,\n    FourOfAKind: 10,\n    StraightFlush: 20,\n    RoyalFlush: 50,\n    FiveOfAKind: 100\n};\n\nObject.defineProperty(ComboType, 'forName', {\n    enumerable: false,\n    value: function forName(type) {\n        return Object.keys(ComboType).find((key) => ComboType[key] === type);\n    }\n});\n\nexport class CardComboList {\n    \n    /**\n     * @param {CardCollection} cardsCollection\n     */\n    constructor(cardsCollection) {\n        this.originalCollection = cardsCollection;\n        this.combos = [];\n        this._parse(cardsCollection);\n    }\n\n    addAll(objects) {\n        objects.forEach((d) => this.add(d));\n    }\n\n    add(object) {\n        let cardCombo;\n        if (!(object instanceof CardCombo)) {\n            cardCombo = new CardCombo(object);\n        } else cardCombo = object;\n        this.combos.push(cardCombo);\n        return this;\n    }\n\n    getHigherCombo() {\n        return this.combos.sort((a, b) => {\n            if (a.type > b.type) return -1;\n            if (a.type < b.type) return 1;\n            return 0;\n        })[0];\n    }\n\n    _parse() {\n        // 2 - Pair\n        // 4 - ThreeOfAKind\n        // 8 - FourOfAKind\n        // 10 - FiveOfAKind\n        this.addAll(this._getXOfAKind());\n        // 3 - TwoPair\n        const twoPairsCombo = this._getTwoPairs();\n        if (twoPairsCombo) this.add(twoPairsCombo);\n        // 5 - Straight\n        const straightCombo = this._getStraight();\n        if (straightCombo) this.add(straightCombo);\n        // 6 - Flush\n        const flushCombo = this._getFlush();\n        if (flushCombo) this.add(flushCombo);\n        // 7 - FullHouse\n        const fullHouseCombo = this._getFullHouse();\n        if (fullHouseCombo) this.add(fullHouseCombo);\n        // 9 - StraightFlush\n        const straightFlushCombo = this._getStraightFlush();\n        if (straightFlushCombo) this.add(straightFlushCombo);\n        \n        this.combos.sort((a, b) => Numbers.Compare.desc(a.getScore(), b.getScore()));\n    }\n\n    _getHigherCard() {\n        const cards = this.originalCollection.toArray();\n        return cards.sort((a, b) => {\n            if (a.value > b.value) return -1;\n            if (a.value < b.value) return 1;\n            return 0;\n        })[0];\n    }\n\n    _getTwoPairs() {\n        const pairs = [];\n        this.combos.forEach(function (combo) {\n            if (combo.type === ComboType.Pair) pairs.push(combo);\n        });\n        if (pairs.length === 2 && this._isAllCardDifferents(pairs[0], pairs[1])) {\n\n            return new CardCombo({\n                type: ComboType.TwoPair,\n                cards: [].concat(...pairs.map((d) => d.cards.toArray()))\n            });\n        }\n    }\n\n    _getXOfAKind() {\n        const cards = this.originalCollection.toArray();\n        const combos = [];\n        const comboTypeMapper = {\n            2: ComboType.Pair,\n            3: ComboType.ThreeOfAKind,\n            4: ComboType.FourOfAKind,\n            5: ComboType.FiveOfAKind\n        };\n        cards.forEach((card, cardIndex, cards) => {\n            const localeCards = [ card ];\n            for (let index = 0; index < cards.length; index++) {\n                if (card !== cards[index] && (card.value === cards[index].value || cards[index].isJoker())) {\n                    localeCards.push(cards[index]);\n                }\n            }\n            if (localeCards.length > 1 && localeCards.length < 6) {\n                combos.push(new CardCombo({\n                    type: comboTypeMapper[localeCards.length],\n                    cards: localeCards\n                }));\n            }\n        });\n        return Arrays.uniq(combos, (d) => d.getId());\n    }\n\n    _getFullHouse() {\n        const pair = this.combos.find((d) => d.type === ComboType.Pair);\n        const threeOfAKind = this.combos.find((d) => d.type === ComboType.ThreeOfAKind);\n        if (pair && threeOfAKind && this._isAllCardDifferents(pair, threeOfAKind)) {\n            return new CardCombo({\n                type: ComboType.FullHouse,\n                cards: [].concat(pair.getCards(), threeOfAKind.getCards())\n            });\n        }\n    }\n\n    _getStraight() {\n        const cards = this.originalCollection.toArray();\n        const values = cards.map((d) => d.value).sort(Numbers.Compare.asc);\n        let jokers = cards.filter((d) => d.isJoker()).length;\n        for (let index = 1, value = values[0]; index < values.length; index++) {\n            const match = value + 1 === values[index];\n            if (!match && jokers === 0) return;\n            if (!match) jokers--;\n            value++;\n        }\n        return new CardCombo({\n            type: ComboType.Straight,\n            cards: cards\n        });\n    }\n\n    _getFlush() {\n        const cards = this.originalCollection.toArray();\n        let firstSuit = cards[0].suit;\n        for (let index = 1; index < cards.length; index++) {\n            if (cards[index].suit !== firstSuit && !cards[index].isJoker()) return null;\n        }\n        return new CardCombo({\n            type: ComboType.Flush,\n            cards: cards\n        });\n    }\n\n    _getStraightFlush() {\n        const flush = this.combos.find((d) => d.type === ComboType.Flush);\n        const straight = this.combos.find((d) => d.type === ComboType.Straight);\n        if (flush && straight) {\n            return new CardCombo({\n                type: ComboType.StraightFlush,\n                cards: flush.getCards()\n            });\n        }\n    }\n\n    /**\n     * @param {Combo} c1\n     * @param {Combo} c2\n     * @returns {boolean}\n     */\n    _isAllCardDifferents(c1, c2) {\n        const c1Cards = c1.getCards();\n        const c2Cards = c2.getCards();\n        for (let i1 = 0; i1 < c1Cards.length; i1++)\n            for (let i2 = 0; i2 < c2Cards.length; i2++)\n                if (c1Cards[i1] === c2Cards[i2]) return false;\n        return true;\n    }\n\n    toString() {\n        return this.combos.join('\\n');\n    }\n\n}\n// TODO: TEST K 4 4 K J\n// TODO: TEST Q 5 5 Q J\nexport class CardCombo {\n\n    constructor(object) {\n        this.type = object.type;\n        this.cards = new CardCollection();\n        if (object.cards) this.cards.addAll(object.cards);\n        else if (object.card) this.cards.add(object.card);\n        this.getCards().sort((a, b) => Numbers.Compare.asc(a.value, b.value));\n    }\n\n    getCard() { return this.cards.peek(); }\n    getCards() { return this.cards.cards; }\n\n    _sortCards() {\n        this.getCards().sort((a, b) => { return Numbers.Compare.asc(a.suit, b.suit); });\n    }\n    \n    getId() {\n        this._sortCards();\n        return this.getCards().map((d) => `${d.value}&${d.suit}`).join('/');\n    }\n\n    getScore() {\n        const cards = this.getCards();\n        let out = 0;\n        for (let index = 0; index < cards.length; index++) out += cards[index].value;\n        return out + this.type * 10;\n    }\n\n    getTypeName() {\n        return ComboType.forName(this.type);\n    }\n\n    toString() {\n        return `${this.getTypeName()} { ${this.getCards().join(', ')} }`;\n    }\n\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\n\nexport default class LinearLayout extends UpdatableContainer {\n\n    /**\n     * @param {Object} [options]\n     * @property {number} x\n     * @property {number} y\n     * @property {number} childMargin\n     */\n    constructor(options = {}) {\n        super();\n        this.childMargin = 0;\n        if ('x' in options) this.x = options.x;\n        if ('y' in options) this.y = options.y;\n        if ('childMargin' in options) this.childMargin = options.childMargin;\n        this.setOrientation(options.orientation || LinearLayout.ORIENTATION_VERTICAL);\n    }\n\n    setOrientation(orientation) {\n        this._orientation = orientation;\n        if (orientation === LinearLayout.ORIENTATION_VERTICAL) {\n            this._posPropertyName = 'y';\n            this._sizePropertyName = 'height';\n        } else if (orientation === LinearLayout.ORIENTATION_HORIZONTAL) {\n            this._posPropertyName = 'x';\n            this._sizePropertyName = 'width';\n        }\n    }\n\n    /**\n     * @param {number} childIndex\n     * @returns {PIXI.Point}\n     */\n    getChildPositionAt(childIndex) {\n        return this.getChildPosition(this.getChildAt(childIndex));\n    }\n\n    /**\n     * @param {PIXI.DisplayObject} child\n     * @returns {PIXI.Point}\n     */\n    getChildPosition(child) {\n        return new PIXI.Point(this.x - this.pivot.x + child.x - child.pivot.x, this.y - this.pivot.y + child.y - child.pivot.y);\n    }\n\n    update(game) {\n        super.update(game);\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.children.length; index++) {\n            this.children[index][this._posPropertyName] = pos;\n            pos += this.children[index][this._sizePropertyName] + this.childMargin;\n        }\n    }\n}\n\nLinearLayout.ORIENTATION_VERTICAL = 1;\nLinearLayout.ORIENTATION_HORIZONTAL = 2;","export var Debug = {\n    textConfig: {\n        fontSize: 14,\n        fontFamily: 'Consolas',\n        fill: 0\n    }\n};\n\nexport var BigText = {\n    textConfig: {\n        fontSize: 72,\n        fontFamily: 'Verdana',\n        fill: 0xffff00,\n        stroke: 0xef0000,\n        strokeThickness: 8,\n        fontVariant: 'small-caps',\n        fontWeight: 900\n    }\n};\n\nexport var GuiText = {\n    textConfig: {\n        fontSize: 16,\n        fontFamily: 'Verdana',\n        fill: 0xffffff,\n        stroke: 0,\n        strokeThickness: 3,\n        fontWeight: 300\n    }\n};\n\nexport var GuiToken = {\n    textConfig: {\n        fontSize: 20,\n        fontFamily: 'Verdana',\n        fill: 0xffffff,\n        letterSpacing: 4\n    }\n};","import PIXI from 'pixi.js';\nimport {Debug} from '../../Config';\n\nexport default class GUICombosList extends PIXI.Text {\n    \n    constructor() {\n        super('', Debug.textConfig);\n    }\n\n    update(game) {\n        this.text = game.getCardComboList().toString();\n    }\n}","let keyboardState = new Map();\nlet lastKeyboardState = new Map();\nconst keyboardEventHandlers = new Map();\nconst Keyboard = {\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPS_LOCK: 20,\n  ESCAPE: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n  INSERT: 45,\n  DELETE: 46,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n  LEFT_WINDOW_KEY: 91,\n  RIGHT_WINDOW_KEY: 92,\n  SELECT_KEY: 93,\n  NUMPAD_0: 96,\n  NUMPAD_1: 97,\n  NUMPAD_2: 98,\n  NUMPAD_3: 99,\n  NUMPAD_4: 100,\n  NUMPAD_5: 101,\n  NUMPAD_6: 102,\n  NUMPAD_7: 103,\n  NUMPAD_8: 104,\n  NUMPAD_9: 105,\n  MULTIPLY: 106,\n  ADD: 107,\n  SUBTRACT: 109,\n  DECIMAL_POINT: 110,\n  DIVIDE: 111,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  NUM_LOCK: 144,\n  SCROLL_LOCK: 145,\n  SEMI_COLON: 186,\n  EQUAL_SIGN: 187,\n  COMMA: 188,\n  DASH: 189,\n  PERIOD: 190,\n  FORWARD_SLASH: 191,\n  GRAVE_ACCENT: 192,\n  OPEN_BRACKET: 219,\n  BACK_SLASH: 220,\n  CLOSE_BRAKET: 221,\n  SINGLE_QUOTE: 222,\n  isKeyDown(keyCode) {\n    return !!keyboardState.get(keyCode);\n  },\n  isKeyUp(keyCode) {\n    return !keyboardState.get(keyCode);\n  },\n  isKeyReleased(keyCode) {\n    return Keyboard.isKeyUp(keyCode) && lastKeyboardState.get(keyCode);\n  },\n  isKeyPushed(keyCode) {\n    return Keyboard.isKeyDown(keyCode) && !lastKeyboardState.get(keyCode);\n  },\n  update() {\n    lastKeyboardState = keyboardState;\n    keyboardState = new Map(lastKeyboardState);\n  }\n};\n// Keep state of all action\nwindow.addEventListener('keyup', function (event) {\n    keyboardState.set(event.keyCode, false);\n});\nwindow.addEventListener('keydown', function (event) {\n    keyboardState.set(event.keyCode, true);\n});\n\nexport default Keyboard;","import PIXI from 'pixi.js';\nimport Keyboard from '../lib/Keyboard';\nimport Game from '../Game';\n\nimport CardsGenerator from '../CardsGenerator';\n\nexport default class GUICardSelector extends PIXI.Graphics {\n    constructor(x, y) {\n        super();\n        const WIDTH = 20;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(3, 0, 1)\n            .moveTo(WIDTH/2,0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT)\n            .lineTo(0, HEIGHT)\n            .lineTo(WIDTH/2,0)\n            .endFill();\n        this.pivot.set(WIDTH / 2, 0);\n        this.originalY = y;\n        if (x) this.x = x;\n        if (y) this.y = y;\n    }\n\n    setCursorCardIndex(game, index) {\n        const river = game.river;\n        if (index < 0) index = 4;\n        if (index > river.cardSlots - 1) index = 0;\n        this.index = index;\n        const p = game.river.getCardPositionAt(index);\n        this.x = p.x + CardsGenerator.CARD_WIDTH / 2;\n        this.y = p.y + CardsGenerator.CARD_HEIGHT + 20;\n    }\n\n    /**\n     * @param {Game} game\n     */\n    update(game) {\n        this.y += Math.cos(game._frame / 10);\n        \n        if (Keyboard.isKeyPushed(Keyboard.LEFT_ARROW)) {\n            this.setCursorCardIndex(game, this.index - 1);\n        } else if (Keyboard.isKeyPushed(Keyboard.RIGHT_ARROW)) {\n            this.setCursorCardIndex(game, this.index + 1);    \n        } else if (Keyboard.isKeyPushed(Keyboard.UP_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, true);\n            } else {\n                game.river.setSelectedCardIndex(this.index, true);\n            }\n        } else if (Keyboard.isKeyPushed(Keyboard.DOWN_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, false);\n            } else {\n                game.river.setSelectedCardIndex(this.index, false);\n            }\n            \n        } else if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n            this.destroy();\n        }\n    }\n}","import PIXI from 'pixi.js';\n\nexport default class Timer {\n    constructor(targetedTime, ticker = PIXI.ticker.shared) {\n        this.target = targetedTime;\n        this.time = 0;\n        this.ticker = ticker;\n        this.isStarted = false;\n    }\n\n    destroy() {\n        this.stop();\n        this.ticker = null;\n    }\n\n    set(targetedTime) {\n        this.target = targetedTime || 0;\n        this.time = 0;\n    }\n\n    reset() {\n        this.time = 0;\n    }\n\n    start() {\n        if (!this.isStarted) {\n            this.ticker.add(this.tick, this);\n            this.isStarted = true;\n        }\n    }\n\n    stop() {\n        if (this.isStarted) {\n            this.ticker.remove(this.tick, this)\n            this.isStarted = false;\n        }\n    }\n\n    tick() {\n        this.time += this.ticker.elapsedMS;\n    }\n\n    delta() {\n        return this.target - this.time;\n    }\n\n}\n","import BezierEasing from './BezierEasing';\nimport Timer from '../lib/Timer';\n\nexport default class TransformAnimation {\n    /**\n     * @param {Object} options\n     * @param {PIXI.Point} options.posFrom\n     * @param {PIXI.Point} options.posTo\n     * @param {PIXI.Point} options.pivot\n     * @param {number} options.scaleFrom\n     * @param {number} options.scaleTo\n     * @param {number} options.rotationFrom\n     * @param {number} options.rotationTo\n     * @param {number} options.timeFrom\n     * @param {number} options.duration\n     * @param {Function} options.callback\n    */\n    constructor(options) {\n        this.posFrom = options.posFrom || null;\n        this.posTo = options.posTo || null;\n        this.scaleFrom = !isNaN(options.scaleFrom) ? +options.scaleFrom : 1;\n        this.scaleTo = !isNaN(options.scaleTo) ? +options.scaleTo : 1;\n        this.rotationFrom = !isNaN(options.rotationFrom) ? +options.rotationFrom : 0;\n        this.rotationTo = !isNaN(options.rotationTo) ? +options.rotationTo : 0;\n        this.alphaFrom = !isNaN(options.alphaFrom) ? +options.alphaFrom : 1;\n        this.alphaTo = !isNaN(options.alphaTo) ? +options.alphaTo : 1;\n        this.pivot = options.pivot || new PIXI.Point(0,0);\n\n        this.timer = new Timer(options.duration);\n        this.duration = options.duration;\n        this.callback = options.callback || function () {};\n        this.interpolator = options.interpolator || BezierEasing(0,0,1,1);\n    }\n\n    /**\n     * Destroy all references presents in the animation\n     */\n    destroy() {\n        this.timer.stop();\n        this.timer = null;\n        this.posFrom = this.posTo = this.pivot = null;\n        this.callback = null;\n        this.interpolator = null;\n    }\n\n    /**\n     * Update object position relative to \n     */\n    update(sprite) {\n        if (!this.timer.isStarted) this.timer.start();\n        const rawRatio = Math.min(this.duration, this.timer.time) / this.duration;\n\n        const ratio = Math.max(0, Math.min(1, this.interpolator(rawRatio)));\n        sprite.setTransform(\n            this.posFrom && this.posTo ? this.posFrom.x + (this.posTo.x - this.posFrom.x) * ratio : sprite.x,\n            this.posFrom && this.posTo ? this.posFrom.y + (this.posTo.y - this.posFrom.y) * ratio : sprite.y,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.rotationFrom + (this.rotationTo - this.rotationFrom) * ratio,\n            0,\n            0, \n            this.pivot.x,\n            this.pivot.y\n        );\n        sprite.alpha = this.alphaFrom + (this.alphaTo - this.alphaFrom) * ratio; \n\n        if (rawRatio == 1) {\n            this.callback(sprite);\n        }\n    }\n}","import PIXI from 'pixi.js';\nimport TransformAnimation from './TransformAnimation';\n\nexport default class GUIText extends PIXI.Text {\n    constructor(text, textStyle) {\n        super(text, textStyle);\n        this.tags = [ 'gui' ];\n        this.animation = null;\n    }\n\n    destroy() {\n        this.setAnimation(null);\n        super.destroy();\n    }\n\n    /**\n     * @param {TransformAnimation} animation\n     */\n    setAnimation(animation) {\n        if (this.animation) this.animation.destroy();\n        this.animation = animation;\n    }\n    update() {\n        if (this.animation) this.animation.update(this);\n    }\n}","const isMe = !!localStorage.getItem('isMe');\nconst stopTracking = !!localStorage.getItem('StopTracking') || /localhost\\:8080/.test(location.toString()) || typeof mixpanel === 'undefined';\n\nif (stopTracking) console.log('stop-tracking');\n\nif (isMe) {\n    mixpanel.identify('1');\n}\n\nexport default {\n    /**\n     * @param {String} eventName\n     * @param {Object} properties\n     * @param {Function} callback\n     */\n    track(eventName, properties, callback) {\n        if (stopTracking) return;\n        mixpanel.track(eventName, properties, callback);\n    }\n};\n\n","import {ComboType} from './CardComboList';\n\nlet languages = [];\nlet currentLang = null;\n\nexport default {\n    setup(langs) {\n        languages = langs;\n        currentLang = languages[0];\n    },\n    t(chainedName) {\n        const names = chainedName.split('.');\n        let currentObject = currentLang;\n        for (let index = 0; index < names.length; index++) {\n            const keyName = names[index];\n            if (keyName in currentObject) {\n                if (typeof currentObject[keyName] !== 'object') {\n                    return currentObject[keyName];\n                } else {\n                    currentObject = currentObject[keyName];\n                }\n            }\n        }\n        return '';\n    }\n};","import PIXI from 'pixi.js';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport GUIText from '../lib/GUIText';\nimport {CardCombo, ComboType} from '../CardComboList';\nimport i18n from '../i18n';\n\nconst TRANSITION_DURATION = 150;\nconst TRANSITION_DELAY = 1000;\n\nexport default class GUIScoreLayout extends UpdatableContainer {\n    \n    /**\n     * @param {Object} options\n     * @param {Game} options.game\n     * @param {CardCombo} options.playerCombo\n     * @param {CardCombo} options.iaCombo\n     */\n    constructor(options) {\n        super();\n        /** @type {CardCombo} */\n        this.playerCombo = options.playerCombo;\n        /** @type {CardCombo} */\n        this.iaCombo = options.iaCombo || new CardCombo(ComboType.Pair);\n        \n        this.spawnSuitName();\n        this.spawnComparison();\n\n        /** @type {number} */\n        this.rendererWidth = options.game.renderer.width;\n        /** @type {number} */\n        this.rendererHeight = options.game.renderer.height;\n        for (let index = 0; index < this.children.length; index++) {\n            const child = this.children[index];\n            child.x = this.rendererWidth*3/4 + child.width / 2 + 1;\n            child.y = this.rendererHeight / 3;\n            child.alpha = 0;\n        }\n        /** @type {number} */\n        this._lastScoreState = 0;\n        /** @type {number} */\n        this.scoreState = GUIScoreLayout.STATE_TRANSITION_IDLE;\n        /** @type {boolean} */\n        this.isDestroyed = false;\n    }\n    \n    destroy() {\n        super.destroy();\n        this.isDestroyed = true;\n    }\n\n    spawnSuitName() {\n        let comboName = 'NoCombo';\n        if (this.playerCombo) comboName = this.playerCombo.getTypeName();\n        this.addChild(new GUIText(i18n.t('ComboType.' + comboName), BigText.textConfig));\n    }\n\n    spawnComparison() {\n        //const iaScore = this.iaCombo.getScore();\n        const iaScore = ComboType.Pair;\n        const playerScore = this.playerCombo ? this.playerCombo.type : 0;\n        console.log('playerScore: %s, iaScore: %s', playerScore, iaScore);\n        let comparisonLabel = i18n.t('Defeat');\n        if (playerScore > iaScore) {\n            comparisonLabel = i18n.t('Victory');\n        } else if (playerScore === iaScore) {\n            comparisonLabel = i18n.t('Draw');\n        }\n        this.addChild(new GUIText(comparisonLabel, BigText.textConfig));\n    }\n\n    getSuitText() {\n        return this.getChildAt(0);\n    }\n\n    getComparisonText() {\n        return this.getChildAt(1);\n    }\n\n    changeState(state) {\n        this._lastScoreState = this.scoreState;\n        this.scoreState = state;\n    }\n\n    update(game) {\n        super.update(game);\n        switch (this.scoreState) {\n            case GUIScoreLayout.STATE_TRANSITION_IDLE:\n                this.getSuitText().setAnimation(this.getInAnimation(this.getSuitText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(GUIScoreLayout.STATE_TRANSITION_COMPARISON);\n                    }, TRANSITION_DELAY);\n                }));\n                this.changeState(GUIScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case GUIScoreLayout.STATE_TRANSITION_COMPARISON:\n                this.getComparisonText().setAnimation(this.getInAnimation(this.getComparisonText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(GUIScoreLayout.STATE_TRANSITION_COMPARISON_ENDING);\n                    }, TRANSITION_DELAY);\n                }));\n                this.getSuitText().setAnimation(this.getOutAnimation(this.getSuitText()));\n                this.changeState(GUIScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case GUIScoreLayout.STATE_TRANSITION_COMPARISON_ENDING:\n                this.getComparisonText().setAnimation(this.getOutAnimation(this.getComparisonText(), () => {\n                    this.changeState(GUIScoreLayout.STATE_TRANSITION_TERMINATED);\n                }));\n                this.changeState(GUIScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n        }\n    }\n\n    getInAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth/2-sprite.width/2, sprite.y),\n            alphaFrom: 0,\n            alphaTo: 1,\n            duration: TRANSITION_DURATION,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n\n    getOutAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth*1/6-sprite.width/2, sprite.y),\n            alphaFrom: 1,\n            alphaTo: 0,\n            duration: TRANSITION_DURATION,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n}\n\nGUIScoreLayout.STATE_TRANSITION_IDLE = 0;\nGUIScoreLayout.STATE_TRANSITION_SUIT = 1;\nGUIScoreLayout.STATE_TRANSITION_COMPARISON = 2;\nGUIScoreLayout.STATE_TRANSITION_COMPARISON_ENDING = 4;\nGUIScoreLayout.STATE_TRANSITION_TERMINATED = 8;\n","import PIXI from 'pixi.js';\n\nexport default class ContextualBox extends PIXI.Graphics {\n\n    constructor() {\n        super();\n        this._isValid = false;\n    }\n\n    clear() {\n        this.removeChildren();\n    }\n\n    update(game) {\n        if (!this._isValid) {\n            this.drawBox(game);\n            this._isValid=true;\n        }\n    }\n\n    drawBox(game) {}\n\n    invalidate(){\n        this._isValid=false;\n    }\n\n    _drawBox(graphics, rect) {\n        graphics.moveTo(rect.left, rect.top)\n            .lineStyle(1, 0, 1)\n            .beginFill(0x675C53, 1)\n            .lineTo(rect.right, rect.top)\n            .lineTo(rect.right, rect.bottom)\n            .lineTo(rect.left, rect.bottom)\n            .lineTo(rect.left, rect.top)\n            .endFill();\n    }\n}","export default class Rect {\n    constructor(top, right, bottom, left) {\n        this.set(top || 0, right || 0, bottom || 0, left || 0);\n    }\n    \n    set(top, right, bottom, left) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n\n    scale(x, y) {\n        return new Rect(this.top*y,this.right*x,this.bottom*y,this.left*x);\n    }\n}","import ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport LinearLayout from '../LinearLayout';\nimport {CardCombo} from '../../CardComboList';\nimport i18n from '../../i18n';\n\nexport default class ContextualDisplayer extends ContextualBox {\n\n    constructor() {\n        super();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        const rect = new Rect(0, this.parent.getWidth() * 4/5 - 10, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayControls() {\n        this.removeChildren();\n        const col1 = new LinearLayout({ childMargin: 15 });\n        const col2 = new LinearLayout({ childMargin: 15 });\n        const rows = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: 12,\n            x: 30\n        });\n\n        const textStyle = {\n            fontSize: 16,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 3\n        };\n\n        col1.addChild(new PIXI.Text('\\u25C0 \\u25B6 ' + i18n.t('Controls.MoveCursor'), textStyle));\n        col1.addChild(new PIXI.Text('\\u2B06 / \\u2B07 ' + i18n.t('Controls.SelectCard'), textStyle));\n        col1.updateChildrenPosition();\n\n        col2.addChild(new PIXI.Text('Shift + \\u2B06 / \\u2B07 ' + i18n.t('Controls.SelectCards'), textStyle));\n        col2.addChild(new PIXI.Text('Entrée ' + i18n.t('Controls.CommitChanges'), textStyle));\n        col1.updateChildrenPosition();\n        col2.updateChildrenPosition();\n        \n        rows.addChild(col1);\n        rows.addChild(col2);\n        rows.updateChildrenPosition();\n\n\n        const label = new PIXI.Text(i18n.t('Controls.ControlsLabel'), textStyle);\n        label.x = 30;\n        label.y = 10;\n        this.addChild(label);\n        rows.y = label.y + label.height + 15;\n        this.addChild(rows);\n    }\n\n    /**\n     * @param {CardCombo}\n     */\n    displayCombo(combo) {\n        this.removeChildren();\n        const row = new LinearLayout();\n        row.x = 30;\n\n        const textStyle = {\n            fill: 0xffa172,\n            stroke: 0,\n            strokeThickness: 3,\n            fontSize: 18\n        };\n\n        let comboName = 'NoCombo';\n        if (combo) comboName = combo.getTypeName();\n        row.addChild(new PIXI.Text(`\"${i18n.t('ComboType.' + comboName)}\"`, textStyle));\n\n        row.updateChildrenPosition();\n        row.y = row.height / 2;\n        this.addChild(row);\n    }\n\n    displayChooseBet() {\n        this.removeChildren();\n        const texts = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL\n        });\n        texts.x = 30;\n\n        const textStyleWhite = {\n            fontSize: 18,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 4\n        };\n        const textStyleOrange = {\n            fontSize: 18,\n            fill: 0xff9763,\n            stroke: 0,\n            strokeThickness: 4\n        };\n\n        // TODO: Abstractize this part\n        const text = i18n.t('Bet.ChooseBet');\n        let bold = false;\n        let beginIndex = 0;\n        for (let index = 0; index < text.length; index++) {\n            const isLastItem = index + 1 >= text.length;\n            if ((!bold && text.charAt(index) === '*') || isLastItem) {\n                texts.addChild(new PIXI.Text(text.slice(beginIndex, isLastItem ? index + 1 : index).trim(), textStyleWhite));\n                beginIndex = index+1;\n                bold = true;\n                index++;\n            } else if ((bold && text.charAt(index) === '*') || isLastItem) {\n                texts.addChild(new PIXI.Text(text.slice(beginIndex, isLastItem ? index + 1 : index).trim(), textStyleOrange));\n                beginIndex = index+1;\n                bold = false;\n                index++;\n            }\n        }\n\n        texts.updateChildrenPosition();\n        texts.y = texts.height / 2;\n        this.addChild(texts);\n    }\n\n}","import PIXI from 'pixi.js';\n\nexport default class GUICursor extends PIXI.Graphics {\n    \n    constructor() {\n        super();\n        const WIDTH = 15;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(2, 0, 1)\n            .moveTo(0, 0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT/2)\n            .lineTo(0, HEIGHT)\n            .lineTo(0,0)\n            .endFill();\n        this.pivot.set(WIDTH, -HEIGHT/2);\n    }\n\n    update(game) {\n        this.x += Math.cos(game._frame / 10) / 6;\n    }\n\n}","import ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport GUICursor from './GUICursor';\nimport LinearLayout from '../LinearLayout';\nimport Keyboard from '../../lib/Keyboard';\n\nconst MENU_ITEM_FONT_SIZE = {\n    2: 22\n};\n\nexport default class ContextualMenu extends ContextualBox {\n\n    constructor() {\n        super();\n        /** @type {GUICursor} */\n        this.currentCursor = null;\n        this.currentCursorIndex = 0;\n    }\n\n    removeChildren() {\n        this.currentCursorIndex = 0;\n        if (this.currentCursor) this.currentCursor = null;\n        super.removeChildren();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth()*4/5;\n        const rect = new Rect(0, this.parent.getWidth()*1/5, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayMenu(menuItems) {\n        this.removeChildren();\n        const layout = new LinearLayout();\n        for (let index = 0; index < menuItems.length; index++) {\n            const menuDesc = menuItems[index];\n            const menuitem = new PIXI.Text(menuDesc.label, {\n                fontSize: MENU_ITEM_FONT_SIZE[menuItems.length],\n                fill: 0xffffff,\n                stroke: 0,\n                strokeThickness: 3\n            });\n            menuitem.menuItemIndex = index;\n            menuitem.menuItemCallback = menuDesc.callback;\n            layout.addChild(menuitem);\n        }\n        \n        layout.updateChildrenPosition();\n        layout.x = this.width / 2- layout.width / 2;\n        layout.y = layout.height / 2;\n        this.addChild(layout);\n        this.currentCursor = new GUICursor();\n        this.addChild(this.currentCursor);\n        this.setCursorIndex(0);\n    }\n\n    setCursorIndex(index) {\n        const menuItems = this.getChildAt(0).children;\n        if (index < 0) index = menuItems.length - 1;\n        if (index >= menuItems.length) index = 0;\n        const position = this.getChildAt(0).getChildPositionAt(index);\n        this.currentCursor.y = position.y;\n        this.currentCursor.x = position.x - 15;\n        this.currentCursorIndex = index;\n    }\n    \n    hasCursor() {\n        return this.currentCursor !== null;\n    }\n\n    update(game) {\n        super.update(game);\n        if (this.hasCursor()) {\n            this.currentCursor.update(game);\n            if (Keyboard.isKeyReleased(Keyboard.UP_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex - 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.DOWN_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex + 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.ENTER)) {\n                let item = this.getChildAt(0).getChildAt(this.currentCursorIndex);\n                if (item && item.menuItemCallback) item.menuItemCallback();\n            }\n        }\n    }\n\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport ContextualDisplayer from './contextual-menu/ContextualDisplayer';\nimport ContextualMenu from './contextual-menu/ContextualMenu';\nimport Game from '../Game';\nimport i18n from '../i18n';\n\nconst MARGIN_HONRIZONTAL = 10;\nconst MARGIN_VERTICAL = 15;\n\nexport default class GUIContext extends UpdatableContainer {\n\n    constructor(x, y, game) {\n        super();\n        /** @type {Game} */\n        this.game = game;\n        this.x = x + MARGIN_HONRIZONTAL;\n        this.y = y - MARGIN_VERTICAL;\n        this.addChild(new ContextualDisplayer());\n        this.addChild(new ContextualMenu());\n    }\n\n    destroy() {\n        this.game = null;\n        super.destroy();\n    }\n\n    update(game) {\n        this._width = game.renderer.width - MARGIN_HONRIZONTAL * 2;\n        this._height = game.renderer.height - this.y - MARGIN_VERTICAL; \n        super.update(game);\n    }\n\n    getWidth() {\n        return this._width;\n    }\n\n    getHeight() {\n        return this._height;\n    }\n\n    displayControls() {\n        this.getChildAt(0).displayControls();\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayCombo(combo) {\n        this.getChildAt(0).displayCombo(combo);\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayChooseBet() {\n        this.getChildAt(0).displayChooseBet();\n        this.getChildAt(1).displayMenu([\n            {\n                label: i18n.t('Yes'),\n                callback: () => this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_UP_OR_DOWN)\n            },\n            {\n                label: i18n.t('No'),\n                callback: () => {\n                    this.game.tokenCount += this.game.betCount;\n                    this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS)\n                }\n            }\n        ]);\n    }\n\n    displayMenu() {\n\n    }\n\n}","import PIXI from 'pixi.js';\nimport i18n from '../../i18n';\nimport {ComboType} from '../../CardComboList';\nimport {GuiText} from '../../Config';\n\nexport default class GUIComboTypeItem extends PIXI.Container {\n    constructor(options) {\n        super();\n        this.comboType = options.comboType;\n        this.parentWidth = options.parentWidth;\n        this.redraw();\n    }\n\n    redraw() {\n        this.removeChildren();\n        const comboName = ComboType.forName(this.comboType);\n        const localeComboName = i18n.t(`ComboType.${comboName}`);\n        this.addChild(new PIXI.Text(localeComboName, GuiText.textConfig));\n        const factorText = new PIXI.Text(`\\u00D7 ${this.comboType}`, GuiText.textConfig);\n\n        factorText.x = this.parentWidth - 50;\n        this.addChild(factorText);\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport LinearLayout from '../LinearLayout';\nimport {ComboType} from '../../CardComboList';\nimport i18n from '../../i18n';\nimport Numbers from '../../Numbers';\nimport GUIComboTypeItem from './GUIComboTypeItem';\n\nexport default class GUIComboTypesList extends ContextualBox {\n    constructor(options) {\n        super();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        const rect = new Rect(0, this.parent.getWidth() * 4/5 - 10, this.parent.getHeight()/4, 0);\n        this._drawBox(graphics, rect);\n        this.drawLists();\n    }\n\n    drawLists() {\n        const MARGIN_HOR = 20;\n        const width = this.width - MARGIN_HOR * 2;\n        const linearLayoutWidth = width / 2 - MARGIN_HOR;\n\n        const col1 = new LinearLayout({\n            childMargin: 4,\n            x: MARGIN_HOR * 1.5 + 5,\n            y: 12\n        });\n\n        const col2 = new LinearLayout({\n            childMargin: 4,\n            x: width/2 + col1.x,\n            y: 12\n        });\n\n        this.removeChildren();\n        this.addChild(col1);\n        this.addChild(col2);\n\n        const values = Object.keys(ComboType).map((d) => ComboType[d]).sort(Numbers.Compare.desc);\n        [\n            values.slice(0, Math.floor(values.length/2)),\n            values.slice(Math.floor(values.length/2), values.length)\n        ].forEach(function (values, i) {\n            const layout = this.getChildAt(i);\n            values.forEach(function (value) {\n                layout.addChild(new GUIComboTypeItem({\n                    comboType: value,\n                    parentWidth: linearLayoutWidth\n                }));\n            }, this);\n            layout.updateChildrenPosition();\n        }, this);\n\n\n\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport i18n from '../../i18n';\nimport {GuiText,GuiToken} from '../../Config';\n\nexport default class GUIBetBox extends ContextualBox {\n\n    constructor() {\n        super();\n        this.addChild(new PIXI.Text(i18n.t('Bet.Bet'), GuiText.textConfig));\n        this.addChild(this.betText = new PIXI.Text('0', GuiToken.textConfig))\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth() * 4 / 5;\n        this.y = this.parent.getHeight()/8+5;\n        const rect = new Rect(\n            0,\n            this.parent.getWidth() - 10 - this.x,\n            this.parent.getHeight()/4 - this.y,\n            0\n        );\n        this._drawBox(graphics, rect);\n        this.getChildAt(0).position.set(10, 10);\n    }\n\n    update(game) {\n        super.update(game);\n        this.betText.text = game.betCount;\n        this.betText.position.set( this.width - this.betText.width - 10, this.height - this.betText.height - 10 );\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport i18n from '../../i18n';\nimport {GuiText,GuiToken} from '../../Config';\n\nexport default class GUITokenCount extends ContextualBox {\n\n    constructor() {\n        super();\n        this.addChild(new PIXI.Text(i18n.t('TotalToken'), GuiText.textConfig));\n        this.addChild(this.totalTokenText = new PIXI.Text('0', GuiToken.textConfig));\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth() * 4 / 5;\n        const rect = new Rect(\n            0,\n            this.parent.getWidth() - 10 - this.x,\n            this.parent.getHeight()/8 - 5,\n            0);\n        this._drawBox(graphics, rect);\n        this.getChildAt(0).position.set(10, 10);\n    }\n\n    update(game) {\n        super.update(game);\n        this.totalTokenText.text = game.tokenCount;\n        this.totalTokenText.position.set( this.width - this.totalTokenText.width - 10, this.height - this.totalTokenText.height - 10 );\n    }\n};\n","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport GUIComboTypesList from './top-menu/GUIComboTypesList';\nimport GUIBetBox from './top-menu/GUIBetBox';\nimport GUITokenCount from './top-menu/GUITokenCount';\nconst MARGIN_HONRIZONTAL = 10;\nconst MARGIN_VERTICAL = 15;\n\nexport default class TopMenuLayout extends UpdatableContainer {\n    constructor(x, y, game) {\n        super();\n        this.game = game;\n        this.x = x + MARGIN_HONRIZONTAL;\n        this.y = y + MARGIN_VERTICAL;\n        this.addChild(new GUIComboTypesList());\n        this.addChild(new GUIBetBox());\n        this.addChild(new GUITokenCount());\n    }\n\n    destroy() {\n        this.game = null;\n        super.destroy();\n    }\n\n    update(game) {\n        this._width = game.renderer.width - MARGIN_HONRIZONTAL * 2;\n        this._height = game.renderer.height - this.y - MARGIN_VERTICAL;\n        super.update(game);\n    }\n\n    getWidth() { return this._width; }\n    getHeight() { return this._height; }\n};\n","import PIXI from 'pixi.js';\nimport LinearLayout from '../gui/LinearLayout';\nimport CardsGenerator from '../CardsGenerator';\nimport CardCollection from '../CardCollection';\nimport Card from '../Card';\n\nexport default class AbsCardArea extends LinearLayout {\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} cardSlots\n     */\n    constructor(x, y, cardSlots) {\n        super({ \n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: CardsGenerator.CARD_WIDTH / 10\n        });\n        this.x = x;\n        this.y = y;\n        /** @type {number} */\n        this.cardSlots = cardSlots;\n        /** @type {Card[]} */\n        this.slots = new Array(this.cardSlots);\n        this.updateLayoutPivot();\n    }\n\n    destroyChildren() {\n        this.slots = new Array(this.cardSlots);\n        return super.destroyChildren();\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    removeCardAt(index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        const card = this.slots[index];\n        if (card) {\n            this.removeChild(card);\n            this.slots[index] = null;\n        }\n        return card;\n    }\n\n    /**\n     * @param {Card} card\n     * @returns {Card}\n     */\n    removeCard(card) {\n        return this.removeCardAt(this.slots.indexOf(card));\n    }\n\n    /**\n     * @returns {CardCollection}\n     */\n    getCards() {\n        return new CardCollection(this.slots.slice(0))\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    getCardAt(index) {\n        return this.slots[index];\n    }\n\n    /**\n     * @param {number} index\n     * @returns {PIXI.Point}\n     */\n    getCardPositionAt(index) {\n        return this.getChildPosition(this.getCardAt(index));\n    }\n\n    /**\n     * Find the first empty card slot index\n     * @returns {number}\n     */\n    findFirstEmptySlot() {\n        for (let index = 0; index < this.cardSlots; index++) {\n            if (!this.slots[index]) return index;\n        }\n        return -1;\n    }\n\n    /**\n     * Add a child to the first empty card slot\n     * @param {Card} card\n     */\n    addCard(card) {\n        return this.addCardAt(card, this.findFirstEmptySlot());\n    }\n\n    /**\n     * Add a child to a slot\n     * @param {Card} card\n     * @param {number} index\n     */\n    addCardAt(card, index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        if (this.slots[index]) {\n            this.removeChild(this.slots[index]);\n        }\n        this.slots[index] = card;\n        this.updateChildrenPosition();\n        return super.addChild(card);\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.cardSlots; index++) {\n            const card = this.getCardAt(index);\n            if (card) card[this._posPropertyName] = pos;\n            pos += CardsGenerator.CARD_WIDTH + this.childMargin;\n        }\n    }\n\n    updateLayoutPivot() {\n        const width = this.cardSlots * CardsGenerator.CARD_WIDTH + (this.cardSlots-1) * this.childMargin;\n        this.pivot.set(width / 2, 0);\n    }\n\n    update(game) {}\n\n}","import AbsCardArea from './AbsCardArea';\n\nexport default class CardRiverArea extends AbsCardArea {\n\n    constructor(x, y) {\n        super(x, y, 5);\n        this.selectedCardsToBeChanged = [];\n    }\n\n    setSelectedCardIndex(index, swt) {\n        const card = this.getCardAt(index);\n        const indexOfCard = this.selectedCardsToBeChanged.indexOf(card);\n        const isSelected = indexOfCard > -1;\n        if (isSelected && swt || !isSelected && !swt) return; \n        if (swt) this.selectedCardsToBeChanged.push(card);\n        else this.selectedCardsToBeChanged.splice(indexOfCard, 1);\n        card.y += swt ? -20 : 20;\n    }\n\n}","import UpdatableContainer from './containers/UpdatableContainer';\nimport CardsGenerator from './CardsGenerator';\nimport {CardComboList} from './CardComboList';\nimport LinearLayout from './gui/LinearLayout';\nimport GUICombosList from './gui/debug/GUICombosList';\nimport GUICardSelector from './gui/GUICardSelector';\nimport Keyboard from './lib/Keyboard';\nimport GUIText from './lib/GUIText';\nimport Tracker from './Tracker';\n\nimport GUIScoreLayout from './gui/GUIScoreLayout';\nimport GUIContext from './gui/GUIContext';\nimport TopMenuLayout from './gui/TopMenuLayout';\n\nimport CardCollection from './CardCollection';\n\nimport AbsCardArea from './containers/AbsCardArea';\nimport CardRiverArea from './containers/CardRiverArea';\n\nimport i18n from './i18n';\n\nconst ticker = PIXI.ticker.shared;//new PIXI.ticker.Ticker();\n\nexport default class Game {\n\n    constructor(options) {\n        this._frame = 0;\n        /** @type {CardCollection} */\n        this.cards = null;\n        /** @type {AbsCardArea} */\n        this.river = null;\n\n        i18n.setup(options.langs);\n\n        this.tokenCount = 54960;\n        this.originalBetCount = 100;\n        this.betCount = 100;\n\n        this.gameState = Game.GAME_IDLE;\n        this.playingGameState = Game.STATE_PLAYING_CHOOSE_BET;\n\n        this.fg = new UpdatableContainer();\n        this.gui = new UpdatableContainer();\n        this.renderingContainer = new PIXI.Container();\n        this.renderingContainer.addChild(this.fg);\n        this.renderingContainer.addChild(this.gui);\n        // create renderer\n        const rendererOptions = {\n            transparent: options.transparent || false,\n            autoResize: options.autoResize || false,\n            antialias: options.antialias || false,\n            resolution: options.resolution || 1,\n            clearBeforeRender: true,\n            backgroundColor: options.backgroundColor,\n            roundPixels: options.roundPixels || true\n        };\n        this.renderer = PIXI.autoDetectRenderer(options.width || 800, options.height || 600, rendererOptions, false);\n        /** @type {HTMLElement} */\n        this.container = null;\n        if (options.container) {\n            this.container = options.container;\n            this.container.appendChild(this.renderer.view);\n        }\n        this.setSize(this.renderer.width, this.renderer.height);\n    }\n\n    destroy() {\n        this.clearGame();\n        this.fg.destroy();\n        this.gui.destroy();\n        this.renderer.destroy();\n        this.fg = null;\n        this.gui = null;\n        this.renderer = null;\n    }\n\n    clearGame() {\n        this.stop();\n        if (this.cards) this.cards.destroy();\n        this.cards = null;\n        this.player = null;\n        this.fg.destroyChildren();\n        this.gui.destroyChildren();\n    }\n\n    newGame() {\n        this.gameState = Game.STATE_IDLE;\n\n        const stageWidth = this.renderer.width;\n        const stageHeight = this.renderer.height;\n        this.river = new CardRiverArea(stageWidth/2, stageHeight/4*2);\n        this.fg.addChild(this.river);\n        const contextualBox = new GUIContext(0, stageHeight * 5/6, this);\n        const topMenu = new TopMenuLayout(0, 0, this);\n\n        this.fg.addChild(contextualBox);\n        this.fg.addChild(topMenu);\n        contextualBox.update(this);\n        topMenu.update(this);\n        this.clearBoard();\n        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n          \n    }\n\n    clearBoard() {\n        this.river.destroyChildren();\n        if (this.cards) this.cards.destroy();\n        this.cards = CardsGenerator.generateCards().shuffle();\n    }\n\n    distribute(count) {\n        \n        // const forcedCards = 0;\n        // [ 3, 2, 1, 0, CardsGenerator.JOKER_VALUE ].forEach(function (value) {\n        //     const card = this.cards.getByValue(value);\n        //     this.river.addChild(card);\n        //     this.cards.remove(card);\n        // }, this);\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(2);\n        // //     if (i > 3) card = this.cards.getByValue(4);\n        // //     this.river.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(i + 1);\n        // //     this.river.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n\n        for (let index = 0; index < count; index++) {\n            let card = this.cards.peek();\n            this.river.addCard(card);\n            this.cards.remove(card);\n        }\n    }\n\n    displayCardCursorSelection() {\n        const p = this.river.getCardAt(0);\n        const cursor = new GUICardSelector(p.x + CardsGenerator.CARD_WIDTH / 2, p.y + CardsGenerator.CARD_HEIGHT + 25)\n        cursor.setCursorCardIndex(this, 0);\n        this.gui.addChild(cursor);\n    }\n\n    setState(state) {\n        this.gameState = state;\n    }\n\n    setPlayingState(state) {\n        this.playingGameState = state;\n        switch (state) {\n            case Game.STATE_PLAYING_CHOOSE_CARDS:\n                this.betCount = this.originalBetCount;\n                this.tokenCount -= this.originalBetCount;\n                Tracker.track('game:new');\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayControls();\n                this.clearBoard();\n                this.distribute(5);\n                this.displayCardCursorSelection();\n                break;\n            case Game.STATE_PLAYING_DISPLAY_RIVER_SCORE:\n                this.commitChanges();\n                const combo = this.getCardComboList().getHigherCombo() || null;\n                if (combo) {\n                    combo.getCards().forEach(function (d) {\n                        d.highlight();\n                    });\n                    Tracker.track('combo', {\n                        type: combo.getTypeName(),\n                        cards: combo.getCards().map(String)\n                    });\n                    this.betCount = this.originalBetCount * combo.type;\n                }\n                this.fg.findChildrenByType(GUIContext).displayCombo(combo);\n                this.gui.addChild(new GUIScoreLayout({\n                    playerCombo: combo,\n                    game: this\n                }));\n                \n                break;\n            case Game.STATE_PLAYING_CHOOSE_RISK:\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayChooseBet();\n                break;\n            \n        }\n    }\n\n    getFPS() {\n        return ticker.FPS;\n    }\n\n    isRunning() {\n        return ticker.started;\n    }\n\n    isPlaying() {\n        return this.gameState === Game.GAME_PLAYING;\n    }\n\n    getSize() {\n        return { width: this.renderer.width, height: this.renderer.height };\n    }\n\n    setSize(w, h) {\n        if (this.container) {\n            this.container.style.width = `${w}px`;\n            this.container.style.height = `${h}px`;\n        }\n        if (this.renderer.width !== w || this.renderer.height !== h) {\n            this.renderer.resize(w, h);\n        }\n    }\n\n    start() {\n        if (!this.isRunning()) {\n            if (this.gameState === Game.GAME_IDLE) {\n                this.setState(Game.STATE_PLAYING);\n            }\n            ticker.add(this.loop, this);\n            ticker.start();\n        }\n    }\n\n    stop() {\n        if (this.isRunning()) {\n            ticker.stop();\n            ticker.remove(this.loop, this);\n        }\n    }\n\n    loop(time) {\n        this._frame += 1;\n\n        this.fg.update(this);\n        this.gui.update(this);\n        if (this.gameState === Game.STATE_PLAYING) {\n            if (this.playingGameState === Game.STATE_PLAYING_CHOOSE_CARDS) {\n                if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    this.setPlayingState(Game.STATE_PLAYING_DISPLAY_RIVER_SCORE);\n                }\n            } else if (this.playingGameState === Game.STATE_PLAYING_DISPLAY_RIVER_SCORE) {\n                let scoreLayout = this.gui.findChildrenByType(GUIScoreLayout);  \n                if (scoreLayout.scoreState === GUIScoreLayout.STATE_TRANSITION_TERMINATED || Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    if (!scoreLayout.playerCombo || scoreLayout.playerCombo.type < 2) {\n                        if (scoreLayout.playerCombo) {\n                            this.tokenCount += this.betCount;\n                        }\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n                    } else {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_RISK);\n                    }\n                }\n            }\n        }\n\n        if (this.gameState === Game.STATE_IDLE) {\n            this.gameState = Game.STATE_PLAYING;\n            this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n        }\n\n        this.renderer.render(this.renderingContainer);\n        Keyboard.update();\n    }\n\n    getCardComboList() {\n        return new CardComboList(this.river.getCards());\n    }\n\n    commitChanges() {\n        const cards = this.river.selectedCardsToBeChanged.splice(0, this.river.selectedCardsToBeChanged.length);\n        const cardsLen = cards.length;\n        for (let index = 0; index < cardsLen; index++) {\n            this.river.removeCard(cards[index]);\n            cards[index].destroy(); \n        }\n        this.distribute(cardsLen);\n    }\n\n\n    /**\n     * \n     * @param {Function} GuiClass - The GuiClass to instantiate\n     * @param {boolean=} swt - true will create an instance if it doesnt exists, false will destroy it\n     */\n    toggleGuiElementPresence(GuiClass, swt) {\n        let instance = this.gui.children.find((d) => d instanceof GuiClass);\n        if (typeof swt === 'undefined') swt = !instance;\n        if (!instance && swt) {\n            instance = new GuiClass();\n            this.gui.addChild(instance);\n        } else if (instance && !swt) {\n            instance.destroy();\n        }\n    }\n\n};\n\nGame.STATE_IDLE = 0;\nGame.STATE_INTRO = 1;\nGame.STATE_PLAYING = 2;\nGame.STATE_GAMEOVER = 4;\n\nGame.STATE_PLAYING_CHOOSE_BET = 1;\nGame.STATE_PLAYING_CHOOSE_CARDS = 2;\nGame.STATE_PLAYING_EXCHANGE_CARD_TRANSITION = 4;\nGame.STATE_PLAYING_DISPLAY_RIVER_SCORE = 8;\nGame.STATE_PLAYING_CHOOSE_RISK = 16;\nGame.STATE_PLAYING_CHOOSE_UP_OR_DOWN = 32;\nGame.STATE_PLAYING_UP_OR_DOWN_SCORE = 64;\n\n","import Game from './Game';\nimport Card from './Card';\nimport Tracker from './Tracker';\nimport {version} from '../package.json';\n\nGame.VERSION = version;\nGame.BUILD_TIME = '{BUILD_TIME}';\n\nTracker.track('pageview');\n\nexport default {\n    Game\n};"],"names":["UpdatableContainer","game","updateChildren","children","forEach","d","destroy","removeChildren","child","update","Type","find","filter","PIXI","Container","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","Card","options","value","suit","width","height","originalWidth","originalHeight","drawBackground","valueText","Text","getValue","suitText","getSuit","isHighlighted","y","anchor","set","addChild","shadowSteps","clear","lineStyle","beginFill","drawRoundedRect","endFill","CardsGenerator","JOKER_VALUE","JOKER","SUITS","VALUE_LABELS","Graphics","CardCollection","arrayOfCard","isArray","cards","slice","push","card","index","indexOf","splice","c","output","input","toArray","length","floor","random","toString","suitIndex","valueIndex","CARD_WIDTH","CARD_HEIGHT","_identity","array","predicate","ids","id","a","b","min","max","ComboType","Object","defineProperty","forName","type","keys","key","CardComboList","cardsCollection","originalCollection","combos","_parse","objects","add","object","cardCombo","CardCombo","sort","addAll","_getXOfAKind","twoPairsCombo","_getTwoPairs","straightCombo","_getStraight","flushCombo","_getFlush","fullHouseCombo","_getFullHouse","straightFlushCombo","_getStraightFlush","Numbers","Compare","desc","getScore","pairs","combo","Pair","_isAllCardDifferents","TwoPair","concat","map","comboTypeMapper","ThreeOfAKind","FourOfAKind","FiveOfAKind","cardIndex","localeCards","isJoker","Arrays","uniq","getId","pair","threeOfAKind","FullHouse","getCards","values","asc","jokers","match","Straight","firstSuit","Flush","flush","straight","StraightFlush","c1","c2","c1Cards","c2Cards","i1","i2","join","peek","_sortCards","out","getTypeName","LinearLayout","childMargin","setOrientation","orientation","ORIENTATION_VERTICAL","_orientation","_posPropertyName","_sizePropertyName","ORIENTATION_HORIZONTAL","childIndex","getChildPosition","getChildAt","Point","pivot","updateChildrenPosition","pos","Debug","BigText","GuiText","GuiToken","GUICombosList","textConfig","text","getCardComboList","keyboardState","Map","lastKeyboardState","Keyboard","keyCode","get","isKeyUp","isKeyDown","window","addEventListener","event","GUICardSelector","WIDTH","HEIGHT","moveTo","lineTo","originalY","river","cardSlots","p","getCardPositionAt","cos","_frame","isKeyPushed","LEFT_ARROW","setCursorCardIndex","RIGHT_ARROW","UP_ARROW","SHIFT","setSelectedCardIndex","DOWN_ARROW","ENTER","Timer","targetedTime","ticker","shared","target","time","isStarted","stop","tick","remove","elapsedMS","TransformAnimation","posFrom","posTo","scaleFrom","isNaN","scaleTo","rotationFrom","rotationTo","alphaFrom","alphaTo","timer","duration","callback","interpolator","sprite","start","rawRatio","ratio","setTransform","alpha","GUIText","textStyle","tags","animation","setAnimation","isMe","localStorage","getItem","stopTracking","test","location","mixpanel","console","log","identify","eventName","properties","track","languages","currentLang","langs","chainedName","names","split","currentObject","keyName","babelHelpers.typeof","TRANSITION_DURATION","TRANSITION_DELAY","GUIScoreLayout","playerCombo","iaCombo","spawnSuitName","spawnComparison","rendererWidth","renderer","rendererHeight","_lastScoreState","scoreState","STATE_TRANSITION_IDLE","isDestroyed","comboName","i18n","t","iaScore","playerScore","comparisonLabel","state","getSuitText","getInAnimation","changeState","STATE_TRANSITION_COMPARISON","STATE_TRANSITION_SUIT","getComparisonText","STATE_TRANSITION_COMPARISON_ENDING","getOutAnimation","STATE_TRANSITION_TERMINATED","ContextualBox","_isValid","drawBox","graphics","rect","left","top","right","bottom","Rect","ContextualDisplayer","parent","getWidth","getHeight","_drawBox","col1","col2","rows","label","row","texts","textStyleWhite","textStyleOrange","bold","beginIndex","isLastItem","charAt","trim","GUICursor","MENU_ITEM_FONT_SIZE","ContextualMenu","currentCursor","currentCursorIndex","menuItems","layout","menuDesc","menuitem","menuItemIndex","menuItemCallback","setCursorIndex","position","getChildPositionAt","hasCursor","isKeyReleased","item","MARGIN_HONRIZONTAL","MARGIN_VERTICAL","GUIContext","_width","_height","displayControls","displayCombo","displayChooseBet","displayMenu","setPlayingState","Game","STATE_PLAYING_CHOOSE_UP_OR_DOWN","tokenCount","betCount","STATE_PLAYING_CHOOSE_CARDS","GUIComboTypeItem","comboType","parentWidth","redraw","localeComboName","factorText","GUIComboTypesList","drawLists","MARGIN_HOR","linearLayoutWidth","GUIBetBox","betText","GUITokenCount","totalTokenText","TopMenuLayout","AbsCardArea","slots","updateLayoutPivot","removeChild","removeCardAt","getCardAt","addCardAt","findFirstEmptySlot","CardRiverArea","selectedCardsToBeChanged","swt","indexOfCard","isSelected","setup","originalBetCount","gameState","GAME_IDLE","playingGameState","STATE_PLAYING_CHOOSE_BET","fg","gui","renderingContainer","rendererOptions","transparent","autoResize","antialias","resolution","backgroundColor","roundPixels","autoDetectRenderer","container","appendChild","view","setSize","clearGame","player","destroyChildren","STATE_IDLE","stageWidth","stageHeight","contextualBox","topMenu","clearBoard","generateCards","shuffle","count","addCard","cursor","findChildrenByType","distribute","displayCardCursorSelection","STATE_PLAYING_DISPLAY_RIVER_SCORE","commitChanges","getHigherCombo","highlight","String","STATE_PLAYING_CHOOSE_RISK","FPS","started","GAME_PLAYING","w","h","style","resize","isRunning","setState","STATE_PLAYING","loop","scoreLayout","render","cardsLen","removeCard","GuiClass","instance","STATE_INTRO","STATE_GAMEOVER","STATE_PLAYING_EXCHANGE_CARD_TRANSITION","STATE_PLAYING_UP_OR_DOWN_SCORE","VERSION","version","BUILD_TIME","Tracker"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}