{"version":3,"file":"poker_game.js","sources":["src/lib/Keyboard.js","src/Tracker.js","src/CardsGenerator.js","src/lib/BezierEasing.js","src/Card.js","src/CardCollection.js","src/Arrays.js","src/Numbers.js","src/CardComboList.js","src/i18n.js","src/containers/UpdatableContainer.js","src/gui/LinearLayout.js","src/Score.js","src/gui/GUICardSelector.js","src/lib/Timer.js","src/lib/TransformAnimation.js","src/lib/GUIText.js","src/Config.js","src/gui/AbsScoreLayout.js","src/gui/GUIScoreLayout.js","src/gui/GUIBetScore.js","src/gui/ContextualBox.js","src/lib/Rect.js","src/gui/contextual-menu/ContextualDisplayer.js","src/gui/contextual-menu/GUICursor.js","src/gui/contextual-menu/ContextualMenu.js","src/gui/GUIContext.js","src/gui/top-menu/GUIComboTypeItem.js","src/gui/top-menu/GUIComboTypesList.js","src/gui/top-menu/GUIBetBox.js","src/gui/top-menu/GUITokenCount.js","src/gui/TopMenuLayout.js","src/containers/AbsCardArea.js","src/containers/CardRiverArea.js","src/containers/CardBetArea.js","src/Game.js","src/poker_game.js"],"sourcesContent":["let keyboardState = new Map();\nlet lastKeyboardState = new Map();\nconst keyboardEventHandlers = new Map();\nconst Keyboard = {\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPS_LOCK: 20,\n  ESCAPE: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n  INSERT: 45,\n  DELETE: 46,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n  LEFT_WINDOW_KEY: 91,\n  RIGHT_WINDOW_KEY: 92,\n  SELECT_KEY: 93,\n  NUMPAD_0: 96,\n  NUMPAD_1: 97,\n  NUMPAD_2: 98,\n  NUMPAD_3: 99,\n  NUMPAD_4: 100,\n  NUMPAD_5: 101,\n  NUMPAD_6: 102,\n  NUMPAD_7: 103,\n  NUMPAD_8: 104,\n  NUMPAD_9: 105,\n  MULTIPLY: 106,\n  ADD: 107,\n  SUBTRACT: 109,\n  DECIMAL_POINT: 110,\n  DIVIDE: 111,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  NUM_LOCK: 144,\n  SCROLL_LOCK: 145,\n  SEMI_COLON: 186,\n  EQUAL_SIGN: 187,\n  COMMA: 188,\n  DASH: 189,\n  PERIOD: 190,\n  FORWARD_SLASH: 191,\n  GRAVE_ACCENT: 192,\n  OPEN_BRACKET: 219,\n  BACK_SLASH: 220,\n  CLOSE_BRAKET: 221,\n  SINGLE_QUOTE: 222,\n  isKeyDown(keyCode) {\n    return !!keyboardState.get(keyCode);\n  },\n  isKeyUp(keyCode) {\n    return !keyboardState.get(keyCode);\n  },\n  isKeyReleased(keyCode) {\n    return Keyboard.isKeyUp(keyCode) && lastKeyboardState.get(keyCode);\n  },\n  isKeyPushed(keyCode) {\n    return Keyboard.isKeyDown(keyCode) && !lastKeyboardState.get(keyCode);\n  },\n  update() {\n    lastKeyboardState = keyboardState;\n    keyboardState = new Map(lastKeyboardState);\n  }\n};\n// Keep state of all action\nwindow.addEventListener('keyup', function (event) {\n    keyboardState.set(event.keyCode, false);\n});\nwindow.addEventListener('keydown', function (event) {\n    keyboardState.set(event.keyCode, true);\n});\n\nexport default Keyboard;","const isMe = !!localStorage.getItem('isMe');\nconst stopTracking = !!localStorage.getItem('StopTracking') || /localhost\\:8080/.test(location.toString()) || typeof mixpanel === 'undefined';\n\nif (stopTracking) console.log('stop-tracking');\n\nif (isMe) {\n    mixpanel.identify('1');\n}\n\nexport default {\n    /**\n     * @param {String} eventName\n     * @param {Object} properties\n     * @param {Function} callback\n     */\n    track(eventName, properties, callback) {\n        if (stopTracking) return;\n        mixpanel.track(eventName, properties, callback);\n    }\n};\n\n","import CardCollection from './CardCollection';\nimport Card from './Card';\n\nconst CardsGenerator = {\n    CARD_WIDTH: 370 / 4,\n    CARD_HEIGHT: 522 / 4,\n    JOKER: 'Joker',\n    JOKER_VALUE: 13,\n    SUITS: [ 'Spades', 'Hearts', 'Diamonds', 'Clubs' ],\n    VALUE_LABELS: [ '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace' ],\n    generateCards() {\n        const output = [];\n        for (let suitIndex = 0; suitIndex < CardsGenerator.SUITS.length; suitIndex++) {\n            for (let valueIndex = 0; valueIndex < CardsGenerator.VALUE_LABELS.length; valueIndex++) {\n                output.push(new Card({\n                    width: CardsGenerator.CARD_WIDTH,\n                    height: CardsGenerator.CARD_HEIGHT,\n                    suit: suitIndex,\n                    value: valueIndex\n                }));\n            }\n        }\n        for (let index = 0; index < 2; index++) {\n            output.push(new Card({ \n                width: CardsGenerator.CARD_WIDTH,\n                height: CardsGenerator.CARD_HEIGHT,\n                suit: CardsGenerator.JOKER,\n                value: CardsGenerator.JOKER_VALUE\n            }));\n        }\n        return new CardCollection(output);\n    }\n};\n\nexport default CardsGenerator;\n","\n/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n    return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX, currentT, i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        } else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\n\nexport default function bezier(mX1, mY1, mX2, mY2) {\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n        for (var i = 0; i < kSplineTableSize; ++i) {\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    function getTForX(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }--currentSample;\n\n        // Interpolate to provide an initial guess for t\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    return function BezierEasing(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}; ","import PIXI from 'pixi.js';\nimport CardsGenerator from './CardsGenerator';\nimport BezierEasing from './lib/BezierEasing';\n\nexport default class Card extends PIXI.Graphics {\n\n  constructor(options) {\n    super();\n    this.value = options.value;\n    this.suit  = options.suit;\n\n    const width = options.width;\n    const height = options.height;\n    this.originalWidth = options.width;\n    this.originalHeight = options.height;\n    this.drawBackground();\n    const valueText = new PIXI.Text(this.getValue(), {\n      fontSize: 26,\n      fill: 0xd8d8d8,\n      align: 'center',\n    });\n    const suitText = new PIXI.Text(this.getSuit(), {\n      fontSize: 14,\n      fill: 0xd8d8d8,\n      align: 'center'\n    });\n    this.isHighlighted = false;\n    valueText.x = width/2;\n    valueText.y = 30;\n    valueText.anchor.set(0.5,0.5);\n    suitText.x = width/2;\n    suitText.y = height/2;\n    suitText.anchor.set(0.5,0.5);\n    this.addChild(valueText);\n    this.addChild(suitText);\n  }\n\n  drawBackground() {\n    const shadowSteps = 10;\n    this.clear().lineStyle(1, 0x000000, 1)\n      .beginFill(this.suit === 1 || this.suit === 2 ? 0xFF0000 : 0, 0.5)\n      .drawRoundedRect(0, 0, this.originalWidth, this.originalHeight, this.originalWidth/10)\n      .endFill();\n    if (this.isHighlighted) {\n      for (let i = 1; i < shadowSteps; i++) {\n        this.lineStyle(1, 0xffff00, 0.8 - i / shadowSteps)\n          .drawRoundedRect(-i, -i, this.originalWidth+i*2, this.originalHeight+i*2, this.originalWidth/10);\n      }\n      \n    }\n  }\n\n  highlight() {\n    this.isHighlighted = true;\n    this.drawBackground();\n  }\n\n  isJoker() {\n    return this.value === CardsGenerator.JOKER_VALUE;\n  }\n\n  getSuit() {\n    if (this.suit === CardsGenerator.JOKER) return 'Joker';\n    return CardsGenerator.SUITS[this.suit];\n  }\n\n  getValue() {\n    if (this.value === CardsGenerator.JOKER_VALUE) return 'Joker';\n    return CardsGenerator.VALUE_LABELS[this.value];\n  }\n\n  toString() {\n    return `${this.getValue()} of ${this.getSuit()}`;\n  }\n\n}","import Card from './Card';\n\nexport default class CardCollection {\n\n    static from(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) return arrayOfCard;\n        if (Array.isArray(arrayOfCard)) return new CardCollection(arrayOfCard);\n        return new CardCollection();\n    }\n\n    constructor(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) {\n            this.cards = arrayOfCard.cards.slice(0);\n        } else if (Array.isArray(arrayOfCard)) {\n            this.cards = arrayOfCard;\n        } else {\n            this.cards = [];\n        }\n    }\n\n    destroy() {\n        this.cards.forEach((d) => d.destroy());\n    }\n\n    /**\n     * @param {Card[]} cards\n     */\n    addAll(cards) {\n        this.cards.push(...cards);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    add(card) {\n        this.cards.push(card);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    remove(card) {\n        let index;\n        if ((index = this.cards.indexOf(card)) > -1) {\n            return this.cards.splice(index, 1)[0];\n        }\n        return null;\n    }\n\n    /**\n     * @param {number} suit\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getBySuitAndValue(suit, value) {\n        return this.cards.find((c) => c.value === value && c.suit === suit);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getByValue(value) {\n        return this.cards.find((c) => c.value === value);\n    }\n\n    /**\n     * @param {number} suit\n     * @returns {Card} card\n     */\n    getBySuit(suit) {\n        return this.cards.find((c) => c.suit === suit);\n    }\n\n    /**\n     * @returns {Card} card\n     */\n    peek() {\n        return this.cards[0];\n    }\n\n    shuffle() {\n        const output = [];\n        const input = this.toArray();\n        while (input.length > 0) {\n            let index = Math.floor(Math.random() * input.length);\n            output.push(input.splice(index, 1)[0]);\n        }\n        this.cards = output;\n        return this;\n    }\n\n    /**\n     * @returns {Card[]}\n     */\n    toArray() {\n        return this.cards.slice(0);\n    }\n\n    /**\n     * @returns {String}\n     */\n    toString() {\n        return this.cards.toString();\n    }\n};","function _identity(d) {return d;}\nexport default {\n  uniq(array, predicate = _identity) {\n    var output = [];\n    var ids = [];\n    array.forEach(function (d) {\n      const id = predicate(d);\n      if (ids.indexOf(id) === -1) {\n        output.push(d);\n        ids.push(id);\n      }\n    });\n    return output;\n  }\n};","export default {\n    Compare: {\n        asc(a, b) {\n            if (a > b) return 1;\n            if (a < b) return -1;\n            return 0;\n        },\n        desc(a, b) {\n            if (a > b) return -1;\n            if (a < b) return 1;\n            return 0;\n        }\n    },\n    /**\n     * @param {number} value the value to clamp\n     * @param {number} min\n     * @param {number} max\n     */\n    clamp(value, min, max) {\n        return Math.max(Math.min(value, max), min);\n    }\n};","import CardCollection from './CardCollection';\nimport Arrays from './Arrays';\nimport Numbers from './Numbers';\n\n/** @type {Object.<string, number>} */\nexport var ComboType = {\n    Pair: 1,\n    TwoPair: 2,\n    ThreeOfAKind: 3,\n    Straight: 5,\n    Flush: 7,\n    FullHouse: 8,\n    FourOfAKind: 10,\n    StraightFlush: 20,\n    RoyalFlush: 50,\n    FiveOfAKind: 100\n};\n/**\n * @property {Function}\n * @name ComboType.forName\n * @param {Number} type\n * @returns {String}\n*/\nObject.defineProperty(ComboType, 'forName', {\n    enumerable: false,\n    value: function forName(type) {\n        return Object.keys(ComboType).find((key) => ComboType[key] === type);\n    }\n});\n\nexport class CardComboList {\n    \n    /**\n     * @param {CardCollection} cardsCollection\n     */\n    constructor(cardsCollection) {\n        this.originalCollection = cardsCollection;\n        this.combos = [];\n        this._parse(cardsCollection);\n    }\n\n    addAll(objects) {\n        objects.forEach((d) => this.add(d));\n    }\n\n    add(object) {\n        let cardCombo;\n        if (!(object instanceof CardCombo)) {\n            cardCombo = new CardCombo(object);\n        } else cardCombo = object;\n        this.combos.push(cardCombo);\n        return this;\n    }\n\n    getHigherCombo() {\n        return this.combos.sort((a, b) => {\n            if (a.type > b.type) return -1;\n            if (a.type < b.type) return 1;\n            return 0;\n        })[0];\n    }\n\n    _parse() {\n        // 2 - Pair\n        // 4 - ThreeOfAKind\n        // 8 - FourOfAKind\n        // 10 - FiveOfAKind\n        this.addAll(this._getXOfAKind());\n        // 3 - TwoPair\n        const twoPairsCombo = this._getTwoPairs();\n        if (twoPairsCombo) this.add(twoPairsCombo);\n        // 5 - Straight\n        const straightCombo = this._getStraight();\n        if (straightCombo) this.add(straightCombo);\n        // 6 - Flush\n        const flushCombo = this._getFlush();\n        if (flushCombo) this.add(flushCombo);\n        // 7 - FullHouse\n        const fullHouseCombo = this._getFullHouse();\n        if (fullHouseCombo) this.add(fullHouseCombo);\n        // 9 - StraightFlush\n        const straightFlushCombo = this._getStraightFlush();\n        if (straightFlushCombo) this.add(straightFlushCombo);\n\n        // todo: royalFlush\n        \n        this.combos.sort((a, b) => Numbers.Compare.desc(a.getScore(), b.getScore()));\n    }\n\n    _getHigherCard() {\n        const cards = this.originalCollection.toArray();\n        return cards.sort((a, b) => {\n            if (a.value > b.value) return -1;\n            if (a.value < b.value) return 1;\n            return 0;\n        })[0];\n    }\n\n    _getTwoPairs() {\n        const pairs = [];\n        this.combos.forEach(function (combo) {\n            if (combo.type === ComboType.Pair) pairs.push(combo);\n        });\n        if (pairs.length === 2 && this._isAllCardDifferents(pairs[0], pairs[1])) {\n\n            return new CardCombo({\n                type: ComboType.TwoPair,\n                cards: [].concat(...pairs.map((d) => d.cards.toArray()))\n            });\n        }\n    }\n\n    _getXOfAKind() {\n        const cards = this.originalCollection.toArray();\n        const combos = [];\n        const comboTypeMapper = {\n            2: ComboType.Pair,\n            3: ComboType.ThreeOfAKind,\n            4: ComboType.FourOfAKind,\n            5: ComboType.FiveOfAKind\n        };\n        cards.forEach((card, cardIndex, cards) => {\n            const localeCards = [ card ];\n            for (let index = 0; index < cards.length; index++) {\n                if (card !== cards[index] && (card.value === cards[index].value || cards[index].isJoker())) {\n                    localeCards.push(cards[index]);\n                }\n            }\n            if (localeCards.length > 1 && localeCards.length < 6) {\n                combos.push(new CardCombo({\n                    type: comboTypeMapper[localeCards.length],\n                    cards: localeCards\n                }));\n            }\n        });\n        return Arrays.uniq(combos, (d) => d.getId());\n    }\n\n    _getFullHouse() {\n        const pair = this.combos.find((d) => d.type === ComboType.Pair);\n        const threeOfAKind = this.combos.find((d) => d.type === ComboType.ThreeOfAKind);\n        if (pair && threeOfAKind && this._isAllCardDifferents(pair, threeOfAKind)) {\n            return new CardCombo({\n                type: ComboType.FullHouse,\n                cards: [].concat(pair.getCards(), threeOfAKind.getCards())\n            });\n        }\n    }\n\n    _getStraight() {\n        const cards = this.originalCollection.toArray();\n        const values = cards.map((d) => d.value).sort(Numbers.Compare.asc);\n        let jokers = cards.filter((d) => d.isJoker()).length;\n        for (let index = 1, value = values[0]; index < values.length; index++) {\n            const match = value + 1 === values[index];\n            if (!match && jokers === 0) return;\n            if (!match) jokers--;\n            value++;\n        }\n        return new CardCombo({\n            type: ComboType.Straight,\n            cards: cards\n        });\n    }\n\n    _getFlush() {\n        const cards = this.originalCollection.toArray();\n        let firstSuit = cards[0].suit;\n        for (let index = 1; index < cards.length; index++) {\n            if (cards[index].suit !== firstSuit && !cards[index].isJoker()) return null;\n        }\n        return new CardCombo({\n            type: ComboType.Flush,\n            cards: cards\n        });\n    }\n\n    _getStraightFlush() {\n        const flush = this.combos.find((d) => d.type === ComboType.Flush);\n        const straight = this.combos.find((d) => d.type === ComboType.Straight);\n        if (flush && straight) {\n            return new CardCombo({\n                type: ComboType.StraightFlush,\n                cards: flush.getCards()\n            });\n        }\n    }\n\n    /**\n     * @param {Combo} c1\n     * @param {Combo} c2\n     * @returns {boolean}\n     */\n    _isAllCardDifferents(c1, c2) {\n        const c1Cards = c1.getCards();\n        const c2Cards = c2.getCards();\n        for (let i1 = 0; i1 < c1Cards.length; i1++)\n            for (let i2 = 0; i2 < c2Cards.length; i2++)\n                if (c1Cards[i1] === c2Cards[i2]) return false;\n        return true;\n    }\n\n    toString() {\n        return this.combos.join('\\n');\n    }\n\n}\n// TODO: TEST K 4 4 K J\n// TODO: TEST Q 5 5 Q J\nexport class CardCombo {\n\n    constructor(object) {\n        /** @type {number} */\n        this.type = object.type;\n        /** @type {CardCollection} */\n        this.cards = new CardCollection();\n        if (object.cards) this.cards.addAll(object.cards);\n        else if (object.card) this.cards.add(object.card);\n        this.getCards().sort((a, b) => Numbers.Compare.asc(a.value, b.value));\n    }\n\n    /**\n     * @returns {Card}\n     */\n    getCard() { return this.cards.peek(); }\n    /**\n     * @returns {CardCollection}\n     */\n    getCards() { return this.cards.cards; }\n\n    /**\n     * @private\n     * @returns {CardCollection}\n     */\n    _sortCards() {\n        this.getCards().sort((a, b) => { return Numbers.Compare.asc(a.suit, b.suit); });\n    }\n\n    /**\n     * @returns {String}\n     */\n    getId() {\n        this._sortCards();\n        return this.getCards().map((d) => `${d.value}&${d.suit}`).join('/');\n    }\n\n    /**\n     * @returns {number}\n     */\n    getScore() {\n        return this.type;\n    }\n\n    /**\n     * @returns {String}\n     */\n    getTypeName() {\n        return ComboType.forName(this.type);\n    }\n\n    /**\n     * @returns {String}\n     */\n    toString() {\n        return `${this.getTypeName()} { ${this.getCards().join(', ')} }`;\n    }\n\n}","import {ComboType} from './CardComboList';\n\nlet languages = [];\nlet currentLang = null;\n\nexport default {\n    setup(langs) {\n        languages = langs;\n        currentLang = languages[0];\n    },\n    setLang(lang) {\n        currentLang = languages.find((d) => d.Lang === lang);\n    },\n    t(chainedName) {\n        const names = chainedName.split('.');\n        let currentObject = currentLang;\n        for (let index = 0; index < names.length; index++) {\n            const keyName = names[index];\n            if (keyName in currentObject) {\n                if (typeof currentObject[keyName] !== 'object') {\n                    return currentObject[keyName];\n                } else {\n                    currentObject = currentObject[keyName];\n                }\n            }\n        }\n        return '';\n    }\n};","import PIXI from 'pixi.js';\n\nexport default class UpdatableContainer extends PIXI.Container {\n    update(game) {\n        this.updateChildren(game);\n    }\n\n    destroyChildren() {\n        this.children.forEach((d) => d.destroy());\n        this.removeChildren();\n    }\n\n    /**\n     * Invoke update method of all children\n     * @param {Game} game\n     */\n    updateChildren(game) {\n        this.children.forEach(function (child) { \n            child.update(game); \n        });\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject}\n     */\n    findChildrenByType(Type) {\n        return this.children.find((d) => d instanceof Type);\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject[]}\n     */\n    findAllChildByType(Type) {\n        return this.children.filter((d) => d instanceof Type);\n    }\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\n\nexport default class LinearLayout extends UpdatableContainer {\n\n    /**\n     * @param {Object} [options]\n     * @property {number} x\n     * @property {number} y\n     * @property {number} childMargin\n     */\n    constructor(options = {}) {\n        super();\n        this.childMargin = 0;\n        if ('x' in options) this.x = options.x;\n        if ('y' in options) this.y = options.y;\n        if ('childMargin' in options) this.childMargin = options.childMargin;\n        this.setOrientation(options.orientation || LinearLayout.ORIENTATION_VERTICAL);\n    }\n\n    setOrientation(orientation) {\n        this._orientation = orientation;\n        if (orientation === LinearLayout.ORIENTATION_VERTICAL) {\n            this._posPropertyName = 'y';\n            this._sizePropertyName = 'height';\n        } else if (orientation === LinearLayout.ORIENTATION_HORIZONTAL) {\n            this._posPropertyName = 'x';\n            this._sizePropertyName = 'width';\n        }\n    }\n\n    /**\n     * @param {number} childIndex\n     * @returns {PIXI.Point}\n     */\n    getChildPositionAt(childIndex) {\n        return this.getChildPosition(this.getChildAt(childIndex));\n    }\n\n    /**\n     * @param {PIXI.DisplayObject} child\n     * @returns {PIXI.Point}\n     */\n    getChildPosition(child) {\n        return new PIXI.Point(this.x - this.pivot.x + child.x - child.pivot.x, this.y - this.pivot.y + child.y - child.pivot.y);\n    }\n\n    update(game) {\n        super.update(game);\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.children.length; index++) {\n            this.children[index][this._posPropertyName] = pos;\n            pos += this.children[index][this._sizePropertyName] + this.childMargin;\n        }\n    }\n}\n\nLinearLayout.ORIENTATION_VERTICAL = 1;\nLinearLayout.ORIENTATION_HORIZONTAL = 2;","export var Score = {\n    LOST: 0,\n    DRAW: 1,\n    WON: 2\n};\n\nexport var Resolver = {\n\n    /**\n     * @param {Card} card1\n     * @param {Card} card2\n     */\n    compareCards(card1, card2) {\n        if (card1 && !card2) return Score.WON;\n        if (!card1 && card2) return Score.LOST;\n        if (card1.value > card2.value) return Score.WON;\n        if (card1.value < card2.value) return Score.LOST;\n        return Score.DRAW;\n    },\n\n    /**\n     * @param {CardCombo} combo1\n     * @param {CardCombo} combo2\n     */\n    compareCombos(combo1, combo2) {\n        if (combo1 && !combo2) return Score.WON;\n        if (!combo1 && combo2) return Score.LOST;\n        if (combo1.getScore() > combo2.getScore()) return Score.WON;\n        if (combo1.getScore() < combo2.getScore()) return Score.LOST;\n        return Score.DRAW;\n    }\n};","import PIXI from 'pixi.js';\nimport Keyboard from '../lib/Keyboard';\nimport Game from '../Game';\n\nimport CardsGenerator from '../CardsGenerator';\n\nexport default class GUICardSelector extends PIXI.Graphics {\n    constructor(x, y) {\n        super();\n        const WIDTH = 20;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(3, 0, 1)\n            .moveTo(WIDTH/2,0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT)\n            .lineTo(0, HEIGHT)\n            .lineTo(WIDTH/2,0)\n            .endFill();\n        this.pivot.set(WIDTH / 2, 0);\n        this.originalY = y;\n        if (x) this.x = x;\n        if (y) this.y = y;\n    }\n\n    setCursorCardIndex(game, index) {\n        const river = game.river;\n        if (index < 0) index = 4;\n        if (index > river.cardSlots - 1) index = 0;\n        this.index = index;\n        const p = game.river.getCardPositionAt(index);\n        this.x = p.x + CardsGenerator.CARD_WIDTH / 2;\n        this.y = p.y + CardsGenerator.CARD_HEIGHT + 20;\n    }\n\n    /**\n     * @param {Game} game\n     */\n    update(game) {\n        this.y += Math.cos(game._frame / 10);\n        \n        if (Keyboard.isKeyPushed(Keyboard.LEFT_ARROW)) {\n            this.setCursorCardIndex(game, this.index - 1);\n        } else if (Keyboard.isKeyPushed(Keyboard.RIGHT_ARROW)) {\n            this.setCursorCardIndex(game, this.index + 1);    \n        } else if (Keyboard.isKeyPushed(Keyboard.UP_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, true);\n            } else {\n                game.river.setSelectedCardIndex(this.index, true);\n            }\n        } else if (Keyboard.isKeyPushed(Keyboard.DOWN_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, false);\n            } else {\n                game.river.setSelectedCardIndex(this.index, false);\n            }\n            \n        } else if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n            this.destroy();\n        }\n    }\n}","import PIXI from 'pixi.js';\n\nexport default class Timer {\n    constructor(targetedTime, ticker = PIXI.ticker.shared) {\n        this.target = targetedTime;\n        this.time = 0;\n        this.ticker = ticker;\n        this.isStarted = false;\n    }\n\n    destroy() {\n        this.stop();\n        this.ticker = null;\n    }\n\n    set(targetedTime) {\n        this.target = targetedTime || 0;\n        this.time = 0;\n    }\n\n    reset() {\n        this.time = 0;\n    }\n\n    start() {\n        if (!this.isStarted) {\n            this.ticker.add(this.tick, this);\n            this.isStarted = true;\n        }\n    }\n\n    stop() {\n        if (this.isStarted) {\n            this.ticker.remove(this.tick, this)\n            this.isStarted = false;\n        }\n    }\n\n    tick() {\n        this.time += this.ticker.elapsedMS;\n    }\n\n    delta() {\n        return this.target - this.time;\n    }\n\n}\n","import BezierEasing from './BezierEasing';\nimport Timer from '../lib/Timer';\n\nexport default class TransformAnimation {\n    /**\n     * @param {Object} options\n     * @param {PIXI.Point} options.posFrom\n     * @param {PIXI.Point} options.posTo\n     * @param {PIXI.Point} options.pivot\n     * @param {number} options.scaleFrom\n     * @param {number} options.scaleTo\n     * @param {number} options.rotationFrom\n     * @param {number} options.rotationTo\n     * @param {number} options.timeFrom\n     * @param {number} options.duration\n     * @param {Function} options.callback\n    */\n    constructor(options) {\n        this.posFrom = options.posFrom || null;\n        this.posTo = options.posTo || null;\n        this.scaleFrom = !isNaN(options.scaleFrom) ? +options.scaleFrom : 1;\n        this.scaleTo = !isNaN(options.scaleTo) ? +options.scaleTo : 1;\n        this.rotationFrom = !isNaN(options.rotationFrom) ? +options.rotationFrom : 0;\n        this.rotationTo = !isNaN(options.rotationTo) ? +options.rotationTo : 0;\n        this.alphaFrom = !isNaN(options.alphaFrom) ? +options.alphaFrom : 1;\n        this.alphaTo = !isNaN(options.alphaTo) ? +options.alphaTo : 1;\n        this.pivot = options.pivot || new PIXI.Point(0,0);\n\n        this.timer = new Timer(options.duration);\n        this.duration = options.duration;\n        this.callback = options.callback || function () {};\n        this.interpolator = options.interpolator || BezierEasing(0,0,1,1);\n    }\n\n    /**\n     * Destroy all references presents in the animation\n     */\n    destroy() {\n        this.timer.stop();\n        this.timer = null;\n        this.posFrom = this.posTo = this.pivot = null;\n        this.callback = null;\n        this.interpolator = null;\n    }\n\n    /**\n     * Update object position relative to \n     */\n    update(sprite) {\n        if (!this.timer.isStarted) this.timer.start();\n        const rawRatio = Math.min(this.duration, this.timer.time) / this.duration;\n\n        const ratio = Math.max(0, Math.min(1, this.interpolator(rawRatio)));\n        sprite.setTransform(\n            this.posFrom && this.posTo ? this.posFrom.x + (this.posTo.x - this.posFrom.x) * ratio : sprite.x,\n            this.posFrom && this.posTo ? this.posFrom.y + (this.posTo.y - this.posFrom.y) * ratio : sprite.y,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.rotationFrom + (this.rotationTo - this.rotationFrom) * ratio,\n            0,\n            0, \n            this.pivot.x,\n            this.pivot.y\n        );\n        sprite.alpha = this.alphaFrom + (this.alphaTo - this.alphaFrom) * ratio; \n\n        if (rawRatio == 1) {\n            this.callback(sprite);\n        }\n    }\n}","import PIXI from 'pixi.js';\nimport TransformAnimation from './TransformAnimation';\n\nexport default class GUIText extends PIXI.Text {\n    constructor(text, textStyle) {\n        super(text, textStyle);\n        this.tags = [ 'gui' ];\n        this.animation = null;\n    }\n\n    destroy() {\n        this.setAnimation(null);\n        super.destroy();\n    }\n\n    /**\n     * @param {TransformAnimation} animation\n     */\n    setAnimation(animation) {\n        if (this.animation) this.animation.destroy();\n        this.animation = animation;\n    }\n    update() {\n        if (this.animation) this.animation.update(this);\n    }\n}","export var Debug = {\n    textConfig: {\n        fontSize: 14,\n        fontFamily: 'Consolas',\n        fill: 0\n    }\n};\n\nexport var BigText = {\n    textConfig: {\n        fontSize: 72,\n        fontFamily: 'Verdana',\n        fill: 0xffff00,\n        stroke: 0xef0000,\n        strokeThickness: 8,\n        fontVariant: 'small-caps',\n        fontWeight: 900\n    }\n};\n\nexport var GuiText = {\n    textConfig: {\n        fontSize: 16,\n        fontFamily: 'Verdana',\n        fill: 0xffffff,\n        stroke: 0,\n        strokeThickness: 3,\n        fontWeight: 300\n    }\n};\n\nexport var GuiToken = {\n    textConfig: {\n        fontSize: 20,\n        fontFamily: 'Verdana',\n        fill: 0xffffff,\n        letterSpacing: 4\n    }\n};","import UpdatableContainer from '../containers/UpdatableContainer';\nimport {Score} from '../Score';\nimport i18n from '../i18n';\nimport GUIText from '../lib/GUIText';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\n\nexport default class AbsScoreLayout extends UpdatableContainer {\n    /**\n     * @param {Object} options\n     * @param {number} options.score - The score\n     */\n    constructor(options) {\n        super();\n        /** @type {number} */\n        this.score = options.score;\n        this.transitionDuration = options.transitionDuration || 150;\n        this.transitionDelay = options.transitionDelay || 1000;\n\n        /** @type {number} */\n        this._lastScoreState = 0;\n        /** @type {number} */\n        this.scoreState = AbsScoreLayout.STATE_TRANSITION_IDLE;\n        /** @type {boolean} */\n        this.isDestroyed = false;\n        /** @type {number} */\n        this.rendererWidth = options.game.renderer.width;\n        /** @type {number} */\n        this.rendererHeight = options.game.renderer.height;\n    }\n\n    changeState(state) {\n        this._lastScoreState = this.scoreState;\n        this.scoreState = state;\n    }\n\n    /**\n     * Update children initial positions\n     * @protected\n     */\n    mUpdateChildrenPosition() {\n        for (let index = 0; index < this.children.length; index++) {\n            const child = this.children[index];\n            child.x = this.rendererWidth*3/4 + child.width / 2 + 1;\n            child.y = this.rendererHeight / 3;\n            child.alpha = 0;\n        }\n    }\n\n    hasWon() {\n        return this.score === Score.WON;\n    }\n\n    hasLost() {\n        return this.score === Score.LOST;\n    }\n\n    isDraw() {\n        return this.score === Score.DRAW;\n    }\n\n    spawnComparison() {\n        let comparisonLabel = i18n.t('Defeat');\n        if (this.hasWon()) {\n            comparisonLabel = i18n.t('Victory');\n        } else if (this.isDraw()) {\n            comparisonLabel = i18n.t('Draw');\n        }\n        this.addChild(new GUIText(comparisonLabel, BigText.textConfig));\n    }\n\n    getInAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth/2-sprite.width/2, sprite.y),\n            alphaFrom: 0,\n            alphaTo: 1,\n            duration: this.transitionDuration,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n\n    getOutAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth*1/6-sprite.width/2, sprite.y),\n            alphaFrom: 1,\n            alphaTo: 0,\n            duration: this.transitionDuration,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n};\n\nAbsScoreLayout.STATE_TRANSITION_IDLE = 0;\nAbsScoreLayout.STATE_TRANSITION_SUIT = 1;\nAbsScoreLayout.STATE_TRANSITION_COMPARISON = 2;\nAbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING = 4;\nAbsScoreLayout.STATE_TRANSITION_TERMINATED = 8;","import PIXI from 'pixi.js';\nimport i18n from '../i18n';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\nimport AbsScoreLayout from './AbsScoreLayout';\nimport GUIText from '../lib/GUIText';\nimport {Resolver} from '../Score';\nimport {CardCombo, ComboType} from '../CardComboList';\n\nexport default class GUIScoreLayout extends AbsScoreLayout {\n\n    /**\n     * @param {Object} options\n     * @param {Game} options.game\n     * @param {CardCombo} options.playerCombo\n     * @param {CardCombo} options.iaCombo\n     */\n    constructor(options) {\n        super({\n            score: Resolver.compareCombos(options.playerCombo, options.iaCombo),\n            game: options.game\n        });\n        /** @type {CardCombo} */\n        this.playerCombo = options.playerCombo;\n        /** @type {CardCombo} */\n        this.iaCombo = options.iaCombo;\n\n        this.spawnSuitName();\n        this.spawnComparison();\n        this.mUpdateChildrenPosition();\n    }\n    \n    destroy() {\n        super.destroy();\n        this.isDestroyed = true;\n    }\n\n    spawnSuitName() {\n        let comboName = 'NoCombo';\n        if (this.playerCombo) comboName = this.playerCombo.getTypeName();\n        this.addChild(new GUIText(i18n.t('ComboType.' + comboName), BigText.textConfig));\n    }\n\n    getSuitText() {\n        return this.getChildAt(0);\n    }\n\n    getComparisonText() {\n        return this.getChildAt(1);\n    }\n\n    update(game) {\n        super.update(game);\n        switch (this.scoreState) {\n            case AbsScoreLayout.STATE_TRANSITION_IDLE:\n                this.getSuitText().setAnimation(this.getInAnimation(this.getSuitText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON);\n                    }, this.transitionDelay);\n                }));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON:\n                this.getComparisonText().setAnimation(this.getInAnimation(this.getComparisonText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING);\n                    }, this.transitionDelay);\n                }));\n                this.getSuitText().setAnimation(this.getOutAnimation(this.getSuitText()));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING:\n                this.getComparisonText().setAnimation(this.getOutAnimation(this.getComparisonText(), () => {\n                    this.changeState(AbsScoreLayout.STATE_TRANSITION_TERMINATED);\n                }));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n        }\n    }\n\n\n}\n\n\n","import PIXI from 'pixi.js';\nimport i18n from '../i18n';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\nimport AbsScoreLayout from './AbsScoreLayout';\nimport GUIText from '../lib/GUIText';\nimport {Resolver} from '../Score';\nimport {CardCombo, ComboType} from '../CardComboList';\n\nexport default class GUIBetScore extends AbsScoreLayout {\n\n    /**\n     * @param {Object} options\n     * @param {Game} options.game\n     * @param {CardCombo} options.playerCombo\n     * @param {CardCombo} options.iaCombo\n     */\n    constructor(options) {\n        super(options);\n        this.spawnComparison();\n        this.mUpdateChildrenPosition();\n    }\n    \n    destroy() {\n        super.destroy();\n        this.isDestroyed = true;\n    }\n\n    getComparisonText() {\n        return this.getChildAt(0);\n    }\n\n    update(game) {\n        super.update(game);\n        switch (this.scoreState) {\n            case AbsScoreLayout.STATE_TRANSITION_IDLE:\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON:\n                this.getComparisonText().setAnimation(this.getInAnimation(this.getComparisonText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING);\n                    }, this.transitionDelay);\n                }));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING:\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                this.getComparisonText().setAnimation(this.getOutAnimation(this.getComparisonText(), () => {\n                    this.changeState(AbsScoreLayout.STATE_TRANSITION_TERMINATED);\n                }));\n                break;\n        }\n    }\n\n\n}\n\n\n","import PIXI from 'pixi.js';\n\nexport default class ContextualBox extends PIXI.Graphics {\n\n    constructor() {\n        super();\n        this._isValid = false;\n    }\n\n    clear() {\n        this.removeChildren();\n    }\n\n    update(game) {\n        if (!this._isValid) {\n            this.drawBox(game);\n            this._isValid=true;\n        }\n    }\n\n    drawBox(game) {}\n\n    invalidate(){\n        this._isValid=false;\n    }\n\n    _drawBox(graphics, rect) {\n        graphics.moveTo(rect.left, rect.top)\n            .lineStyle(1, 0, 1)\n            .beginFill(0x675C53, 1)\n            .lineTo(rect.right, rect.top)\n            .lineTo(rect.right, rect.bottom)\n            .lineTo(rect.left, rect.bottom)\n            .lineTo(rect.left, rect.top)\n            .endFill();\n    }\n}","export default class Rect {\n    constructor(top, right, bottom, left) {\n        this.set(top || 0, right || 0, bottom || 0, left || 0);\n    }\n    \n    set(top, right, bottom, left) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n\n    scale(x, y) {\n        return new Rect(this.top*y,this.right*x,this.bottom*y,this.left*x);\n    }\n}","import ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport LinearLayout from '../LinearLayout';\nimport {CardCombo} from '../../CardComboList';\nimport i18n from '../../i18n';\n\nexport default class ContextualDisplayer extends ContextualBox {\n\n    constructor() {\n        super();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        const rect = new Rect(0, this.parent.getWidth() * 4/5 - 10, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayControls() {\n        this.removeChildren();\n        const col1 = new LinearLayout({ childMargin: 15 });\n        const col2 = new LinearLayout({ childMargin: 15 });\n        const rows = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: 12,\n            x: 30\n        });\n\n        const textStyle = {\n            fontSize: 16,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 3\n        };\n\n        col1.addChild(new PIXI.Text('\\u25C0 \\u25B6 ' + i18n.t('Controls.MoveCursor'), textStyle));\n        col1.addChild(new PIXI.Text('\\u2B06 / \\u2B07 ' + i18n.t('Controls.SelectCard'), textStyle));\n        col1.updateChildrenPosition();\n\n        col2.addChild(new PIXI.Text('Shift + \\u2B06 / \\u2B07 ' + i18n.t('Controls.SelectCards'), textStyle));\n        col2.addChild(new PIXI.Text('Entrée ' + i18n.t('Controls.CommitChanges'), textStyle));\n        col1.updateChildrenPosition();\n        col2.updateChildrenPosition();\n        \n        rows.addChild(col1);\n        rows.addChild(col2);\n        rows.updateChildrenPosition();\n\n\n        const label = new PIXI.Text(i18n.t('Controls.ControlsLabel'), textStyle);\n        label.x = 30;\n        label.y = 10;\n        this.addChild(label);\n        rows.y = label.y + label.height + 15;\n        this.addChild(rows);\n    }\n\n    /**\n     * @param {CardCombo}\n     */\n    displayCombo(combo) {\n        this.removeChildren();\n        const row = new LinearLayout();\n        row.x = 30;\n\n        const textStyle = {\n            fill: 0xffa172,\n            stroke: 0,\n            strokeThickness: 3,\n            fontSize: 18\n        };\n\n        let comboName = 'NoCombo';\n        if (combo) comboName = combo.getTypeName();\n        row.addChild(new PIXI.Text(`\"${i18n.t('ComboType.' + comboName)}\"`, textStyle));\n\n        row.updateChildrenPosition();\n        row.y = row.height / 2;\n        this.addChild(row);\n    }\n\n    displayChooseBet() {\n        this.removeChildren();\n        const texts = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL\n        });\n        texts.x = 30;\n\n        const textStyleWhite = {\n            fontSize: 18,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 4\n        };\n        const textStyleOrange = {\n            fontSize: 18,\n            fill: 0xff9763,\n            stroke: 0,\n            strokeThickness: 4\n        };\n\n        // TODO: Abstractize this part\n        const text = i18n.t('Bet.ChooseBet');\n        let bold = false;\n        let beginIndex = 0;\n        for (let index = 0; index < text.length; index++) {\n            const isLastItem = index + 1 >= text.length;\n            if ((!bold && text.charAt(index) === '*') || isLastItem) {\n                texts.addChild(new PIXI.Text(text.slice(beginIndex, isLastItem ? index + 1 : index).trim(), textStyleWhite));\n                beginIndex = index+1;\n                bold = true;\n                index++;\n            } else if ((bold && text.charAt(index) === '*') || isLastItem) {\n                texts.addChild(new PIXI.Text(text.slice(beginIndex, isLastItem ? index + 1 : index).trim(), textStyleOrange));\n                beginIndex = index+1;\n                bold = false;\n                index++;\n            }\n        }\n\n        texts.updateChildrenPosition();\n        texts.y = texts.height / 2;\n        this.addChild(texts);\n    }\n\n    displayUpOrDownChoice() {\n        this.removeChildren();\n        const textStyleWhite = {\n            fontSize: 18,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 4\n        };\n        this.addChild(new PIXI.Text(i18n.t('Bet.UpOrDown'), textStyleWhite));\n    }\n\n}","import PIXI from 'pixi.js';\n\nexport default class GUICursor extends PIXI.Graphics {\n    \n    constructor() {\n        super();\n        const WIDTH = 15;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(2, 0, 1)\n            .moveTo(0, 0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT/2)\n            .lineTo(0, HEIGHT)\n            .lineTo(0,0)\n            .endFill();\n        this.pivot.set(WIDTH, -HEIGHT/2);\n    }\n\n    update(game) {\n        this.x += Math.cos(game._frame / 10) / 6;\n    }\n\n}","import ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport GUICursor from './GUICursor';\nimport LinearLayout from '../LinearLayout';\nimport Keyboard from '../../lib/Keyboard';\n\nconst MENU_ITEM_FONT_SIZE = {\n    2: 22\n};\n\nexport default class ContextualMenu extends ContextualBox {\n\n    constructor() {\n        super();\n        /** @type {GUICursor} */\n        this.currentCursor = null;\n        this.currentCursorIndex = 0;\n    }\n\n    removeChildren() {\n        this.currentCursorIndex = 0;\n        if (this.currentCursor) this.currentCursor = null;\n        super.removeChildren();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth()*4/5;\n        const rect = new Rect(0, this.parent.getWidth()*1/5, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayMenu(menuItems) {\n        this.removeChildren();\n        const layout = new LinearLayout();\n        for (let index = 0; index < menuItems.length; index++) {\n            const menuDesc = menuItems[index];\n            const menuitem = new PIXI.Text(menuDesc.label, {\n                fontSize: MENU_ITEM_FONT_SIZE[menuItems.length],\n                fill: 0xffffff,\n                stroke: 0,\n                strokeThickness: 3\n            });\n            menuitem.menuItemIndex = index;\n            menuitem.menuItemCallback = menuDesc.callback;\n            layout.addChild(menuitem);\n        }\n        \n        layout.updateChildrenPosition();\n        layout.x = this.width / 2- layout.width / 2;\n        layout.y = layout.height / 2;\n        this.addChild(layout);\n        this.currentCursor = new GUICursor();\n        this.addChild(this.currentCursor);\n        this.setCursorIndex(0);\n    }\n\n    setCursorIndex(index) {\n        const menuItems = this.getChildAt(0).children;\n        if (index < 0) index = menuItems.length - 1;\n        if (index >= menuItems.length) index = 0;\n        const position = this.getChildAt(0).getChildPositionAt(index);\n        this.currentCursor.y = position.y;\n        if (this.currentCursor.x == 0) this.currentCursor.x = position.x - 15;\n        this.currentCursorIndex = index;\n    }\n    \n    hasCursor() {\n        return this.currentCursor !== null;\n    }\n\n    update(game) {\n        super.update(game);\n        if (this.hasCursor()) {\n            this.currentCursor.update(game);\n            if (Keyboard.isKeyReleased(Keyboard.UP_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex - 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.DOWN_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex + 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.ENTER)) {\n                let item = this.getChildAt(0).getChildAt(this.currentCursorIndex);\n                if (item && item.menuItemCallback) item.menuItemCallback();\n            }\n        }\n    }\n\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport ContextualDisplayer from './contextual-menu/ContextualDisplayer';\nimport ContextualMenu from './contextual-menu/ContextualMenu';\nimport Game from '../Game';\nimport i18n from '../i18n';\n\nconst MARGIN_HONRIZONTAL = 10;\nconst MARGIN_VERTICAL = 15;\n\nexport default class GUIContext extends UpdatableContainer {\n\n    constructor(x, y, game) {\n        super();\n        /** @type {Game} */\n        this.game = game;\n        this.x = x + MARGIN_HONRIZONTAL;\n        this.y = y - MARGIN_VERTICAL;\n        this.addChild(new ContextualDisplayer());\n        this.addChild(new ContextualMenu());\n    }\n\n    destroy() {\n        this.game = null;\n        super.destroy();\n    }\n\n    update(game) {\n        this._width = game.renderer.width - MARGIN_HONRIZONTAL * 2;\n        this._height = game.renderer.height - this.y - MARGIN_VERTICAL; \n        super.update(game);\n    }\n\n    getWidth() {\n        return this._width;\n    }\n\n    getHeight() {\n        return this._height;\n    }\n\n    displayControls() {\n        this.getChildAt(0).displayControls();\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayCombo(combo) {\n        this.getChildAt(0).displayCombo(combo);\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayChooseBet() {\n        this.getChildAt(0).displayChooseBet();\n        this.getChildAt(1).displayMenu([\n            {\n                label: i18n.t('Yes'),\n                callback: () => this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_UP_OR_DOWN)\n            },\n            {\n                label: i18n.t('No'),\n                callback: () => {\n                    this.game.tokenCount += this.game.betCount;\n                    this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS)\n                }\n            }\n        ]);\n    }\n\n    displayUpOrDownChoice(callback) {\n        this.getChildAt(0).displayUpOrDownChoice();\n        this.getChildAt(1).displayMenu([\n            {\n                label: i18n.t('Bet.Up'),\n                callback: () => callback('up')\n            },\n            {\n                label: i18n.t('Bet.Down'),\n                callback: () => callback('down')\n            }\n        ]);\n    }\n\n}","import PIXI from 'pixi.js';\nimport i18n from '../../i18n';\nimport {ComboType} from '../../CardComboList';\nimport {GuiText} from '../../Config';\n\nexport default class GUIComboTypeItem extends PIXI.Container {\n    constructor(options) {\n        super();\n        this.comboType = options.comboType;\n        this.parentWidth = options.parentWidth;\n        this.redraw();\n    }\n\n    redraw() {\n        this.removeChildren();\n        const comboName = ComboType.forName(this.comboType);\n        const localeComboName = i18n.t(`ComboType.${comboName}`);\n        this.addChild(new PIXI.Text(localeComboName, GuiText.textConfig));\n        const factorText = new PIXI.Text(`\\u00D7 ${this.comboType}`, GuiText.textConfig);\n\n        factorText.x = this.parentWidth - 50;\n        this.addChild(factorText);\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport LinearLayout from '../LinearLayout';\nimport {ComboType} from '../../CardComboList';\nimport i18n from '../../i18n';\nimport Numbers from '../../Numbers';\nimport GUIComboTypeItem from './GUIComboTypeItem';\n\nexport default class GUIComboTypesList extends ContextualBox {\n    constructor(options) {\n        super();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        const rect = new Rect(0, this.parent.getWidth() * 4/5 - 10, this.parent.getHeight()/4, 0);\n        this._drawBox(graphics, rect);\n        this.drawLists();\n    }\n\n    drawLists() {\n        const MARGIN_HOR = 20;\n        const width = this.width - MARGIN_HOR * 2;\n        const linearLayoutWidth = width / 2 - MARGIN_HOR;\n\n        const col1 = new LinearLayout({\n            childMargin: 4,\n            x: MARGIN_HOR * 1.5 + 5,\n            y: 12\n        });\n\n        const col2 = new LinearLayout({\n            childMargin: 4,\n            x: width/2 + col1.x,\n            y: 12\n        });\n\n        this.removeChildren();\n        this.addChild(col1);\n        this.addChild(col2);\n\n        const values = Object.keys(ComboType).map((d) => ComboType[d]).sort(Numbers.Compare.desc);\n        [\n            values.slice(0, Math.floor(values.length/2)),\n            values.slice(Math.floor(values.length/2), values.length)\n        ].forEach(function (values, i) {\n            const layout = this.getChildAt(i);\n            values.forEach(function (value) {\n                layout.addChild(new GUIComboTypeItem({\n                    comboType: value,\n                    parentWidth: linearLayoutWidth\n                }));\n            }, this);\n            layout.updateChildrenPosition();\n        }, this);\n\n\n\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport i18n from '../../i18n';\nimport {GuiText,GuiToken} from '../../Config';\n\nexport default class GUIBetBox extends ContextualBox {\n\n    constructor() {\n        super();\n        this.addChild(new PIXI.Text(i18n.t('Bet.Bet'), GuiText.textConfig));\n        this.addChild(this.betText = new PIXI.Text('0', GuiToken.textConfig))\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth() * 4 / 5;\n        this.y = this.parent.getHeight()/8+5;\n        const rect = new Rect(\n            0,\n            this.parent.getWidth() - 10 - this.x,\n            this.parent.getHeight()/4 - this.y,\n            0\n        );\n        this._drawBox(graphics, rect);\n        this.getChildAt(0).position.set(10, 10);\n    }\n\n    update(game) {\n        super.update(game);\n        this.betText.text = game.betCount;\n        this.betText.position.set( this.width - this.betText.width - 10, this.height - this.betText.height - 10 );\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport i18n from '../../i18n';\nimport {GuiText,GuiToken} from '../../Config';\n\nexport default class GUITokenCount extends ContextualBox {\n\n    constructor() {\n        super();\n        this.addChild(new PIXI.Text(i18n.t('TotalToken'), GuiText.textConfig));\n        this.addChild(this.totalTokenText = new PIXI.Text('0', GuiToken.textConfig));\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth() * 4 / 5;\n        const rect = new Rect(\n            0,\n            this.parent.getWidth() - 10 - this.x,\n            this.parent.getHeight()/8 - 5,\n            0);\n        this._drawBox(graphics, rect);\n        this.getChildAt(0).position.set(10, 10);\n    }\n\n    update(game) {\n        super.update(game);\n        this.totalTokenText.text = game.tokenCount;\n        this.totalTokenText.position.set( this.width - this.totalTokenText.width - 10, this.height - this.totalTokenText.height - 10 );\n    }\n};\n","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport GUIComboTypesList from './top-menu/GUIComboTypesList';\nimport GUIBetBox from './top-menu/GUIBetBox';\nimport GUITokenCount from './top-menu/GUITokenCount';\nconst MARGIN_HONRIZONTAL = 10;\nconst MARGIN_VERTICAL = 15;\n\nexport default class TopMenuLayout extends UpdatableContainer {\n    constructor(x, y, game) {\n        super();\n        this.game = game;\n        this.x = x + MARGIN_HONRIZONTAL;\n        this.y = y + MARGIN_VERTICAL;\n        this.addChild(new GUIComboTypesList());\n        this.addChild(new GUIBetBox());\n        this.addChild(new GUITokenCount());\n    }\n\n    destroy() {\n        this.game = null;\n        super.destroy();\n    }\n\n    update(game) {\n        this._width = game.renderer.width - MARGIN_HONRIZONTAL * 2;\n        this._height = game.renderer.height - this.y - MARGIN_VERTICAL;\n        super.update(game);\n    }\n\n    getWidth() { return this._width; }\n    getHeight() { return this._height; }\n};\n","import PIXI from 'pixi.js';\nimport LinearLayout from '../gui/LinearLayout';\nimport CardsGenerator from '../CardsGenerator';\nimport CardCollection from '../CardCollection';\nimport Card from '../Card';\n\nexport default class AbsCardArea extends LinearLayout {\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} cardSlots\n     */\n    constructor(x, y, cardSlots) {\n        super({ \n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: CardsGenerator.CARD_WIDTH / 10\n        });\n        this.x = x;\n        this.y = y;\n        /** @type {number} */\n        this.cardSlots = cardSlots;\n        /** @type {Card[]} */\n        this.slots = new Array(this.cardSlots);\n        this.updateLayoutPivot();\n    }\n\n    /** @inheritdoc */\n    destroyChildren() {\n        this.slots = new Array(this.cardSlots);\n        return super.destroyChildren();\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    removeCardAt(index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        const card = this.slots[index];\n        if (card) {\n            this.removeChild(card);\n            this.slots[index] = null;\n        }\n        return card;\n    }\n\n    /**\n     * @param {Card} card\n     * @returns {Card}\n     */\n    removeCard(card) {\n        return this.removeCardAt(this.slots.indexOf(card));\n    }\n\n    /**\n     * @returns {CardCollection}\n     */\n    getCards() {\n        return new CardCollection(this.slots.slice(0))\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    getCardAt(index) {\n        return this.slots[index];\n    }\n\n    /**\n     * @param {number} index\n     * @returns {PIXI.Point}\n     */\n    getCardPositionAt(index) {\n        return this.getChildPosition(this.getCardAt(index));\n    }\n\n    /**\n     * Find the first empty card slot index\n     * @returns {number}\n     */\n    findFirstEmptySlot() {\n        for (let index = 0; index < this.cardSlots; index++) {\n            if (!this.slots[index]) return index;\n        }\n        return -1;\n    }\n\n    /**\n     * Add a child to the first empty card slot\n     * @param {Card} card\n     */\n    addCard(card) {\n        return this.addCardAt(card, this.findFirstEmptySlot());\n    }\n\n    /**\n     * Add a child to a slot\n     * @param {Card} card\n     * @param {number} index\n     */\n    addCardAt(card, index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        if (this.slots[index]) {\n            this.removeChild(this.slots[index]);\n        }\n        this.slots[index] = card;\n        this.updateChildrenPosition();\n        return super.addChild(card);\n    }\n\n    /**\n     * Update all children position\n     */\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.cardSlots; index++) {\n            const card = this.getCardAt(index);\n            if (card) card[this._posPropertyName] = pos;\n            pos += CardsGenerator.CARD_WIDTH + this.childMargin;\n        }\n    }\n\n    updateLayoutPivot() {\n        const width = this.cardSlots * CardsGenerator.CARD_WIDTH + (this.cardSlots-1) * this.childMargin;\n        this.pivot.set(width / 2, 0);\n    }\n\n    update(game) {}\n\n}","import AbsCardArea from './AbsCardArea';\n\nexport default class CardRiverArea extends AbsCardArea {\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     */\n    constructor(x, y) {\n        super(x, y, 5);\n        this.selectedCardsToBeChanged = [];\n    }\n\n    /**\n     * @param {number} index\n     * @param {boolean} swt\n     */\n    setSelectedCardIndex(index, swt) {\n        const card = this.getCardAt(index);\n        const indexOfCard = this.selectedCardsToBeChanged.indexOf(card);\n        const isSelected = indexOfCard > -1;\n        if (isSelected && swt || !isSelected && !swt) return; \n        if (swt) this.selectedCardsToBeChanged.push(card);\n        else this.selectedCardsToBeChanged.splice(indexOfCard, 1);\n        card.y += swt ? -20 : 20;\n    }\n\n}","import AbsCardArea from './AbsCardArea';\n\nexport default class CardBetArea extends AbsCardArea {\n\n    constructor(x, y) {\n        super(x, y, 2);\n    }\n\n}","import Keyboard from './lib/Keyboard';\nimport Tracker from './Tracker';\nimport i18n from './i18n';\n\nimport UpdatableContainer from './containers/UpdatableContainer';\nimport LinearLayout from './gui/LinearLayout';\n\nimport CardCollection from './CardCollection';\nimport CardsGenerator from './CardsGenerator';\nimport {CardComboList,CardCombo,ComboType} from './CardComboList';\nimport {Resolver,Score} from './Score';\n\nimport GUICardSelector from './gui/GUICardSelector';\nimport AbsScoreLayout from './gui/AbsScoreLayout';\nimport GUIScoreLayout from './gui/GUIScoreLayout';\nimport GUIBetScore from './gui/GUIBetScore';\nimport GUIContext from './gui/GUIContext';\nimport TopMenuLayout from './gui/TopMenuLayout';\n\nimport AbsCardArea from './containers/AbsCardArea';\nimport CardRiverArea from './containers/CardRiverArea';\nimport CardBetArea from './containers/CardBetArea';\n\nconst ticker = PIXI.ticker.shared;//new PIXI.ticker.Ticker();\n\nexport default class Game {\n\n    constructor(options) {\n        this._frame = 0;\n        /** @type {CardCollection} */\n        this.cards = null;\n        /** @type {AbsCardArea} */\n        this.river = null;\n\n        i18n.setup(options.langs);\n\n        this.tokenCount = 54960;\n        this.originalBetCount = 100;\n        this.betCount = 100;\n\n        this.gameState = Game.GAME_IDLE;\n        this.playingGameState = Game.STATE_PLAYING_CHOOSE_BET;\n\n        this.fg = new UpdatableContainer();\n        this.gui = new UpdatableContainer();\n        this.renderingContainer = new PIXI.Container();\n        this.renderingContainer.addChild(this.fg);\n        this.renderingContainer.addChild(this.gui);\n        // create renderer\n        const rendererOptions = {\n            transparent: options.transparent || false,\n            autoResize: options.autoResize || false,\n            antialias: options.antialias || false,\n            resolution: options.resolution || 1,\n            clearBeforeRender: true,\n            backgroundColor: options.backgroundColor,\n            roundPixels: options.roundPixels || true\n        };\n        this.renderer = PIXI.autoDetectRenderer(options.width || 800, options.height || 600, rendererOptions, false);\n        /** @type {HTMLElement} */\n        this.container = null;\n        if (options.container) {\n            this.container = options.container;\n            this.container.appendChild(this.renderer.view);\n        }\n        this.setSize(this.renderer.width, this.renderer.height);\n    }\n\n    setLanguage(lang) {\n        i18n.setLang(lang);\n    }\n\n    destroy() {\n        this.clearGame();\n        this.fg.destroy();\n        this.gui.destroy();\n        this.renderer.destroy();\n        this.fg = null;\n        this.gui = null;\n        this.renderer = null;\n    }\n\n    clearGame() {\n        this.stop();\n        if (this.cards) this.cards.destroy();\n        this.cards = null;\n        this.player = null;\n        this.fg.destroyChildren();\n        this.gui.destroyChildren();\n    }\n\n    newGame() {\n        this.gameState = Game.STATE_IDLE;\n\n        const stageWidth = this.renderer.width;\n        const stageHeight = this.renderer.height;\n        this.river = new CardRiverArea(stageWidth/2, stageHeight/4*2);\n        this.betRiver = new CardBetArea(stageWidth/2, stageHeight/4*2);\n        this.river.visible = false;\n        this.betRiver.visible = false;\n        this.fg.addChild(this.river);\n        this.fg.addChild(this.betRiver);\n        const contextualBox = new GUIContext(0, stageHeight * 5/6, this);\n        const topMenu = new TopMenuLayout(0, 0, this);\n\n        this.fg.addChild(contextualBox);\n        this.fg.addChild(topMenu);\n        contextualBox.update(this);\n        topMenu.update(this);\n        this.clearBoard();\n        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n          \n    }\n\n    clearBoard() {\n        this.river.destroyChildren();\n        if (this.cards) this.cards.destroy();\n        this.cards = CardsGenerator.generateCards().shuffle();\n    }\n\n    /**\n     * @param {number} count\n     * @param {AbsCardArea} cardArea\n     */\n    distribute(count, cardArea = this.river) {\n        \n        // const forcedCards = 0;\n        // [ 3, 2, 1, 0, CardsGenerator.JOKER_VALUE ].forEach(function (value) {\n        //     const card = this.cards.getByValue(value);\n        //     this.river.addChild(card);\n        //     this.cards.remove(card);\n        // }, this);\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(2);\n        // //     if (i > 3) card = this.cards.getByValue(4);\n        // //     this.river.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n        // // for (let i = 0; i < forcedCards; i++) {\n        // //     let card = this.cards.getByValue(i + 1);\n        // //     this.river.addChild(card)\n        // //     this.cards.remove(card);\n        // // }\n\n        for (let index = 0; index < count; index++) {\n            let card = this.cards.peek();\n            cardArea.addCard(card);\n            this.cards.remove(card);\n        }\n    }\n\n    displayCardCursorSelection() {\n        const p = this.river.getCardAt(0);\n        const cursor = new GUICardSelector(p.x + CardsGenerator.CARD_WIDTH / 2, p.y + CardsGenerator.CARD_HEIGHT + 25)\n        cursor.setCursorCardIndex(this, 0);\n        this.gui.addChild(cursor);\n    }\n\n    setState(state) {\n        this.gameState = state;\n    }\n\n    setPlayingState(state) {\n        this.playingGameState = state;\n        switch (state) {\n            case Game.STATE_PLAYING_CHOOSE_CARDS:\n                this.river.visible = true;\n                this.betRiver.visible = false;\n                this.betCount = this.originalBetCount;\n                this.tokenCount -= this.originalBetCount;\n                Tracker.track('game:new');\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayControls();\n                this.clearBoard();\n                this.distribute(5);\n                this.displayCardCursorSelection();\n                break;\n            case Game.STATE_PLAYING_DISPLAY_RIVER_SCORE:\n                this.commitChanges();\n                const combo = this.getCardComboList().getHigherCombo() || null;\n                const iaCombo = new CardCombo({ type: ComboType.Pair });\n\n                const score = Resolver.compareCombos(combo, iaCombo);\n                if (combo) {\n                    combo.getCards().forEach(function (d) {\n                        d.highlight();\n                    });\n                    Tracker.track('combo', {\n                        type: combo.getTypeName(),\n                        cards: combo.getCards().map(String)\n                    });\n                    if (Score.WON === score) {\n                        this.betCount = this.originalBetCount * combo.type;\n                    }\n                }\n                this.fg.findChildrenByType(GUIContext).displayCombo(combo);\n                this.gui.addChild(new GUIScoreLayout({\n                    playerCombo: combo,\n                    iaCombo: iaCombo,\n                    game: this\n                }));\n                \n                break;\n            case Game.STATE_PLAYING_CHOOSE_RISK:\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayChooseBet();\n                break;\n            case Game.STATE_PLAYING_CHOOSE_UP_OR_DOWN:\n                this.river.visible = false;\n                this.betRiver.visible = true;\n                this.betRiver.destroyChildren();\n                this.distribute(1, this.betRiver);\n                this.fg.findChildrenByType(GUIContext).displayUpOrDownChoice(this._onBetChoiceDone.bind(this));\n                break;\n\n        }\n    }\n\n    _onBetChoiceDone(choice) {\n        this.distribute(1, this.betRiver);\n        const firstCard = this.betRiver.getCardAt(0);\n        const lastCard = this.betRiver.getCardAt(1);\n\n        if ((choice == 'up' && firstCard.value < lastCard.value) || (choice == 'down' && firstCard.value > lastCard.value)) {\n            this.betCount *= 2;\n            this.displayBetScore(Score.WON);\n        } else {\n            this.displayBetScore(Score.LOST);\n        }\n        this.setPlayingState(Game.STATE_PLAYING_DISPLAY_BET_SCORE);\n    }\n\n    displayBetScore(score) {\n        this.gui.addChild(new GUIBetScore({\n            game: this,\n            score: score\n        }));\n    }\n\n    getFPS() {\n        return ticker.FPS;\n    }\n\n    isRunning() {\n        return ticker.started;\n    }\n\n    isPlaying() {\n        return this.gameState === Game.GAME_PLAYING;\n    }\n\n    getSize() {\n        return { width: this.renderer.width, height: this.renderer.height };\n    }\n\n    setSize(w, h) {\n        if (this.container) {\n            this.container.style.width = `${w}px`;\n            this.container.style.height = `${h}px`;\n        }\n        if (this.renderer.width !== w || this.renderer.height !== h) {\n            this.renderer.resize(w, h);\n        }\n    }\n\n    start() {\n        if (!this.isRunning()) {\n            if (this.gameState === Game.GAME_IDLE) {\n                this.setState(Game.STATE_PLAYING);\n            }\n            ticker.add(this.loop, this);\n            ticker.start();\n        }\n    }\n\n    stop() {\n        if (this.isRunning()) {\n            ticker.stop();\n            ticker.remove(this.loop, this);\n        }\n    }\n\n    loop(time) {\n        this._frame += 1;\n\n        this.fg.update(this);\n        this.gui.update(this);\n        if (this.gameState === Game.STATE_PLAYING) {\n            if (this.playingGameState === Game.STATE_PLAYING_CHOOSE_CARDS) {\n                if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    this.setPlayingState(Game.STATE_PLAYING_DISPLAY_RIVER_SCORE);\n                }\n            } else if (this.playingGameState === Game.STATE_PLAYING_DISPLAY_BET_SCORE) {\n\n                let scoreLayout = this.gui.findChildrenByType(GUIBetScore);\n                if (scoreLayout.scoreState === AbsScoreLayout.STATE_TRANSITION_TERMINATED || Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    if (scoreLayout.hasWon()) {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_RISK);\n                    } else {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n                    }\n                }\n\n            } else if (this.playingGameState === Game.STATE_PLAYING_DISPLAY_RIVER_SCORE) {\n                let scoreLayout = this.gui.findChildrenByType(GUIScoreLayout);\n                if (scoreLayout.scoreState === AbsScoreLayout.STATE_TRANSITION_TERMINATED || Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    if (!scoreLayout.playerCombo || scoreLayout.playerCombo.type < 2) {\n                        if (scoreLayout.playerCombo) {\n                            this.tokenCount += this.betCount;\n                        }\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n                    } else {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_RISK);\n                    }\n                }\n            }\n        }\n\n        if (this.gameState === Game.STATE_IDLE) {\n            this.gameState = Game.STATE_PLAYING;\n            this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n        }\n\n        this.renderer.render(this.renderingContainer);\n        Keyboard.update();\n    }\n\n    getCardComboList() {\n        return new CardComboList(this.river.getCards());\n    }\n\n    commitChanges() {\n        const cards = this.river.selectedCardsToBeChanged.splice(0, this.river.selectedCardsToBeChanged.length);\n        const cardsLen = cards.length;\n        for (let index = 0; index < cardsLen; index++) {\n            this.river.removeCard(cards[index]);\n            cards[index].destroy(); \n        }\n        this.distribute(cardsLen);\n    }\n\n\n    /**\n     * \n     * @param {Function} GuiClass - The GuiClass to instantiate\n     * @param {boolean=} swt - true will create an instance if it doesnt exists, false will destroy it\n     */\n    toggleGuiElementPresence(GuiClass, swt) {\n        let instance = this.gui.children.find((d) => d instanceof GuiClass);\n        if (typeof swt === 'undefined') swt = !instance;\n        if (!instance && swt) {\n            instance = new GuiClass();\n            this.gui.addChild(instance);\n        } else if (instance && !swt) {\n            instance.destroy();\n        }\n    }\n\n};\n\nGame.STATE_IDLE = 0;\nGame.STATE_INTRO = 1;\nGame.STATE_PLAYING = 2;\nGame.STATE_GAMEOVER = 4;\n\nGame.STATE_PLAYING_CHOOSE_BET = 1;\nGame.STATE_PLAYING_CHOOSE_CARDS = 2;\nGame.STATE_PLAYING_EXCHANGE_CARD_TRANSITION = 3;\nGame.STATE_PLAYING_DISPLAY_RIVER_SCORE = 4;\nGame.STATE_PLAYING_CHOOSE_RISK = 5;\nGame.STATE_PLAYING_CHOOSE_UP_OR_DOWN = 6;\nGame.STATE_PLAYING_DISPLAY_BET_SCORE = 7;\nGame.STATE_PLAYING_UP_OR_DOWN_SCORE = 8;\n\n","import Game from './Game';\nimport Card from './Card';\nimport Tracker from './Tracker';\nimport {version} from '../package.json';\n\nGame.VERSION = version;\nGame.BUILD_TIME = '{BUILD_TIME}';\n\nTracker.track('pageview');\n\nexport default {\n    Game\n};"],"names":["keyboardState","Map","lastKeyboardState","Keyboard","keyCode","get","isKeyUp","isKeyDown","window","addEventListener","event","set","isMe","localStorage","getItem","stopTracking","test","location","toString","mixpanel","console","log","identify","eventName","properties","callback","track","CardsGenerator","output","suitIndex","SUITS","length","valueIndex","VALUE_LABELS","push","Card","CARD_WIDTH","CARD_HEIGHT","index","JOKER","JOKER_VALUE","CardCollection","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","options","value","suit","width","height","originalWidth","originalHeight","drawBackground","valueText","PIXI","Text","getValue","suitText","getSuit","isHighlighted","y","anchor","addChild","shadowSteps","clear","lineStyle","beginFill","drawRoundedRect","endFill","Graphics","arrayOfCard","isArray","cards","slice","forEach","d","destroy","card","indexOf","splice","find","c","input","toArray","floor","random","_identity","array","predicate","ids","id","a","b","min","max","ComboType","Object","defineProperty","forName","type","keys","key","CardComboList","cardsCollection","originalCollection","combos","_parse","objects","add","object","cardCombo","CardCombo","sort","addAll","_getXOfAKind","twoPairsCombo","_getTwoPairs","straightCombo","_getStraight","flushCombo","_getFlush","fullHouseCombo","_getFullHouse","straightFlushCombo","_getStraightFlush","Numbers","Compare","desc","getScore","pairs","combo","Pair","_isAllCardDifferents","TwoPair","concat","map","comboTypeMapper","ThreeOfAKind","FourOfAKind","FiveOfAKind","cardIndex","localeCards","isJoker","Arrays","uniq","getId","pair","threeOfAKind","FullHouse","getCards","values","asc","jokers","filter","match","Straight","firstSuit","Flush","flush","straight","StraightFlush","c1","c2","c1Cards","c2Cards","i1","i2","join","peek","_sortCards","getTypeName","languages","currentLang","langs","lang","Lang","chainedName","names","split","currentObject","keyName","babelHelpers.typeof","UpdatableContainer","game","updateChildren","children","removeChildren","child","update","Type","Container","LinearLayout","childMargin","setOrientation","orientation","ORIENTATION_VERTICAL","_orientation","_posPropertyName","_sizePropertyName","ORIENTATION_HORIZONTAL","childIndex","getChildPosition","getChildAt","Point","pivot","updateChildrenPosition","pos","Score","Resolver","card1","card2","WON","LOST","DRAW","combo1","combo2","GUICardSelector","WIDTH","HEIGHT","moveTo","lineTo","originalY","river","cardSlots","p","getCardPositionAt","cos","_frame","isKeyPushed","LEFT_ARROW","setCursorCardIndex","RIGHT_ARROW","UP_ARROW","SHIFT","setSelectedCardIndex","DOWN_ARROW","ENTER","Timer","targetedTime","ticker","shared","target","time","isStarted","stop","tick","remove","elapsedMS","TransformAnimation","posFrom","posTo","scaleFrom","isNaN","scaleTo","rotationFrom","rotationTo","alphaFrom","alphaTo","timer","duration","interpolator","sprite","start","rawRatio","ratio","setTransform","alpha","GUIText","text","textStyle","tags","animation","setAnimation","BigText","GuiText","GuiToken","AbsScoreLayout","score","transitionDuration","transitionDelay","_lastScoreState","scoreState","STATE_TRANSITION_IDLE","isDestroyed","rendererWidth","renderer","rendererHeight","state","comparisonLabel","i18n","t","hasWon","isDraw","textConfig","STATE_TRANSITION_SUIT","STATE_TRANSITION_COMPARISON","STATE_TRANSITION_COMPARISON_ENDING","STATE_TRANSITION_TERMINATED","GUIScoreLayout","compareCombos","playerCombo","iaCombo","spawnSuitName","spawnComparison","mUpdateChildrenPosition","comboName","getSuitText","getInAnimation","changeState","getComparisonText","getOutAnimation","GUIBetScore","ContextualBox","_isValid","drawBox","graphics","rect","left","top","right","bottom","Rect","ContextualDisplayer","parent","getWidth","getHeight","_drawBox","col1","col2","rows","label","row","texts","textStyleWhite","textStyleOrange","bold","beginIndex","isLastItem","charAt","trim","GUICursor","MENU_ITEM_FONT_SIZE","ContextualMenu","currentCursor","currentCursorIndex","menuItems","layout","menuDesc","menuitem","menuItemIndex","menuItemCallback","setCursorIndex","position","getChildPositionAt","hasCursor","isKeyReleased","item","MARGIN_HONRIZONTAL","MARGIN_VERTICAL","GUIContext","_width","_height","displayControls","displayCombo","displayChooseBet","displayMenu","setPlayingState","Game","STATE_PLAYING_CHOOSE_UP_OR_DOWN","tokenCount","betCount","STATE_PLAYING_CHOOSE_CARDS","displayUpOrDownChoice","GUIComboTypeItem","comboType","parentWidth","redraw","localeComboName","factorText","GUIComboTypesList","drawLists","MARGIN_HOR","linearLayoutWidth","GUIBetBox","betText","GUITokenCount","totalTokenText","TopMenuLayout","AbsCardArea","slots","updateLayoutPivot","removeChild","removeCardAt","getCardAt","addCardAt","findFirstEmptySlot","CardRiverArea","selectedCardsToBeChanged","swt","indexOfCard","isSelected","CardBetArea","setup","originalBetCount","gameState","GAME_IDLE","playingGameState","STATE_PLAYING_CHOOSE_BET","fg","gui","renderingContainer","rendererOptions","transparent","autoResize","antialias","resolution","backgroundColor","roundPixels","autoDetectRenderer","container","appendChild","view","setSize","setLang","clearGame","player","destroyChildren","STATE_IDLE","stageWidth","stageHeight","betRiver","visible","contextualBox","topMenu","clearBoard","generateCards","shuffle","count","cardArea","addCard","cursor","findChildrenByType","distribute","displayCardCursorSelection","STATE_PLAYING_DISPLAY_RIVER_SCORE","commitChanges","getCardComboList","getHigherCombo","highlight","String","STATE_PLAYING_CHOOSE_RISK","_onBetChoiceDone","bind","choice","firstCard","lastCard","displayBetScore","STATE_PLAYING_DISPLAY_BET_SCORE","FPS","started","GAME_PLAYING","w","h","style","resize","isRunning","setState","STATE_PLAYING","loop","scoreLayout","render","cardsLen","removeCard","GuiClass","instance","STATE_INTRO","STATE_GAMEOVER","STATE_PLAYING_EXCHANGE_CARD_TRANSITION","STATE_PLAYING_UP_OR_DOWN_SCORE","VERSION","version","BUILD_TIME","Tracker"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}