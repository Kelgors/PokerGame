{"version":3,"file":"poker_game.js","sources":["src/lib/Keyboard.js","src/Tracker.js","src/CardsGenerator.js","src/lib/BezierEasing.js","src/Card.js","src/CardCollection.js","src/Arrays.js","src/Numbers.js","src/CardComboList.js","src/i18n.js","src/containers/UpdatableContainer.js","src/gui/LinearLayout.js","src/Score.js","src/gui/GUICardSelector.js","src/lib/Timer.js","src/lib/TransformAnimation.js","src/lib/GUIText.js","src/Config.js","src/gui/AbsScoreLayout.js","src/gui/GUIScoreLayout.js","src/gui/GUIBetScore.js","src/gui/ContextualBox.js","src/lib/Rect.js","src/gui/contextual-menu/ContextualDisplayer.js","src/gui/contextual-menu/GUICursor.js","src/gui/contextual-menu/ContextualMenu.js","src/gui/GUIContext.js","src/gui/top-menu/GUIComboTypeItem.js","src/gui/top-menu/GUIComboTypesList.js","src/gui/top-menu/GUIBetBox.js","src/gui/top-menu/GUITokenCount.js","src/gui/TopMenuLayout.js","src/containers/AbsCardArea.js","src/containers/CardRiverArea.js","src/containers/CardBetArea.js","src/Game.js","src/poker_game.js"],"sourcesContent":["let keyboardState = new Map();\nlet lastKeyboardState = new Map();\nconst keyboardEventHandlers = new Map();\nconst Keyboard = {\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPS_LOCK: 20,\n  ESCAPE: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n  INSERT: 45,\n  DELETE: 46,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n  LEFT_WINDOW_KEY: 91,\n  RIGHT_WINDOW_KEY: 92,\n  SELECT_KEY: 93,\n  NUMPAD_0: 96,\n  NUMPAD_1: 97,\n  NUMPAD_2: 98,\n  NUMPAD_3: 99,\n  NUMPAD_4: 100,\n  NUMPAD_5: 101,\n  NUMPAD_6: 102,\n  NUMPAD_7: 103,\n  NUMPAD_8: 104,\n  NUMPAD_9: 105,\n  MULTIPLY: 106,\n  ADD: 107,\n  SUBTRACT: 109,\n  DECIMAL_POINT: 110,\n  DIVIDE: 111,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  NUM_LOCK: 144,\n  SCROLL_LOCK: 145,\n  SEMI_COLON: 186,\n  EQUAL_SIGN: 187,\n  COMMA: 188,\n  DASH: 189,\n  PERIOD: 190,\n  FORWARD_SLASH: 191,\n  GRAVE_ACCENT: 192,\n  OPEN_BRACKET: 219,\n  BACK_SLASH: 220,\n  CLOSE_BRAKET: 221,\n  SINGLE_QUOTE: 222,\n  isKeyDown(keyCode) {\n    return !!keyboardState.get(keyCode);\n  },\n  isKeyUp(keyCode) {\n    return !keyboardState.get(keyCode);\n  },\n  isKeyReleased(keyCode) {\n    return Keyboard.isKeyUp(keyCode) && lastKeyboardState.get(keyCode);\n  },\n  isKeyPushed(keyCode) {\n    return Keyboard.isKeyDown(keyCode) && !lastKeyboardState.get(keyCode);\n  },\n  update() {\n    lastKeyboardState = keyboardState;\n    keyboardState = new Map(lastKeyboardState);\n  }\n};\n// Keep state of all action\nwindow.addEventListener('keyup', function (event) {\n    keyboardState.set(event.keyCode, false);\n});\nwindow.addEventListener('keydown', function (event) {\n    keyboardState.set(event.keyCode, true);\n});\n\nexport default Keyboard;","const isMe = !!localStorage.getItem('isMe');\nconst stopTracking = !!localStorage.getItem('StopTracking') || /localhost\\:8080/.test(location.toString()) || typeof mixpanel === 'undefined';\n\nif (stopTracking) console.log('stop-tracking');\n\nif (isMe) {\n    mixpanel.identify('1');\n}\n\nexport default {\n    /**\n     * @param {String} eventName\n     * @param {Object} properties\n     * @param {Function} callback\n     */\n    track(eventName, properties, callback) {\n        if (stopTracking) return;\n        mixpanel.track(eventName, properties, callback);\n    }\n};\n\n","import PIXI from 'pixi.js';\nimport CardCollection from './CardCollection';\nimport Card from './Card';\n\nclass CardsGenerator {\n    /**\n     * @param {Object<string, PIXI.Texture>}\n     */\n    constructor(cardsTexture) {\n        /** @type {Object<string, PIXI.Texture>} */\n        this.cardsTexture = cardsTexture;\n        if (!cardsTexture) throw new Error('CardsGenerator needs CardTexture');\n    }\n\n    toAssetName(value, suit) {\n        if (suit === CardsGenerator.RED_JOKER) return 'red_joker';\n        if (suit === CardsGenerator.BLACK_JOKER) return 'black_joker';\n        return `card:${CardsGenerator.VALUE_LABELS[value].toLowerCase()}_of_${CardsGenerator.SUITS[suit].toLowerCase()}`;\n    }\n\n    generateCards() {\n        const output = [];\n        for (let suitIndex = 0; suitIndex < CardsGenerator.SUITS.length; suitIndex++) {\n            for (let valueIndex = 0; valueIndex < CardsGenerator.VALUE_LABELS.length; valueIndex++) {\n                const assetName = this.toAssetName(valueIndex, suitIndex);\n                const texture = this.cardsTexture[assetName];\n                if (!texture) throw new Error(`Asset ${assetName} is missing`);\n                output.push(new Card({\n                    width: CardsGenerator.CARD_WIDTH,\n                    height: CardsGenerator.CARD_HEIGHT,\n                    suit: suitIndex,\n                    value: valueIndex,\n                    texture: texture\n                }));\n            }\n        }\n        output.push(new Card({\n            width: CardsGenerator.CARD_WIDTH,\n            height: CardsGenerator.CARD_HEIGHT,\n            suit: CardsGenerator.RED_JOKER,\n            value: CardsGenerator.JOKER_VALUE,\n            texture: this.cardsTexture['card:red_joker']\n        }));\n        output.push(new Card({\n            width: CardsGenerator.CARD_WIDTH,\n            height: CardsGenerator.CARD_HEIGHT,\n            suit: CardsGenerator.BLACK_JOKER,\n            value: CardsGenerator.JOKER_VALUE,\n            texture: this.cardsTexture['card:black_joker']\n        }));\n        return new CardCollection(output);\n    }\n}\n\nCardsGenerator.CARD_WIDTH = 370 / 4;\nCardsGenerator.CARD_HEIGHT = 522 / 4;\nCardsGenerator.RED_JOKER = 'RedJoker';\nCardsGenerator.BLACK_JOKER = 'BlackJoker';\nCardsGenerator.JOKER_VALUE = 13;\nCardsGenerator.SUITS = [ 'Spades', 'Hearts', 'Diamonds', 'Clubs' ];\nCardsGenerator.VALUE_LABELS = [ '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace' ];\n\nexport default CardsGenerator;\n","\n/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n    return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX, currentT, i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        } else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\n\nexport default function bezier(mX1, mY1, mX2, mY2) {\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n        for (var i = 0; i < kSplineTableSize; ++i) {\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    function getTForX(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }--currentSample;\n\n        // Interpolate to provide an initial guess for t\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n\n    return function BezierEasing(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}; ","import PIXI from 'pixi.js';\nimport CardsGenerator from './CardsGenerator';\nimport BezierEasing from './lib/BezierEasing';\n\nexport default class Card extends PIXI.Container {\n\n  constructor(options) {\n    super();\n    this.value = options.value;\n    this.suit  = options.suit;\n\n    this.isHighlighted = false;\n    this.highlightGraphics = new PIXI.Graphics();\n    this.highlightGraphics.visible = false;\n\n    const cardPicture = new PIXI.Sprite(options.texture);\n    cardPicture.width = options.width;\n    cardPicture.height = options.height;\n    this.addChild(this.highlightGraphics);\n    this.addChild(cardPicture);\n  }\n\n  highlight() {\n    const shadowSteps = 10;\n    this.isHighlighted = true;\n    this.highlightGraphics.visible = true;\n    this.highlightGraphics.clear();\n    for (let i = 0; i < shadowSteps; i++) {\n      let alpha = 0.8 - i / shadowSteps;\n      if (alpha < 0) break;\n      this.highlightGraphics.lineStyle(1, 0xffff00, alpha)\n        .drawRoundedRect(-i, -i, this.width+1, this.height+1, this.width/10);\n    }\n  }\n\n  isJoker() {\n    return this.value === CardsGenerator.JOKER_VALUE;\n  }\n\n  getSuit() {\n    if (this.isJoker()) return 'Joker';\n    return CardsGenerator.SUITS[this.suit];\n  }\n\n  getValue() {\n    if (this.isJoker()) return 'Joker';\n    return CardsGenerator.VALUE_LABELS[this.value];\n  }\n\n  toString() {\n    return `${this.getValue()} of ${this.getSuit()}`;\n  }\n\n}","import Card from './Card';\n\nexport default class CardCollection {\n\n    static from(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) return arrayOfCard;\n        if (Array.isArray(arrayOfCard)) return new CardCollection(arrayOfCard);\n        return new CardCollection();\n    }\n\n    constructor(arrayOfCard) {\n        if (arrayOfCard instanceof CardCollection) {\n            this.cards = arrayOfCard.cards.slice(0);\n        } else if (Array.isArray(arrayOfCard)) {\n            this.cards = arrayOfCard;\n        } else {\n            this.cards = [];\n        }\n    }\n\n    destroy() {\n        this.cards.forEach((d) => d.destroy());\n    }\n\n    /**\n     * @param {Card[]} cards\n     */\n    addAll(cards) {\n        this.cards.push(...cards);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    add(card) {\n        this.cards.push(card);\n    }\n\n    /**\n     * @param {Card} card\n     */\n    remove(card) {\n        let index;\n        if ((index = this.cards.indexOf(card)) > -1) {\n            return this.cards.splice(index, 1)[0];\n        }\n        return null;\n    }\n\n    /**\n     * @param {number} suit\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getBySuitAndValue(suit, value) {\n        return this.cards.find((c) => c.value === value && c.suit === suit);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {Card} card\n     */\n    getByValue(value) {\n        return this.cards.find((c) => c.value === value);\n    }\n\n    /**\n     * @param {number} suit\n     * @returns {Card} card\n     */\n    getBySuit(suit) {\n        return this.cards.find((c) => c.suit === suit);\n    }\n\n    /**\n     * @returns {Card} card\n     */\n    peek() {\n        return this.cards[0];\n    }\n\n    shuffle() {\n        const output = [];\n        const input = this.toArray();\n        while (input.length > 0) {\n            let index = Math.floor(Math.random() * input.length);\n            output.push(input.splice(index, 1)[0]);\n        }\n        this.cards = output;\n        return this;\n    }\n\n    /**\n     * @returns {Card[]}\n     */\n    toArray() {\n        return this.cards.slice(0);\n    }\n\n    /**\n     * @returns {String}\n     */\n    toString() {\n        return this.cards.toString();\n    }\n};","function _identity(d) {return d;}\nexport default {\n  uniq(array, predicate = _identity) {\n    var output = [];\n    var ids = [];\n    array.forEach(function (d) {\n      const id = predicate(d);\n      if (ids.indexOf(id) === -1) {\n        output.push(d);\n        ids.push(id);\n      }\n    });\n    return output;\n  }\n};","export default {\n    Compare: {\n        asc(a, b) {\n            if (a > b) return 1;\n            if (a < b) return -1;\n            return 0;\n        },\n        desc(a, b) {\n            if (a > b) return -1;\n            if (a < b) return 1;\n            return 0;\n        }\n    },\n    /**\n     * @param {number} value the value to clamp\n     * @param {number} min\n     * @param {number} max\n     */\n    clamp(value, min, max) {\n        return Math.max(Math.min(value, max), min);\n    }\n};","import CardCollection from './CardCollection';\nimport Arrays from './Arrays';\nimport Numbers from './Numbers';\n\n/** @type {Object.<string, number>} */\nexport var ComboType = {\n    Pair: 1,\n    TwoPair: 2,\n    ThreeOfAKind: 3,\n    Straight: 5,\n    Flush: 7,\n    FullHouse: 8,\n    FourOfAKind: 10,\n    StraightFlush: 20,\n    RoyalFlush: 50,\n    FiveOfAKind: 100\n};\n/**\n * @property {Function}\n * @name ComboType.forName\n * @param {Number} type\n * @returns {String}\n*/\nObject.defineProperty(ComboType, 'forName', {\n    enumerable: false,\n    value: function forName(type) {\n        return Object.keys(ComboType).find((key) => ComboType[key] === type);\n    }\n});\n\nexport class CardComboList {\n    \n    /**\n     * @param {CardCollection} cardsCollection\n     */\n    constructor(cardsCollection) {\n        this.originalCollection = cardsCollection;\n        this.combos = [];\n        this._parse(cardsCollection);\n    }\n\n    addAll(objects) {\n        objects.forEach((d) => this.add(d));\n    }\n\n    add(object) {\n        let cardCombo;\n        if (!(object instanceof CardCombo)) {\n            cardCombo = new CardCombo(object);\n        } else cardCombo = object;\n        this.combos.push(cardCombo);\n        return this;\n    }\n\n    getHigherCombo() {\n        return this.combos.sort((a, b) => {\n            if (a.type > b.type) return -1;\n            if (a.type < b.type) return 1;\n            return 0;\n        })[0];\n    }\n\n    _parse() {\n        // 2 - Pair\n        // 4 - ThreeOfAKind\n        // 8 - FourOfAKind\n        // 10 - FiveOfAKind\n        this.addAll(this._getXOfAKind());\n        // 3 - TwoPair\n        const twoPairsCombo = this._getTwoPairs();\n        if (twoPairsCombo) this.add(twoPairsCombo);\n        // 5 - Straight\n        const straightCombo = this._getStraight();\n        if (straightCombo) this.add(straightCombo);\n        // 6 - Flush\n        const flushCombo = this._getFlush();\n        if (flushCombo) this.add(flushCombo);\n        // 7 - FullHouse\n        const fullHouseCombo = this._getFullHouse();\n        if (fullHouseCombo) this.add(fullHouseCombo);\n        // 9 - StraightFlush\n        const straightFlushCombo = this._getStraightFlush();\n        if (straightFlushCombo) this.add(straightFlushCombo);\n\n        // todo: royalFlush\n        \n        this.combos.sort((a, b) => Numbers.Compare.desc(a.getScore(), b.getScore()));\n    }\n\n    _getHigherCard() {\n        const cards = this.originalCollection.toArray();\n        return cards.sort((a, b) => {\n            if (a.value > b.value) return -1;\n            if (a.value < b.value) return 1;\n            return 0;\n        })[0];\n    }\n\n    _getTwoPairs() {\n        const pairs = [];\n        this.combos.forEach(function (combo) {\n            if (combo.type === ComboType.Pair) pairs.push(combo);\n        });\n        if (pairs.length === 2 && this._isAllCardDifferents(pairs[0], pairs[1])) {\n\n            return new CardCombo({\n                type: ComboType.TwoPair,\n                cards: [].concat(...pairs.map((d) => d.cards.toArray()))\n            });\n        }\n    }\n\n    _getXOfAKind() {\n        const cards = this.originalCollection.toArray();\n        const combos = [];\n        const comboTypeMapper = {\n            2: ComboType.Pair,\n            3: ComboType.ThreeOfAKind,\n            4: ComboType.FourOfAKind,\n            5: ComboType.FiveOfAKind\n        };\n        cards.forEach((card, cardIndex, cards) => {\n            const localeCards = [ card ];\n            for (let index = 0; index < cards.length; index++) {\n                if (card !== cards[index] && (card.value === cards[index].value || cards[index].isJoker())) {\n                    localeCards.push(cards[index]);\n                }\n            }\n            if (localeCards.length > 1 && localeCards.length < 6) {\n                combos.push(new CardCombo({\n                    type: comboTypeMapper[localeCards.length],\n                    cards: localeCards\n                }));\n            }\n        });\n        return Arrays.uniq(combos, (d) => d.getId());\n    }\n\n    _getFullHouse() {\n        const pair = this.combos.find((d) => d.type === ComboType.Pair);\n        const threeOfAKind = this.combos.find((d) => d.type === ComboType.ThreeOfAKind);\n        if (pair && threeOfAKind && this._isAllCardDifferents(pair, threeOfAKind)) {\n            return new CardCombo({\n                type: ComboType.FullHouse,\n                cards: [].concat(pair.getCards(), threeOfAKind.getCards())\n            });\n        }\n    }\n\n    _getStraight() {\n        const cards = this.originalCollection.toArray();\n        const values = cards.map((d) => d.value).sort(Numbers.Compare.asc);\n        let jokers = cards.filter((d) => d.isJoker()).length;\n        for (let index = 1, value = values[0]; index < values.length; index++) {\n            const match = value + 1 === values[index];\n            if (!match && jokers === 0) return;\n            if (!match) jokers--;\n            value++;\n        }\n        return new CardCombo({\n            type: ComboType.Straight,\n            cards: cards\n        });\n    }\n\n    _getFlush() {\n        const cards = this.originalCollection.toArray();\n        let firstSuit = cards[0].suit;\n        for (let index = 1; index < cards.length; index++) {\n            if (cards[index].suit !== firstSuit && !cards[index].isJoker()) return null;\n        }\n        return new CardCombo({\n            type: ComboType.Flush,\n            cards: cards\n        });\n    }\n\n    _getStraightFlush() {\n        const flush = this.combos.find((d) => d.type === ComboType.Flush);\n        const straight = this.combos.find((d) => d.type === ComboType.Straight);\n        if (flush && straight) {\n            return new CardCombo({\n                type: ComboType.StraightFlush,\n                cards: flush.getCards()\n            });\n        }\n    }\n\n    /**\n     * @param {Combo} c1\n     * @param {Combo} c2\n     * @returns {boolean}\n     */\n    _isAllCardDifferents(c1, c2) {\n        const c1Cards = c1.getCards();\n        const c2Cards = c2.getCards();\n        for (let i1 = 0; i1 < c1Cards.length; i1++)\n            for (let i2 = 0; i2 < c2Cards.length; i2++)\n                if (c1Cards[i1] === c2Cards[i2]) return false;\n        return true;\n    }\n\n    toString() {\n        return this.combos.join('\\n');\n    }\n\n}\n// TODO: TEST K 4 4 K J\n// TODO: TEST Q 5 5 Q J\nexport class CardCombo {\n\n    constructor(object) {\n        /** @type {number} */\n        this.type = object.type;\n        /** @type {CardCollection} */\n        this.cards = new CardCollection();\n        if (object.cards) this.cards.addAll(object.cards);\n        else if (object.card) this.cards.add(object.card);\n        this.getCards().sort((a, b) => Numbers.Compare.asc(a.value, b.value));\n    }\n\n    /**\n     * @returns {Card}\n     */\n    getCard() { return this.cards.peek(); }\n    /**\n     * @returns {CardCollection}\n     */\n    getCards() { return this.cards.cards; }\n\n    /**\n     * @private\n     * @returns {CardCollection}\n     */\n    _sortCards() {\n        this.getCards().sort((a, b) => { return Numbers.Compare.asc(a.suit, b.suit); });\n    }\n\n    /**\n     * @returns {String}\n     */\n    getId() {\n        this._sortCards();\n        return this.getCards().map((d) => `${d.value}&${d.suit}`).join('/');\n    }\n\n    /**\n     * @returns {number}\n     */\n    getScore() {\n        return this.type;\n    }\n\n    /**\n     * @returns {String}\n     */\n    getTypeName() {\n        return ComboType.forName(this.type);\n    }\n\n    /**\n     * @returns {String}\n     */\n    toString() {\n        return `${this.getTypeName()} { ${this.getCards().join(', ')} }`;\n    }\n\n}","import {ComboType} from './CardComboList';\n\nlet languages = [];\nlet currentLang = null;\n\nexport default {\n    setup(langs) {\n        languages = langs;\n        currentLang = languages[0];\n    },\n    setLang(lang) {\n        currentLang = languages.find((d) => d.Lang === lang);\n    },\n    t(chainedName) {\n        const names = chainedName.split('.');\n        let currentObject = currentLang;\n        for (let index = 0; index < names.length; index++) {\n            const keyName = names[index];\n            if (keyName in currentObject) {\n                if (typeof currentObject[keyName] !== 'object') {\n                    return currentObject[keyName];\n                } else {\n                    currentObject = currentObject[keyName];\n                }\n            }\n        }\n        return '';\n    }\n};","import PIXI from 'pixi.js';\n\nexport default class UpdatableContainer extends PIXI.Container {\n    update(game) {\n        this.updateChildren(game);\n    }\n\n    destroyChildren() {\n        this.children.forEach((d) => d.destroy());\n        this.removeChildren();\n    }\n\n    /**\n     * Invoke update method of all children\n     * @param {Game} game\n     */\n    updateChildren(game) {\n        this.children.forEach(function (child) { \n            child.update(game); \n        });\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject}\n     */\n    findChildrenByType(Type) {\n        return this.children.find((d) => d instanceof Type);\n    }\n\n    /**\n     * @param {Function} Type\n     * @returns {PIXI.DisplayObject[]}\n     */\n    findAllChildByType(Type) {\n        return this.children.filter((d) => d instanceof Type);\n    }\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\n\nexport default class LinearLayout extends UpdatableContainer {\n\n    /**\n     * @param {Object} [options]\n     * @property {number} x\n     * @property {number} y\n     * @property {number} childMargin\n     */\n    constructor(options = {}) {\n        super();\n        this.childMargin = 0;\n        if ('x' in options) this.x = options.x;\n        if ('y' in options) this.y = options.y;\n        if ('childMargin' in options) this.childMargin = options.childMargin;\n        this.setOrientation(options.orientation || LinearLayout.ORIENTATION_VERTICAL);\n    }\n\n    setOrientation(orientation) {\n        this._orientation = orientation;\n        if (orientation === LinearLayout.ORIENTATION_VERTICAL) {\n            this._posPropertyName = 'y';\n            this._sizePropertyName = 'height';\n        } else if (orientation === LinearLayout.ORIENTATION_HORIZONTAL) {\n            this._posPropertyName = 'x';\n            this._sizePropertyName = 'width';\n        }\n    }\n\n    /**\n     * @param {number} childIndex\n     * @returns {PIXI.Point}\n     */\n    getChildPositionAt(childIndex) {\n        return this.getChildPosition(this.getChildAt(childIndex));\n    }\n\n    /**\n     * @param {PIXI.DisplayObject} child\n     * @returns {PIXI.Point}\n     */\n    getChildPosition(child) {\n        return new PIXI.Point(this.x - this.pivot.x + child.x - child.pivot.x, this.y - this.pivot.y + child.y - child.pivot.y);\n    }\n\n    update(game) {\n        super.update(game);\n        this.updateChildrenPosition();\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.children.length; index++) {\n            this.children[index][this._posPropertyName] = pos;\n            pos += this.children[index][this._sizePropertyName] + this.childMargin;\n        }\n    }\n}\n\nLinearLayout.ORIENTATION_VERTICAL = 1;\nLinearLayout.ORIENTATION_HORIZONTAL = 2;","export var Score = {\n    LOST: 0,\n    DRAW: 1,\n    WON: 2\n};\n\nexport var Resolver = {\n\n    /**\n     * @param {Card} card1\n     * @param {Card} card2\n     */\n    compareCards(card1, card2) {\n        if (card1 && !card2) return Score.WON;\n        if (!card1 && card2) return Score.LOST;\n        if (card1.value > card2.value) return Score.WON;\n        if (card1.value < card2.value) return Score.LOST;\n        return Score.DRAW;\n    },\n\n    /**\n     * @param {CardCombo} combo1\n     * @param {CardCombo} combo2\n     */\n    compareCombos(combo1, combo2) {\n        if (combo1 && !combo2) return Score.WON;\n        if (!combo1 && combo2) return Score.LOST;\n        if (combo1.getScore() > combo2.getScore()) return Score.WON;\n        if (combo1.getScore() < combo2.getScore()) return Score.LOST;\n        return Score.DRAW;\n    }\n};","import PIXI from 'pixi.js';\nimport Keyboard from '../lib/Keyboard';\nimport Game from '../Game';\n\nimport CardsGenerator from '../CardsGenerator';\n\nexport default class GUICardSelector extends PIXI.Graphics {\n    constructor(x, y) {\n        super();\n        const WIDTH = 20;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(3, 0, 1)\n            .moveTo(WIDTH/2,0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT)\n            .lineTo(0, HEIGHT)\n            .lineTo(WIDTH/2,0)\n            .endFill();\n        this.pivot.set(WIDTH / 2, 0);\n        this.originalY = y;\n        if (x) this.x = x;\n        if (y) this.y = y;\n    }\n\n    setCursorCardIndex(game, index) {\n        const river = game.river;\n        if (index < 0) index = 4;\n        if (index > river.cardSlots - 1) index = 0;\n        this.index = index;\n        const p = game.river.getCardPositionAt(index);\n        this.x = p.x + CardsGenerator.CARD_WIDTH / 2;\n        this.y = p.y + CardsGenerator.CARD_HEIGHT + 20;\n    }\n\n    /**\n     * @param {Game} game\n     */\n    update(game) {\n        this.y += Math.cos(game._frame / 10);\n        \n        if (Keyboard.isKeyPushed(Keyboard.LEFT_ARROW)) {\n            this.setCursorCardIndex(game, this.index - 1);\n        } else if (Keyboard.isKeyPushed(Keyboard.RIGHT_ARROW)) {\n            this.setCursorCardIndex(game, this.index + 1);    \n        } else if (Keyboard.isKeyPushed(Keyboard.UP_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, true);\n            } else {\n                game.river.setSelectedCardIndex(this.index, true);\n            }\n        } else if (Keyboard.isKeyPushed(Keyboard.DOWN_ARROW)) {\n            if (Keyboard.isKeyDown(Keyboard.SHIFT)) {\n                for (let i=0;i<5;i++) game.river.setSelectedCardIndex(i, false);\n            } else {\n                game.river.setSelectedCardIndex(this.index, false);\n            }\n            \n        } else if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n            this.destroy();\n        }\n    }\n}","import PIXI from 'pixi.js';\n\nexport default class Timer {\n    constructor(targetedTime, ticker = PIXI.ticker.shared) {\n        this.target = targetedTime;\n        this.time = 0;\n        this.ticker = ticker;\n        this.isStarted = false;\n    }\n\n    destroy() {\n        this.stop();\n        this.ticker = null;\n    }\n\n    set(targetedTime) {\n        this.target = targetedTime || 0;\n        this.time = 0;\n    }\n\n    reset() {\n        this.time = 0;\n    }\n\n    start() {\n        if (!this.isStarted) {\n            this.ticker.add(this.tick, this);\n            this.isStarted = true;\n        }\n    }\n\n    stop() {\n        if (this.isStarted) {\n            this.ticker.remove(this.tick, this)\n            this.isStarted = false;\n        }\n    }\n\n    tick() {\n        this.time += this.ticker.elapsedMS;\n    }\n\n    delta() {\n        return this.target - this.time;\n    }\n\n}\n","import BezierEasing from './BezierEasing';\nimport Timer from '../lib/Timer';\n\nexport default class TransformAnimation {\n    /**\n     * @param {Object} options\n     * @param {PIXI.Point} options.posFrom\n     * @param {PIXI.Point} options.posTo\n     * @param {PIXI.Point} options.pivot\n     * @param {number} options.scaleFrom\n     * @param {number} options.scaleTo\n     * @param {number} options.rotationFrom\n     * @param {number} options.rotationTo\n     * @param {number} options.timeFrom\n     * @param {number} options.duration\n     * @param {Function} options.callback\n    */\n    constructor(options) {\n        this.posFrom = options.posFrom || null;\n        this.posTo = options.posTo || null;\n        this.scaleFrom = !isNaN(options.scaleFrom) ? +options.scaleFrom : 1;\n        this.scaleTo = !isNaN(options.scaleTo) ? +options.scaleTo : 1;\n        this.rotationFrom = !isNaN(options.rotationFrom) ? +options.rotationFrom : 0;\n        this.rotationTo = !isNaN(options.rotationTo) ? +options.rotationTo : 0;\n        this.alphaFrom = !isNaN(options.alphaFrom) ? +options.alphaFrom : 1;\n        this.alphaTo = !isNaN(options.alphaTo) ? +options.alphaTo : 1;\n        this.pivot = options.pivot || new PIXI.Point(0,0);\n\n        this.timer = new Timer(options.duration);\n        this.duration = options.duration;\n        this.callback = options.callback || function () {};\n        this.interpolator = options.interpolator || BezierEasing(0,0,1,1);\n    }\n\n    /**\n     * Destroy all references presents in the animation\n     */\n    destroy() {\n        this.timer.stop();\n        this.timer = null;\n        this.posFrom = this.posTo = this.pivot = null;\n        this.callback = null;\n        this.interpolator = null;\n    }\n\n    /**\n     * Update object position relative to \n     */\n    update(sprite) {\n        if (!this.timer.isStarted) this.timer.start();\n        const rawRatio = Math.min(this.duration, this.timer.time) / this.duration;\n\n        const ratio = Math.max(0, Math.min(1, this.interpolator(rawRatio)));\n        sprite.setTransform(\n            this.posFrom && this.posTo ? this.posFrom.x + (this.posTo.x - this.posFrom.x) * ratio : sprite.x,\n            this.posFrom && this.posTo ? this.posFrom.y + (this.posTo.y - this.posFrom.y) * ratio : sprite.y,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.scaleFrom + (this.scaleTo - this.scaleFrom) * ratio,\n            this.rotationFrom + (this.rotationTo - this.rotationFrom) * ratio,\n            0,\n            0, \n            this.pivot.x,\n            this.pivot.y\n        );\n        sprite.alpha = this.alphaFrom + (this.alphaTo - this.alphaFrom) * ratio; \n\n        if (rawRatio == 1) {\n            this.callback(sprite);\n        }\n    }\n}","import PIXI from 'pixi.js';\nimport TransformAnimation from './TransformAnimation';\n\nexport default class GUIText extends PIXI.Text {\n    constructor(text, textStyle) {\n        super(text, textStyle);\n        this.tags = [ 'gui' ];\n        this.animation = null;\n    }\n\n    destroy() {\n        this.setAnimation(null);\n        super.destroy();\n    }\n\n    /**\n     * @param {TransformAnimation} animation\n     */\n    setAnimation(animation) {\n        if (this.animation) this.animation.destroy();\n        this.animation = animation;\n    }\n    update() {\n        if (this.animation) this.animation.update(this);\n    }\n}","export var Debug = {\n    textConfig: {\n        fontSize: 14,\n        fontFamily: 'Consolas',\n        fill: 0\n    }\n};\n\nexport var BigText = {\n    textConfig: {\n        fontSize: 72,\n        fontFamily: 'Verdana',\n        fill: 0xffff00,\n        stroke: 0xef0000,\n        strokeThickness: 8,\n        fontVariant: 'small-caps',\n        fontWeight: 900\n    }\n};\n\nexport var GuiText = {\n    textConfig: {\n        fontSize: 16,\n        fontFamily: 'Verdana',\n        fill: 0xffffff,\n        stroke: 0,\n        strokeThickness: 3,\n        fontWeight: 300\n    }\n};\n\nexport var GuiToken = {\n    textConfig: {\n        fontSize: 20,\n        fontFamily: 'Verdana',\n        fill: 0xffffff,\n        letterSpacing: 4\n    }\n};","import UpdatableContainer from '../containers/UpdatableContainer';\nimport {Score} from '../Score';\nimport i18n from '../i18n';\nimport GUIText from '../lib/GUIText';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\n\nexport default class AbsScoreLayout extends UpdatableContainer {\n    /**\n     * @param {Object} options\n     * @param {number} options.score - The score\n     */\n    constructor(options) {\n        super();\n        /** @type {number} */\n        this.score = options.score;\n        this.transitionDuration = options.transitionDuration || 150;\n        this.transitionDelay = options.transitionDelay || 1000;\n\n        /** @type {number} */\n        this._lastScoreState = 0;\n        /** @type {number} */\n        this.scoreState = AbsScoreLayout.STATE_TRANSITION_IDLE;\n        /** @type {boolean} */\n        this.isDestroyed = false;\n        /** @type {number} */\n        this.rendererWidth = options.game.renderer.width;\n        /** @type {number} */\n        this.rendererHeight = options.game.renderer.height;\n    }\n\n    changeState(state) {\n        this._lastScoreState = this.scoreState;\n        this.scoreState = state;\n    }\n\n    /**\n     * Update children initial positions\n     * @protected\n     */\n    mUpdateChildrenPosition() {\n        for (let index = 0; index < this.children.length; index++) {\n            const child = this.children[index];\n            child.x = this.rendererWidth*3/4 + child.width / 2 + 1;\n            child.y = this.rendererHeight / 3;\n            child.alpha = 0;\n        }\n    }\n\n    hasWon() {\n        return this.score === Score.WON;\n    }\n\n    hasLost() {\n        return this.score === Score.LOST;\n    }\n\n    isDraw() {\n        return this.score === Score.DRAW;\n    }\n\n    spawnComparison() {\n        let comparisonLabel = i18n.t('Defeat');\n        if (this.hasWon()) {\n            comparisonLabel = i18n.t('Victory');\n        } else if (this.isDraw()) {\n            comparisonLabel = i18n.t('Draw');\n        }\n        this.addChild(new GUIText(comparisonLabel, BigText.textConfig));\n    }\n\n    getInAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth/2-sprite.width/2, sprite.y),\n            alphaFrom: 0,\n            alphaTo: 1,\n            duration: this.transitionDuration,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n\n    getOutAnimation(sprite, callback) {\n        return new TransformAnimation({\n            posFrom: new PIXI.Point(sprite.x, sprite.y),\n            posTo: new PIXI.Point(this.rendererWidth*1/6-sprite.width/2, sprite.y),\n            alphaFrom: 1,\n            alphaTo: 0,\n            duration: this.transitionDuration,\n            callback: () => {\n                sprite.setAnimation(null);\n                if (callback) callback();\n            }\n        });\n    }\n};\n\nAbsScoreLayout.STATE_TRANSITION_IDLE = 0;\nAbsScoreLayout.STATE_TRANSITION_SUIT = 1;\nAbsScoreLayout.STATE_TRANSITION_COMPARISON = 2;\nAbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING = 4;\nAbsScoreLayout.STATE_TRANSITION_TERMINATED = 8;","import PIXI from 'pixi.js';\nimport i18n from '../i18n';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\nimport AbsScoreLayout from './AbsScoreLayout';\nimport GUIText from '../lib/GUIText';\nimport {Resolver} from '../Score';\nimport {CardCombo, ComboType} from '../CardComboList';\n\nexport default class GUIScoreLayout extends AbsScoreLayout {\n\n    /**\n     * @param {Object} options\n     * @param {Game} options.game\n     * @param {CardCombo} options.playerCombo\n     * @param {CardCombo} options.iaCombo\n     */\n    constructor(options) {\n        super({\n            score: Resolver.compareCombos(options.playerCombo, options.iaCombo),\n            game: options.game\n        });\n        /** @type {CardCombo} */\n        this.playerCombo = options.playerCombo;\n        /** @type {CardCombo} */\n        this.iaCombo = options.iaCombo;\n\n        this.spawnSuitName();\n        this.spawnComparison();\n        this.mUpdateChildrenPosition();\n    }\n    \n    destroy() {\n        super.destroy();\n        this.isDestroyed = true;\n    }\n\n    spawnSuitName() {\n        let comboName = 'NoCombo';\n        if (this.playerCombo) comboName = this.playerCombo.getTypeName();\n        this.addChild(new GUIText(i18n.t('ComboType.' + comboName), BigText.textConfig));\n    }\n\n    getSuitText() {\n        return this.getChildAt(0);\n    }\n\n    getComparisonText() {\n        return this.getChildAt(1);\n    }\n\n    update(game) {\n        super.update(game);\n        switch (this.scoreState) {\n            case AbsScoreLayout.STATE_TRANSITION_IDLE:\n                this.getSuitText().setAnimation(this.getInAnimation(this.getSuitText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON);\n                    }, this.transitionDelay);\n                }));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON:\n                this.getComparisonText().setAnimation(this.getInAnimation(this.getComparisonText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING);\n                    }, this.transitionDelay);\n                }));\n                this.getSuitText().setAnimation(this.getOutAnimation(this.getSuitText()));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING:\n                this.getComparisonText().setAnimation(this.getOutAnimation(this.getComparisonText(), () => {\n                    this.changeState(AbsScoreLayout.STATE_TRANSITION_TERMINATED);\n                }));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n        }\n    }\n\n\n}\n\n\n","import PIXI from 'pixi.js';\nimport i18n from '../i18n';\nimport {BigText} from '../Config';\nimport TransformAnimation from '../lib/TransformAnimation';\nimport BezierEasing from '../lib/BezierEasing';\nimport AbsScoreLayout from './AbsScoreLayout';\nimport GUIText from '../lib/GUIText';\nimport {Resolver} from '../Score';\nimport {CardCombo, ComboType} from '../CardComboList';\n\nexport default class GUIBetScore extends AbsScoreLayout {\n\n    /**\n     * @param {Object} options\n     * @param {Game} options.game\n     * @param {CardCombo} options.playerCombo\n     * @param {CardCombo} options.iaCombo\n     */\n    constructor(options) {\n        super(options);\n        this.spawnComparison();\n        this.mUpdateChildrenPosition();\n    }\n    \n    destroy() {\n        super.destroy();\n        this.isDestroyed = true;\n    }\n\n    getComparisonText() {\n        return this.getChildAt(0);\n    }\n\n    update(game) {\n        super.update(game);\n        switch (this.scoreState) {\n            case AbsScoreLayout.STATE_TRANSITION_IDLE:\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON:\n                this.getComparisonText().setAnimation(this.getInAnimation(this.getComparisonText(), () => {\n                    setTimeout(() => {\n                        if (!this.isDestroyed) this.changeState(AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING);\n                    }, this.transitionDelay);\n                }));\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                break;\n            case AbsScoreLayout.STATE_TRANSITION_COMPARISON_ENDING:\n                this.changeState(AbsScoreLayout.STATE_TRANSITION_SUIT);\n                this.getComparisonText().setAnimation(this.getOutAnimation(this.getComparisonText(), () => {\n                    this.changeState(AbsScoreLayout.STATE_TRANSITION_TERMINATED);\n                }));\n                break;\n        }\n    }\n\n\n}\n\n\n","import PIXI from 'pixi.js';\n\nexport default class ContextualBox extends PIXI.Graphics {\n\n    constructor() {\n        super();\n        this._isValid = false;\n    }\n\n    clear() {\n        this.removeChildren();\n    }\n\n    update(game) {\n        if (!this._isValid) {\n            this.drawBox(game);\n            this._isValid=true;\n        }\n    }\n\n    drawBox(game) {}\n\n    invalidate(){\n        this._isValid=false;\n    }\n\n    _drawBox(graphics, rect) {\n        graphics.moveTo(rect.left, rect.top)\n            .lineStyle(1, 0, 1)\n            .beginFill(0x675C53, 1)\n            .lineTo(rect.right, rect.top)\n            .lineTo(rect.right, rect.bottom)\n            .lineTo(rect.left, rect.bottom)\n            .lineTo(rect.left, rect.top)\n            .endFill();\n    }\n}","export default class Rect {\n    constructor(top, right, bottom, left) {\n        this.set(top || 0, right || 0, bottom || 0, left || 0);\n    }\n    \n    set(top, right, bottom, left) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n\n    scale(x, y) {\n        return new Rect(this.top*y,this.right*x,this.bottom*y,this.left*x);\n    }\n}","import ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport LinearLayout from '../LinearLayout';\nimport {CardCombo} from '../../CardComboList';\nimport i18n from '../../i18n';\n\nexport default class ContextualDisplayer extends ContextualBox {\n\n    constructor() {\n        super();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        const rect = new Rect(0, this.parent.getWidth() * 4/5 - 10, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayControls() {\n        this.removeChildren();\n        const col1 = new LinearLayout({ childMargin: 15 });\n        const col2 = new LinearLayout({ childMargin: 15 });\n        const rows = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: 12,\n            x: 30\n        });\n\n        const textStyle = {\n            fontSize: 16,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 3\n        };\n\n        col1.addChild(new PIXI.Text('\\u25C0 \\u25B6 ' + i18n.t('Controls.MoveCursor'), textStyle));\n        col1.addChild(new PIXI.Text('\\u2B06 / \\u2B07 ' + i18n.t('Controls.SelectCard'), textStyle));\n        col1.updateChildrenPosition();\n\n        col2.addChild(new PIXI.Text('Shift + \\u2B06 / \\u2B07 ' + i18n.t('Controls.SelectCards'), textStyle));\n        col2.addChild(new PIXI.Text('Entrée ' + i18n.t('Controls.CommitChanges'), textStyle));\n        col1.updateChildrenPosition();\n        col2.updateChildrenPosition();\n        \n        rows.addChild(col1);\n        rows.addChild(col2);\n        rows.updateChildrenPosition();\n\n\n        const label = new PIXI.Text(i18n.t('Controls.ControlsLabel'), textStyle);\n        label.x = 30;\n        label.y = 10;\n        this.addChild(label);\n        rows.y = label.y + label.height + 15;\n        this.addChild(rows);\n    }\n\n    /**\n     * @param {CardCombo}\n     */\n    displayCombo(combo) {\n        this.removeChildren();\n        const row = new LinearLayout();\n        row.x = 30;\n\n        const textStyle = {\n            fill: 0xffa172,\n            stroke: 0,\n            strokeThickness: 3,\n            fontSize: 18\n        };\n\n        let comboName = 'NoCombo';\n        if (combo) comboName = combo.getTypeName();\n        row.addChild(new PIXI.Text(`\"${i18n.t('ComboType.' + comboName)}\"`, textStyle));\n\n        row.updateChildrenPosition();\n        row.y = row.height / 2;\n        this.addChild(row);\n    }\n\n    displayChooseBet() {\n        this.removeChildren();\n        const texts = new LinearLayout({\n            orientation: LinearLayout.ORIENTATION_HORIZONTAL\n        });\n        texts.x = 30;\n\n        const textStyleWhite = {\n            fontSize: 18,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 4\n        };\n        const textStyleOrange = {\n            fontSize: 18,\n            fill: 0xff9763,\n            stroke: 0,\n            strokeThickness: 4\n        };\n\n        // TODO: Abstractize this part\n        const text = i18n.t('Bet.ChooseBet');\n        let bold = false;\n        let beginIndex = 0;\n        for (let index = 0; index < text.length; index++) {\n            const isLastItem = index + 1 >= text.length;\n            if ((!bold && text.charAt(index) === '*') || isLastItem) {\n                texts.addChild(new PIXI.Text(text.slice(beginIndex, isLastItem ? index + 1 : index).trim(), textStyleWhite));\n                beginIndex = index+1;\n                bold = true;\n                index++;\n            } else if ((bold && text.charAt(index) === '*') || isLastItem) {\n                texts.addChild(new PIXI.Text(text.slice(beginIndex, isLastItem ? index + 1 : index).trim(), textStyleOrange));\n                beginIndex = index+1;\n                bold = false;\n                index++;\n            }\n        }\n\n        texts.updateChildrenPosition();\n        texts.y = texts.height / 2;\n        this.addChild(texts);\n    }\n\n    displayUpOrDownChoice() {\n        this.removeChildren();\n        const textStyleWhite = {\n            fontSize: 18,\n            fill: 0xffffff,\n            stroke: 0,\n            strokeThickness: 4\n        };\n        this.addChild(new PIXI.Text(i18n.t('Bet.UpOrDown'), textStyleWhite));\n    }\n\n}","import PIXI from 'pixi.js';\n\nexport default class GUICursor extends PIXI.Graphics {\n    \n    constructor() {\n        super();\n        const WIDTH = 15;\n        const HEIGHT = WIDTH;\n        this.clear()\n            .lineStyle(2, 0, 1)\n            .moveTo(0, 0)\n            .beginFill(0xffffff, 1)\n            .lineTo(WIDTH, HEIGHT/2)\n            .lineTo(0, HEIGHT)\n            .lineTo(0,0)\n            .endFill();\n        this.pivot.set(WIDTH, -HEIGHT/2);\n    }\n\n    update(game) {\n        this.x += Math.cos(game._frame / 10) / 6;\n    }\n\n}","import ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport GUICursor from './GUICursor';\nimport LinearLayout from '../LinearLayout';\nimport Keyboard from '../../lib/Keyboard';\n\nconst MENU_ITEM_FONT_SIZE = {\n    2: 22\n};\n\nexport default class ContextualMenu extends ContextualBox {\n\n    constructor() {\n        super();\n        /** @type {GUICursor} */\n        this.currentCursor = null;\n        this.currentCursorIndex = 0;\n    }\n\n    removeChildren() {\n        this.currentCursorIndex = 0;\n        if (this.currentCursor) this.currentCursor = null;\n        super.removeChildren();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth()*4/5;\n        const rect = new Rect(0, this.parent.getWidth()*1/5, this.parent.getHeight(), 0);\n        this._drawBox(graphics, rect);\n    }\n\n    displayMenu(menuItems) {\n        this.removeChildren();\n        const layout = new LinearLayout();\n        for (let index = 0; index < menuItems.length; index++) {\n            const menuDesc = menuItems[index];\n            const menuitem = new PIXI.Text(menuDesc.label, {\n                fontSize: MENU_ITEM_FONT_SIZE[menuItems.length],\n                fill: 0xffffff,\n                stroke: 0,\n                strokeThickness: 3\n            });\n            menuitem.menuItemIndex = index;\n            menuitem.menuItemCallback = menuDesc.callback;\n            layout.addChild(menuitem);\n        }\n        \n        layout.updateChildrenPosition();\n        layout.x = this.width / 2- layout.width / 2;\n        layout.y = layout.height / 2;\n        this.addChild(layout);\n        this.currentCursor = new GUICursor();\n        this.addChild(this.currentCursor);\n        this.setCursorIndex(0);\n    }\n\n    setCursorIndex(index) {\n        const menuItems = this.getChildAt(0).children;\n        if (index < 0) index = menuItems.length - 1;\n        if (index >= menuItems.length) index = 0;\n        const position = this.getChildAt(0).getChildPositionAt(index);\n        this.currentCursor.y = position.y;\n        if (this.currentCursor.x == 0) this.currentCursor.x = position.x - 15;\n        this.currentCursorIndex = index;\n    }\n    \n    hasCursor() {\n        return this.currentCursor !== null;\n    }\n\n    update(game) {\n        super.update(game);\n        if (this.hasCursor()) {\n            this.currentCursor.update(game);\n            if (Keyboard.isKeyReleased(Keyboard.UP_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex - 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.DOWN_ARROW)) {\n                this.setCursorIndex(this.currentCursorIndex + 1);\n            } else if (Keyboard.isKeyReleased(Keyboard.ENTER)) {\n                let item = this.getChildAt(0).getChildAt(this.currentCursorIndex);\n                if (item && item.menuItemCallback) item.menuItemCallback();\n            }\n        }\n    }\n\n}","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport ContextualDisplayer from './contextual-menu/ContextualDisplayer';\nimport ContextualMenu from './contextual-menu/ContextualMenu';\nimport Game from '../Game';\nimport i18n from '../i18n';\n\nconst MARGIN_HONRIZONTAL = 10;\nconst MARGIN_VERTICAL = 15;\n\nexport default class GUIContext extends UpdatableContainer {\n\n    constructor(x, y, game) {\n        super();\n        /** @type {Game} */\n        this.game = game;\n        this.x = x + MARGIN_HONRIZONTAL;\n        this.y = y - MARGIN_VERTICAL;\n        this.addChild(new ContextualDisplayer());\n        this.addChild(new ContextualMenu());\n    }\n\n    destroy() {\n        this.game = null;\n        super.destroy();\n    }\n\n    update(game) {\n        this._width = game.renderer.width - MARGIN_HONRIZONTAL * 2;\n        this._height = game.renderer.height - this.y - MARGIN_VERTICAL; \n        super.update(game);\n    }\n\n    getWidth() {\n        return this._width;\n    }\n\n    getHeight() {\n        return this._height;\n    }\n\n    displayControls() {\n        this.getChildAt(0).displayControls();\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayCombo(combo) {\n        this.getChildAt(0).displayCombo(combo);\n        this.getChildAt(1).removeChildren();\n    }\n\n    displayChooseBet() {\n        this.getChildAt(0).displayChooseBet();\n        this.getChildAt(1).displayMenu([\n            {\n                label: i18n.t('Yes'),\n                callback: () => this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_UP_OR_DOWN)\n            },\n            {\n                label: i18n.t('No'),\n                callback: () => {\n                    this.game.tokenCount += this.game.betCount;\n                    this.game.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS)\n                }\n            }\n        ]);\n    }\n\n    displayUpOrDownChoice(callback) {\n        this.getChildAt(0).displayUpOrDownChoice();\n        this.getChildAt(1).displayMenu([\n            {\n                label: i18n.t('Bet.Up'),\n                callback: () => callback('up')\n            },\n            {\n                label: i18n.t('Bet.Down'),\n                callback: () => callback('down')\n            }\n        ]);\n    }\n\n}","import PIXI from 'pixi.js';\nimport i18n from '../../i18n';\nimport {ComboType} from '../../CardComboList';\nimport {GuiText} from '../../Config';\n\nexport default class GUIComboTypeItem extends PIXI.Container {\n    constructor(options) {\n        super();\n        this.comboType = options.comboType;\n        this.parentWidth = options.parentWidth;\n        this.redraw();\n    }\n\n    redraw() {\n        this.removeChildren();\n        const comboName = ComboType.forName(this.comboType);\n        const localeComboName = i18n.t(`ComboType.${comboName}`);\n        this.addChild(new PIXI.Text(localeComboName, GuiText.textConfig));\n        const factorText = new PIXI.Text(`\\u00D7 ${this.comboType}`, GuiText.textConfig);\n\n        factorText.x = this.parentWidth - 50;\n        this.addChild(factorText);\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport LinearLayout from '../LinearLayout';\nimport {ComboType} from '../../CardComboList';\nimport i18n from '../../i18n';\nimport Numbers from '../../Numbers';\nimport GUIComboTypeItem from './GUIComboTypeItem';\n\nexport default class GUIComboTypesList extends ContextualBox {\n    constructor(options) {\n        super();\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        const rect = new Rect(0, this.parent.getWidth() * 4/5 - 10, this.parent.getHeight()/4, 0);\n        this._drawBox(graphics, rect);\n        this.drawLists();\n    }\n\n    drawLists() {\n        const MARGIN_HOR = 20;\n        const width = this.width - MARGIN_HOR * 2;\n        const linearLayoutWidth = width / 2 - MARGIN_HOR;\n\n        const col1 = new LinearLayout({\n            childMargin: 4,\n            x: MARGIN_HOR * 1.5 + 5,\n            y: 12\n        });\n\n        const col2 = new LinearLayout({\n            childMargin: 4,\n            x: width/2 + col1.x,\n            y: 12\n        });\n\n        this.removeChildren();\n        this.addChild(col1);\n        this.addChild(col2);\n\n        const values = Object.keys(ComboType).map((d) => ComboType[d]).sort(Numbers.Compare.desc);\n        [\n            values.slice(0, Math.floor(values.length/2)),\n            values.slice(Math.floor(values.length/2), values.length)\n        ].forEach(function (values, i) {\n            const layout = this.getChildAt(i);\n            values.forEach(function (value) {\n                layout.addChild(new GUIComboTypeItem({\n                    comboType: value,\n                    parentWidth: linearLayoutWidth\n                }));\n            }, this);\n            layout.updateChildrenPosition();\n        }, this);\n\n\n\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport i18n from '../../i18n';\nimport {GuiText,GuiToken} from '../../Config';\n\nexport default class GUIBetBox extends ContextualBox {\n\n    constructor() {\n        super();\n        this.addChild(new PIXI.Text(i18n.t('Bet.Bet'), GuiText.textConfig));\n        this.addChild(this.betText = new PIXI.Text('0', GuiToken.textConfig))\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth() * 4 / 5;\n        this.y = this.parent.getHeight()/8+5;\n        const rect = new Rect(\n            0,\n            this.parent.getWidth() - 10 - this.x,\n            this.parent.getHeight()/4 - this.y,\n            0\n        );\n        this._drawBox(graphics, rect);\n        this.getChildAt(0).position.set(10, 10);\n    }\n\n    update(game) {\n        super.update(game);\n        this.betText.text = game.betCount;\n        this.betText.position.set( this.width - this.betText.width - 10, this.height - this.betText.height - 10 );\n    }\n};\n","import PIXI from 'pixi.js';\nimport ContextualBox from '../ContextualBox';\nimport Rect from '../../lib/Rect';\nimport i18n from '../../i18n';\nimport {GuiText,GuiToken} from '../../Config';\n\nexport default class GUITokenCount extends ContextualBox {\n\n    constructor() {\n        super();\n        this.addChild(new PIXI.Text(i18n.t('TotalToken'), GuiText.textConfig));\n        this.addChild(this.totalTokenText = new PIXI.Text('0', GuiToken.textConfig));\n    }\n\n    drawBox(game) {\n        /** @type {PIXI.Graphics} */\n        const graphics = this;\n        this.x = this.parent.getWidth() * 4 / 5;\n        const rect = new Rect(\n            0,\n            this.parent.getWidth() - 10 - this.x,\n            this.parent.getHeight()/8 - 5,\n            0);\n        this._drawBox(graphics, rect);\n        this.getChildAt(0).position.set(10, 10);\n    }\n\n    update(game) {\n        super.update(game);\n        this.totalTokenText.text = game.tokenCount;\n        this.totalTokenText.position.set( this.width - this.totalTokenText.width - 10, this.height - this.totalTokenText.height - 10 );\n    }\n};\n","import PIXI from 'pixi.js';\nimport UpdatableContainer from '../containers/UpdatableContainer';\nimport GUIComboTypesList from './top-menu/GUIComboTypesList';\nimport GUIBetBox from './top-menu/GUIBetBox';\nimport GUITokenCount from './top-menu/GUITokenCount';\nconst MARGIN_HONRIZONTAL = 10;\nconst MARGIN_VERTICAL = 15;\n\nexport default class TopMenuLayout extends UpdatableContainer {\n    constructor(x, y, game) {\n        super();\n        this.game = game;\n        this.x = x + MARGIN_HONRIZONTAL;\n        this.y = y + MARGIN_VERTICAL;\n        this.addChild(new GUIComboTypesList());\n        this.addChild(new GUIBetBox());\n        this.addChild(new GUITokenCount());\n    }\n\n    destroy() {\n        this.game = null;\n        super.destroy();\n    }\n\n    update(game) {\n        this._width = game.renderer.width - MARGIN_HONRIZONTAL * 2;\n        this._height = game.renderer.height - this.y - MARGIN_VERTICAL;\n        super.update(game);\n    }\n\n    getWidth() { return this._width; }\n    getHeight() { return this._height; }\n};\n","import PIXI from 'pixi.js';\nimport LinearLayout from '../gui/LinearLayout';\nimport CardsGenerator from '../CardsGenerator';\nimport CardCollection from '../CardCollection';\nimport Card from '../Card';\n\nexport default class AbsCardArea extends LinearLayout {\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} cardSlots\n     */\n    constructor(x, y, cardSlots) {\n        super({ \n            orientation: LinearLayout.ORIENTATION_HORIZONTAL,\n            childMargin: CardsGenerator.CARD_WIDTH / 10\n        });\n        this.x = x;\n        this.y = y;\n        /** @type {number} */\n        this.cardSlots = cardSlots;\n        /** @type {Card[]} */\n        this.slots = new Array(this.cardSlots);\n        this.updateLayoutPivot();\n    }\n\n    /** @inheritdoc */\n    destroyChildren() {\n        this.slots = new Array(this.cardSlots);\n        return super.destroyChildren();\n    }\n\n    clearCards() {\n        this.slots.forEach((card) => {\n            this.removeCard(card);\n        });\n        this.slots = new Array(this.cardSlots);\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    removeCardAt(index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        const card = this.slots[index];\n        if (card) {\n            this.removeChild(card);\n            this.slots[index] = null;\n        }\n        return card;\n    }\n\n    /**\n     * @param {Card} card\n     * @returns {Card}\n     */\n    removeCard(card) {\n        return this.removeCardAt(this.slots.indexOf(card));\n    }\n\n    /**\n     * @returns {CardCollection}\n     */\n    getCards() {\n        return new CardCollection(this.slots.slice(0))\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Card}\n     */\n    getCardAt(index) {\n        return this.slots[index];\n    }\n\n    /**\n     * @param {number} index\n     * @returns {PIXI.Point}\n     */\n    getCardPositionAt(index) {\n        return this.getChildPosition(this.getCardAt(index));\n    }\n\n    /**\n     * Find the first empty card slot index\n     * @returns {number}\n     */\n    findFirstEmptySlot() {\n        for (let index = 0; index < this.cardSlots; index++) {\n            if (!this.slots[index]) return index;\n        }\n        return -1;\n    }\n\n    /**\n     * Add a child to the first empty card slot\n     * @param {Card} card\n     */\n    addCard(card) {\n        return this.addCardAt(card, this.findFirstEmptySlot());\n    }\n\n    /**\n     * Add a child to a slot\n     * @param {Card} card\n     * @param {number} index\n     */\n    addCardAt(card, index) {\n        if (index < 0 || index >= this.cardSlots) \n            throw new Error(`OutOfBoundException: AbsCardArea(slots: ${this.cardSlots}), index was ${index}`);\n        if (this.slots[index]) {\n            this.removeChild(this.slots[index]);\n        }\n        this.slots[index] = card;\n        this.updateChildrenPosition();\n        return super.addChild(card);\n    }\n\n    /**\n     * Update all children position\n     */\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.cardSlots; index++) {\n            const card = this.getCardAt(index);\n            if (card) card[this._posPropertyName] = pos;\n            pos += CardsGenerator.CARD_WIDTH + this.childMargin;\n        }\n    }\n\n    updateLayoutPivot() {\n        const width = this.cardSlots * CardsGenerator.CARD_WIDTH + (this.cardSlots-1) * this.childMargin;\n        this.pivot.set(width / 2, 0);\n    }\n\n    update(game) {}\n\n}","import PIXI from 'pixi.js';\nimport AbsCardArea from './AbsCardArea';\nimport CardsGenerator from '../CardsGenerator';\n\nexport default class CardRiverArea extends AbsCardArea {\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     */\n    constructor(x, y) {\n        super(x, y, 5);\n        this.childMargin = 40;\n        this.updateLayoutPivot();\n        this.keepTexts = [];\n        this.selectedCardsToBeChanged = [];\n        this._generateKeepTexts();\n    }\n\n    /**\n     * @private\n     */\n    _generateKeepTexts() {\n        for (let index = 0, text; index < this.cardSlots; index++) {\n            text = new PIXI.Text('GARDER', { fill: 0x000000, fontSize: 16 });\n            this.keepTexts.push(text);\n            this.addChild(text);\n        }\n    }\n\n    clearCards() {\n        this.displayKeepTexts();\n        super.clearCards();\n    }\n\n    displayKeepTexts() {\n        this.keepTexts.forEach((text) => text.visible = true);\n    }\n\n    hideKeepTexts() {\n        this.keepTexts.forEach((text) => text.visible = false);\n    }\n\n    updateChildrenPosition() {\n        let pos = 0;\n        for (let index = 0; index < this.cardSlots; index++) {\n            const card = this.getCardAt(index);\n            if (card) {\n                card.x = pos;\n                let keepText = this.keepTexts[index];\n                if (keepText) {\n                    keepText.position.set(pos + CardsGenerator.CARD_WIDTH/2 - keepText.width/2, card.y - keepText.height - 10);\n                }\n            }\n\n            pos += CardsGenerator.CARD_WIDTH + this.childMargin;\n        }\n    }\n\n    /**\n     * @param {number} index\n     * @param {boolean} swt\n     */\n    setSelectedCardIndex(index, swt) {\n        const card = this.getCardAt(index);\n        const indexOfCard = this.selectedCardsToBeChanged.indexOf(card);\n        const isSelected = indexOfCard > -1;\n        if (isSelected && swt || !isSelected && !swt) return;\n        if (swt) {\n            this.selectedCardsToBeChanged.push(card);\n            this.keepTexts[index].visible = false;\n        } else {\n            this.selectedCardsToBeChanged.splice(indexOfCard, 1);\n            this.keepTexts[index].visible = true;\n        }\n        card.y += swt ? -20 : 20;\n    }\n\n}","import AbsCardArea from './AbsCardArea';\n\nexport default class CardBetArea extends AbsCardArea {\n\n    constructor(x, y) {\n        super(x, y, 2);\n    }\n\n}","import Keyboard from './lib/Keyboard';\nimport Tracker from './Tracker';\nimport i18n from './i18n';\nimport Numbers from './Numbers';\n\nimport UpdatableContainer from './containers/UpdatableContainer';\nimport LinearLayout from './gui/LinearLayout';\n\nimport CardCollection from './CardCollection';\nimport CardsGenerator from './CardsGenerator';\nimport {CardComboList,CardCombo,ComboType} from './CardComboList';\nimport {Resolver,Score} from './Score';\n\nimport GUICardSelector from './gui/GUICardSelector';\nimport AbsScoreLayout from './gui/AbsScoreLayout';\nimport GUIScoreLayout from './gui/GUIScoreLayout';\nimport GUIBetScore from './gui/GUIBetScore';\nimport GUIContext from './gui/GUIContext';\nimport TopMenuLayout from './gui/TopMenuLayout';\n\nimport AbsCardArea from './containers/AbsCardArea';\nimport CardRiverArea from './containers/CardRiverArea';\nimport CardBetArea from './containers/CardBetArea';\n\nconst ticker = PIXI.ticker.shared;//new PIXI.ticker.Ticker();\n\nexport default class Game {\n\n    constructor(options) {\n        this._frame = 0;\n        /** @type {CardCollection} */\n        this.cards = null;\n        /** @type {AbsCardArea} */\n        this.river = null;\n\n        i18n.setup(options.langs);\n\n        this.tokenCount = 10000;\n        this.originalBetCount = 100;\n        this.betCount = 0;\n\n        this.gameState = Game.GAME_IDLE;\n        this.playingGameState = Game.STATE_PLAYING_CHOOSE_BET;\n\n        this.cardsGenerator = new CardsGenerator(options.cardTextures);\n\n        this.fg = new UpdatableContainer();\n        this.gui = new UpdatableContainer();\n        this.renderingContainer = new PIXI.Container();\n        this.renderingContainer.addChild(this.fg);\n        this.renderingContainer.addChild(this.gui);\n        // create renderer\n        const rendererOptions = {\n            transparent: options.transparent || false,\n            autoResize: options.autoResize || false,\n            antialias: options.antialias || false,\n            resolution: options.resolution || 1,\n            clearBeforeRender: true,\n            backgroundColor: options.backgroundColor,\n            roundPixels: options.roundPixels || true\n        };\n        this.renderer = PIXI.autoDetectRenderer(options.width || 800, options.height || 600, rendererOptions, false);\n        /** @type {HTMLElement} */\n        this.container = null;\n        if (options.container) {\n            this.container = options.container;\n            this.container.appendChild(this.renderer.view);\n        }\n        this.setSize(this.renderer.width, this.renderer.height);\n    }\n\n    setLanguage(lang) {\n        i18n.setLang(lang);\n    }\n\n    destroy() {\n        this.clearGame();\n        this.fg.destroy();\n        this.gui.destroy();\n        this.renderer.destroy();\n        this.fg = null;\n        this.gui = null;\n        this.renderer = null;\n    }\n\n    clearGame() {\n        this.stop();\n        if (this.cards) this.cards.destroy();\n        this.cards = null;\n        this.player = null;\n        this.fg.destroyChildren();\n        this.gui.destroyChildren();\n    }\n\n    newGame() {\n        this.gameState = Game.STATE_IDLE;\n\n        const stageWidth = this.renderer.width;\n        const stageHeight = this.renderer.height;\n        this.river = new CardRiverArea(stageWidth/2, stageHeight/4*2);\n        this.betRiver = new CardBetArea(stageWidth/2, stageHeight/4*2);\n        this.river.visible = false;\n        this.betRiver.visible = false;\n        this.fg.addChild(this.river);\n        this.fg.addChild(this.betRiver);\n        const contextualBox = new GUIContext(0, stageHeight * 5/6, this);\n        const topMenu = new TopMenuLayout(0, 0, this);\n\n        this.fg.addChild(contextualBox);\n        this.fg.addChild(topMenu);\n        contextualBox.update(this);\n        topMenu.update(this);\n        this.clearBoard();\n\n    }\n\n    clearBoard() {\n        this.river.clearCards();\n        if (this.cards) this.cards.destroy();\n        this.cards = this.cardsGenerator.generateCards();\n        let iteration = Numbers.clamp(Math.floor(Math.random() * 14), 2, 14);\n        for (let index = 0; index < iteration; index++) {\n            this.cards.shuffle();\n        }\n        console.log('shuffle %s times', iteration);\n    }\n\n    /**\n     * @param {number} count\n     * @param {AbsCardArea} cardArea\n     */\n    distribute(count, cardArea = this.river) {\n        \n        // const forcedCards = 0;\n        // [ 3, 2, 1, 0, CardsGenerator.JOKER_VALUE ].forEach(function (value) {\n        //     const card = this.cards.getByValue(value);\n        //     this.river.addChild(card);\n        //     this.cards.remove(card);\n        // }, this);\n        // for (let i = 0; i < forcedCards; i++) {\n        //     let card = this.cards.getByValue(2);\n        //     if (i > 3) card = this.cards.getByValue(4);\n        //     this.river.addChild(card)\n        //     this.cards.remove(card);\n        // }\n        // for (let i = 0; i < forcedCards; i++) {\n        //     let card = this.cards.getByValue(i + 1);\n        //     this.river.addChild(card)\n        //     this.cards.remove(card);\n        // }\n\n        for (let index = 0; index < count; index++) {\n            let card = this.cards.peek();\n            cardArea.addCard(card);\n            this.cards.remove(card);\n        }\n    }\n\n    displayCardCursorSelection() {\n        const p = this.river.getCardAt(0);\n        const cursor = new GUICardSelector(p.x + CardsGenerator.CARD_WIDTH / 2, p.y + CardsGenerator.CARD_HEIGHT + 25)\n        cursor.setCursorCardIndex(this, 0);\n        this.gui.addChild(cursor);\n    }\n\n    setState(state) {\n        this.gameState = state;\n    }\n\n    setPlayingState(state) {\n        if (state === this.playingGameState) return;\n        this.playingGameState = state;\n        switch (state) {\n            case Game.STATE_PLAYING_CHOOSE_CARDS:\n                this.river.visible = true;\n                this.betRiver.visible = false;\n                this.betCount = this.originalBetCount;\n                this.tokenCount -= this.originalBetCount;\n                Tracker.track('game:new');\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayControls();\n                this.clearBoard();\n                this.distribute(5);\n                this.displayCardCursorSelection();\n                break;\n            case Game.STATE_PLAYING_DISPLAY_RIVER_SCORE:\n                this.river.hideKeepTexts();\n                this.commitChanges();\n                const combo = this.getCardComboList().getHigherCombo() || null;\n                const iaCombo = new CardCombo({ type: ComboType.Pair });\n\n                const score = Resolver.compareCombos(combo, iaCombo);\n                if (combo) {\n                    combo.getCards().forEach(function (d) {\n                        d.highlight();\n                    });\n                    Tracker.track('combo', {\n                        type: combo.getTypeName(),\n                        cards: combo.getCards().map(String)\n                    });\n                    if (Score.WON === score) {\n                        this.betCount = this.originalBetCount * combo.type;\n                    }\n                }\n                this.fg.findChildrenByType(GUIContext).displayCombo(combo);\n                this.gui.addChild(new GUIScoreLayout({\n                    playerCombo: combo,\n                    iaCombo: iaCombo,\n                    game: this\n                }));\n                \n                break;\n            case Game.STATE_PLAYING_CHOOSE_RISK:\n                this.gui.destroyChildren();\n                this.fg.findChildrenByType(GUIContext).displayChooseBet();\n                break;\n            case Game.STATE_PLAYING_CHOOSE_UP_OR_DOWN:\n                this.river.visible = false;\n                this.betRiver.visible = true;\n                this.betRiver.destroyChildren();\n                this.distribute(1, this.betRiver);\n                this.fg.findChildrenByType(GUIContext).displayUpOrDownChoice(this._onBetChoiceDone.bind(this));\n                break;\n\n        }\n    }\n\n    _onBetChoiceDone(choice) {\n        this.distribute(1, this.betRiver);\n        const firstCard = this.betRiver.getCardAt(0);\n        const lastCard = this.betRiver.getCardAt(1);\n\n        if ((choice == 'up' && firstCard.value < lastCard.value) || (choice == 'down' && firstCard.value > lastCard.value)) {\n            this.betCount *= 2;\n            this.displayBetScore(Score.WON);\n        } else {\n            this.displayBetScore(Score.LOST);\n        }\n        this.setPlayingState(Game.STATE_PLAYING_DISPLAY_BET_SCORE);\n    }\n\n    displayBetScore(score) {\n        this.gui.addChild(new GUIBetScore({\n            game: this,\n            score: score\n        }));\n    }\n\n    getFPS() {\n        return ticker.FPS;\n    }\n\n    isRunning() {\n        return ticker.started;\n    }\n\n    isPlaying() {\n        return this.gameState === Game.GAME_PLAYING;\n    }\n\n    getSize() {\n        return { width: this.renderer.width, height: this.renderer.height };\n    }\n\n    setSize(w, h) {\n        if (this.renderer.width !== w || this.renderer.height !== h) {\n            this.renderer.resize(w, h);\n        }\n    }\n\n    start() {\n        if (!this.isRunning()) {\n            if (this.gameState === Game.GAME_IDLE) {\n                this.setState(Game.STATE_PLAYING);\n            }\n            ticker.add(this.loop, this);\n            ticker.start();\n        }\n    }\n\n    stop() {\n        if (this.isRunning()) {\n            ticker.stop();\n            ticker.remove(this.loop, this);\n        }\n    }\n\n    loop(time) {\n        this._frame += 1;\n\n        this.fg.update(this);\n        this.gui.update(this);\n        if (this.gameState === Game.STATE_PLAYING) {\n            if (this.playingGameState === Game.STATE_PLAYING_CHOOSE_CARDS) {\n                if (Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    this.setPlayingState(Game.STATE_PLAYING_DISPLAY_RIVER_SCORE);\n                }\n            } else if (this.playingGameState === Game.STATE_PLAYING_DISPLAY_BET_SCORE) {\n\n                let scoreLayout = this.gui.findChildrenByType(GUIBetScore);\n                if (scoreLayout.scoreState === AbsScoreLayout.STATE_TRANSITION_TERMINATED || Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    if (scoreLayout.hasWon()) {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_RISK);\n                    } else {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n                    }\n                }\n\n            } else if (this.playingGameState === Game.STATE_PLAYING_DISPLAY_RIVER_SCORE) {\n                let scoreLayout = this.gui.findChildrenByType(GUIScoreLayout);\n                if (scoreLayout.scoreState === AbsScoreLayout.STATE_TRANSITION_TERMINATED || Keyboard.isKeyPushed(Keyboard.ENTER)) {\n                    if (!scoreLayout.playerCombo || scoreLayout.playerCombo.type < 2) {\n                        if (scoreLayout.playerCombo) {\n                            this.tokenCount += this.betCount;\n                        }\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n                    } else {\n                        this.setPlayingState(Game.STATE_PLAYING_CHOOSE_RISK);\n                    }\n                }\n            }\n        }\n\n        if (this.gameState === Game.STATE_IDLE) {\n            this.gameState = Game.STATE_PLAYING;\n            this.setPlayingState(Game.STATE_PLAYING_CHOOSE_CARDS);\n        }\n\n        this.renderer.render(this.renderingContainer);\n        Keyboard.update();\n    }\n\n    getCardComboList() {\n        return new CardComboList(this.river.getCards());\n    }\n\n    commitChanges() {\n        const cards = this.river.selectedCardsToBeChanged.splice(0, this.river.selectedCardsToBeChanged.length);\n        const cardsLen = cards.length;\n        for (let index = 0; index < cardsLen; index++) {\n            this.river.removeCard(cards[index]);\n            cards[index].destroy(); \n        }\n        this.distribute(cardsLen);\n    }\n\n\n    /**\n     * \n     * @param {Function} GuiClass - The GuiClass to instantiate\n     * @param {boolean=} swt - true will create an instance if it doesnt exists, false will destroy it\n     */\n    toggleGuiElementPresence(GuiClass, swt) {\n        let instance = this.gui.children.find((d) => d instanceof GuiClass);\n        if (typeof swt === 'undefined') swt = !instance;\n        if (!instance && swt) {\n            instance = new GuiClass();\n            this.gui.addChild(instance);\n        } else if (instance && !swt) {\n            instance.destroy();\n        }\n    }\n\n};\n\nGame.STATE_IDLE = 0;\nGame.STATE_INTRO = 1;\nGame.STATE_PLAYING = 2;\nGame.STATE_GAMEOVER = 4;\n\nGame.STATE_PLAYING_CHOOSE_BET = 1;\nGame.STATE_PLAYING_CHOOSE_CARDS = 2;\nGame.STATE_PLAYING_EXCHANGE_CARD_TRANSITION = 3;\nGame.STATE_PLAYING_DISPLAY_RIVER_SCORE = 4;\nGame.STATE_PLAYING_CHOOSE_RISK = 5;\nGame.STATE_PLAYING_CHOOSE_UP_OR_DOWN = 6;\nGame.STATE_PLAYING_DISPLAY_BET_SCORE = 7;\nGame.STATE_PLAYING_UP_OR_DOWN_SCORE = 8;\n\n","import Game from './Game';\nimport Card from './Card';\nimport Tracker from './Tracker';\nimport {version} from '../package.json';\n\nGame.VERSION = version;\nGame.BUILD_TIME = '{BUILD_TIME}';\n\nTracker.track('pageview');\n\nexport default {\n    Game\n};"],"names":["keyboardState","Map","lastKeyboardState","Keyboard","keyCode","get","isKeyUp","isKeyDown","window","addEventListener","event","set","isMe","localStorage","getItem","stopTracking","test","location","toString","mixpanel","console","log","identify","eventName","properties","callback","track","CardsGenerator","cardsTexture","Error","value","suit","RED_JOKER","BLACK_JOKER","VALUE_LABELS","toLowerCase","SUITS","output","suitIndex","length","valueIndex","assetName","toAssetName","texture","push","Card","CARD_WIDTH","CARD_HEIGHT","JOKER_VALUE","CardCollection","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","options","isHighlighted","highlightGraphics","PIXI","Graphics","visible","cardPicture","Sprite","width","height","addChild","shadowSteps","clear","alpha","lineStyle","drawRoundedRect","isJoker","getValue","getSuit","Container","arrayOfCard","isArray","cards","slice","forEach","d","destroy","card","index","indexOf","splice","find","c","input","toArray","floor","random","_identity","array","predicate","ids","id","a","b","min","max","ComboType","Object","defineProperty","forName","type","keys","key","CardComboList","cardsCollection","originalCollection","combos","_parse","objects","add","object","cardCombo","CardCombo","sort","addAll","_getXOfAKind","twoPairsCombo","_getTwoPairs","straightCombo","_getStraight","flushCombo","_getFlush","fullHouseCombo","_getFullHouse","straightFlushCombo","_getStraightFlush","Numbers","Compare","desc","getScore","pairs","combo","Pair","_isAllCardDifferents","TwoPair","concat","map","comboTypeMapper","ThreeOfAKind","FourOfAKind","FiveOfAKind","cardIndex","localeCards","Arrays","uniq","getId","pair","threeOfAKind","FullHouse","getCards","values","asc","jokers","filter","match","Straight","firstSuit","Flush","flush","straight","StraightFlush","c1","c2","c1Cards","c2Cards","i1","i2","join","peek","_sortCards","getTypeName","languages","currentLang","langs","lang","Lang","chainedName","names","split","currentObject","keyName","babelHelpers.typeof","UpdatableContainer","game","updateChildren","children","removeChildren","child","update","Type","LinearLayout","childMargin","y","setOrientation","orientation","ORIENTATION_VERTICAL","_orientation","_posPropertyName","_sizePropertyName","ORIENTATION_HORIZONTAL","childIndex","getChildPosition","getChildAt","Point","pivot","updateChildrenPosition","pos","Score","Resolver","card1","card2","WON","LOST","DRAW","combo1","combo2","GUICardSelector","WIDTH","HEIGHT","moveTo","beginFill","lineTo","endFill","originalY","river","cardSlots","p","getCardPositionAt","cos","_frame","isKeyPushed","LEFT_ARROW","setCursorCardIndex","RIGHT_ARROW","UP_ARROW","SHIFT","setSelectedCardIndex","DOWN_ARROW","ENTER","Timer","targetedTime","ticker","shared","target","time","isStarted","stop","tick","remove","elapsedMS","TransformAnimation","posFrom","posTo","scaleFrom","isNaN","scaleTo","rotationFrom","rotationTo","alphaFrom","alphaTo","timer","duration","interpolator","sprite","start","rawRatio","ratio","setTransform","GUIText","text","textStyle","tags","animation","setAnimation","Text","BigText","GuiText","GuiToken","AbsScoreLayout","score","transitionDuration","transitionDelay","_lastScoreState","scoreState","STATE_TRANSITION_IDLE","isDestroyed","rendererWidth","renderer","rendererHeight","state","comparisonLabel","i18n","t","hasWon","isDraw","textConfig","STATE_TRANSITION_SUIT","STATE_TRANSITION_COMPARISON","STATE_TRANSITION_COMPARISON_ENDING","STATE_TRANSITION_TERMINATED","GUIScoreLayout","compareCombos","playerCombo","iaCombo","spawnSuitName","spawnComparison","mUpdateChildrenPosition","comboName","getSuitText","getInAnimation","changeState","getComparisonText","getOutAnimation","GUIBetScore","ContextualBox","_isValid","drawBox","graphics","rect","left","top","right","bottom","Rect","ContextualDisplayer","parent","getWidth","getHeight","_drawBox","col1","col2","rows","label","row","texts","textStyleWhite","textStyleOrange","bold","beginIndex","isLastItem","charAt","trim","GUICursor","MENU_ITEM_FONT_SIZE","ContextualMenu","currentCursor","currentCursorIndex","menuItems","layout","menuDesc","menuitem","menuItemIndex","menuItemCallback","setCursorIndex","position","getChildPositionAt","hasCursor","isKeyReleased","item","MARGIN_HONRIZONTAL","MARGIN_VERTICAL","GUIContext","_width","_height","displayControls","displayCombo","displayChooseBet","displayMenu","setPlayingState","Game","STATE_PLAYING_CHOOSE_UP_OR_DOWN","tokenCount","betCount","STATE_PLAYING_CHOOSE_CARDS","displayUpOrDownChoice","GUIComboTypeItem","comboType","parentWidth","redraw","localeComboName","factorText","GUIComboTypesList","drawLists","MARGIN_HOR","linearLayoutWidth","GUIBetBox","betText","GUITokenCount","totalTokenText","TopMenuLayout","AbsCardArea","slots","updateLayoutPivot","removeCard","removeChild","removeCardAt","getCardAt","addCardAt","findFirstEmptySlot","CardRiverArea","keepTexts","selectedCardsToBeChanged","_generateKeepTexts","fill","fontSize","displayKeepTexts","keepText","swt","indexOfCard","isSelected","CardBetArea","setup","originalBetCount","gameState","GAME_IDLE","playingGameState","STATE_PLAYING_CHOOSE_BET","cardsGenerator","cardTextures","fg","gui","renderingContainer","rendererOptions","transparent","autoResize","antialias","resolution","backgroundColor","roundPixels","autoDetectRenderer","container","appendChild","view","setSize","setLang","clearGame","player","destroyChildren","STATE_IDLE","stageWidth","stageHeight","betRiver","contextualBox","topMenu","clearBoard","clearCards","generateCards","iteration","clamp","shuffle","count","cardArea","addCard","cursor","findChildrenByType","distribute","displayCardCursorSelection","STATE_PLAYING_DISPLAY_RIVER_SCORE","hideKeepTexts","commitChanges","getCardComboList","getHigherCombo","highlight","String","STATE_PLAYING_CHOOSE_RISK","_onBetChoiceDone","bind","choice","firstCard","lastCard","displayBetScore","STATE_PLAYING_DISPLAY_BET_SCORE","FPS","started","GAME_PLAYING","w","h","resize","isRunning","setState","STATE_PLAYING","loop","scoreLayout","render","cardsLen","GuiClass","instance","STATE_INTRO","STATE_GAMEOVER","STATE_PLAYING_EXCHANGE_CARD_TRANSITION","STATE_PLAYING_UP_OR_DOWN_SCORE","VERSION","version","BUILD_TIME","Tracker"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}